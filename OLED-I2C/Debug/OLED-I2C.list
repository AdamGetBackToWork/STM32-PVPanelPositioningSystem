
OLED-I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a058  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e0  0800a118  0800a118  0001a118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6f8  0800a6f8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6f8  0800a6f8  0001a6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a700  0800a700  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a700  0800a700  0001a700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a704  0800a704  0001a704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800a708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  2000005c  0800a764  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  0800a764  00020448  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   000155c6  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003898  00000000  00000000  0003568d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001278  00000000  00000000  00038f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e40  00000000  00000000  0003a1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017caa  00000000  00000000  0003afe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a427  00000000  00000000  00052c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008aba5  00000000  00000000  0006d0b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000450c  00000000  00000000  000f7c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000fc164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a100 	.word	0x0800a100

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	0800a100 	.word	0x0800a100

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f852 	bl	80004cc <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_lmul>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	46ce      	mov	lr, r9
 8000438:	4699      	mov	r9, r3
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	469c      	mov	ip, r3
 800043e:	0413      	lsls	r3, r2, #16
 8000440:	4647      	mov	r7, r8
 8000442:	0c1b      	lsrs	r3, r3, #16
 8000444:	001d      	movs	r5, r3
 8000446:	000e      	movs	r6, r1
 8000448:	4661      	mov	r1, ip
 800044a:	0404      	lsls	r4, r0, #16
 800044c:	0c24      	lsrs	r4, r4, #16
 800044e:	b580      	push	{r7, lr}
 8000450:	0007      	movs	r7, r0
 8000452:	0c10      	lsrs	r0, r2, #16
 8000454:	434b      	muls	r3, r1
 8000456:	4365      	muls	r5, r4
 8000458:	4341      	muls	r1, r0
 800045a:	4360      	muls	r0, r4
 800045c:	0c2c      	lsrs	r4, r5, #16
 800045e:	18c0      	adds	r0, r0, r3
 8000460:	1820      	adds	r0, r4, r0
 8000462:	468c      	mov	ip, r1
 8000464:	4283      	cmp	r3, r0
 8000466:	d903      	bls.n	8000470 <__aeabi_lmul+0x3c>
 8000468:	2380      	movs	r3, #128	; 0x80
 800046a:	025b      	lsls	r3, r3, #9
 800046c:	4698      	mov	r8, r3
 800046e:	44c4      	add	ip, r8
 8000470:	4649      	mov	r1, r9
 8000472:	4379      	muls	r1, r7
 8000474:	4356      	muls	r6, r2
 8000476:	0c03      	lsrs	r3, r0, #16
 8000478:	042d      	lsls	r5, r5, #16
 800047a:	0c2d      	lsrs	r5, r5, #16
 800047c:	1989      	adds	r1, r1, r6
 800047e:	4463      	add	r3, ip
 8000480:	0400      	lsls	r0, r0, #16
 8000482:	1940      	adds	r0, r0, r5
 8000484:	18c9      	adds	r1, r1, r3
 8000486:	bcc0      	pop	{r6, r7}
 8000488:	46b9      	mov	r9, r7
 800048a:	46b0      	mov	r8, r6
 800048c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_d2uiz>:
 8000490:	b570      	push	{r4, r5, r6, lr}
 8000492:	2200      	movs	r2, #0
 8000494:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <__aeabi_d2uiz+0x38>)
 8000496:	0004      	movs	r4, r0
 8000498:	000d      	movs	r5, r1
 800049a:	f001 f82f 	bl	80014fc <__aeabi_dcmpge>
 800049e:	2800      	cmp	r0, #0
 80004a0:	d104      	bne.n	80004ac <__aeabi_d2uiz+0x1c>
 80004a2:	0020      	movs	r0, r4
 80004a4:	0029      	movs	r1, r5
 80004a6:	f000 ffbf 	bl	8001428 <__aeabi_d2iz>
 80004aa:	bd70      	pop	{r4, r5, r6, pc}
 80004ac:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <__aeabi_d2uiz+0x38>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	0020      	movs	r0, r4
 80004b2:	0029      	movs	r1, r5
 80004b4:	f000 fc36 	bl	8000d24 <__aeabi_dsub>
 80004b8:	f000 ffb6 	bl	8001428 <__aeabi_d2iz>
 80004bc:	2380      	movs	r3, #128	; 0x80
 80004be:	061b      	lsls	r3, r3, #24
 80004c0:	469c      	mov	ip, r3
 80004c2:	4460      	add	r0, ip
 80004c4:	e7f1      	b.n	80004aa <__aeabi_d2uiz+0x1a>
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	41e00000 	.word	0x41e00000

080004cc <__udivmoddi4>:
 80004cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ce:	4657      	mov	r7, sl
 80004d0:	464e      	mov	r6, r9
 80004d2:	4645      	mov	r5, r8
 80004d4:	46de      	mov	lr, fp
 80004d6:	b5e0      	push	{r5, r6, r7, lr}
 80004d8:	0004      	movs	r4, r0
 80004da:	000d      	movs	r5, r1
 80004dc:	4692      	mov	sl, r2
 80004de:	4699      	mov	r9, r3
 80004e0:	b083      	sub	sp, #12
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d830      	bhi.n	8000548 <__udivmoddi4+0x7c>
 80004e6:	d02d      	beq.n	8000544 <__udivmoddi4+0x78>
 80004e8:	4649      	mov	r1, r9
 80004ea:	4650      	mov	r0, sl
 80004ec:	f001 f82e 	bl	800154c <__clzdi2>
 80004f0:	0029      	movs	r1, r5
 80004f2:	0006      	movs	r6, r0
 80004f4:	0020      	movs	r0, r4
 80004f6:	f001 f829 	bl	800154c <__clzdi2>
 80004fa:	1a33      	subs	r3, r6, r0
 80004fc:	4698      	mov	r8, r3
 80004fe:	3b20      	subs	r3, #32
 8000500:	d434      	bmi.n	800056c <__udivmoddi4+0xa0>
 8000502:	469b      	mov	fp, r3
 8000504:	4653      	mov	r3, sl
 8000506:	465a      	mov	r2, fp
 8000508:	4093      	lsls	r3, r2
 800050a:	4642      	mov	r2, r8
 800050c:	001f      	movs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d83b      	bhi.n	8000590 <__udivmoddi4+0xc4>
 8000518:	42af      	cmp	r7, r5
 800051a:	d100      	bne.n	800051e <__udivmoddi4+0x52>
 800051c:	e079      	b.n	8000612 <__udivmoddi4+0x146>
 800051e:	465b      	mov	r3, fp
 8000520:	1ba4      	subs	r4, r4, r6
 8000522:	41bd      	sbcs	r5, r7
 8000524:	2b00      	cmp	r3, #0
 8000526:	da00      	bge.n	800052a <__udivmoddi4+0x5e>
 8000528:	e076      	b.n	8000618 <__udivmoddi4+0x14c>
 800052a:	2200      	movs	r2, #0
 800052c:	2300      	movs	r3, #0
 800052e:	9200      	str	r2, [sp, #0]
 8000530:	9301      	str	r3, [sp, #4]
 8000532:	2301      	movs	r3, #1
 8000534:	465a      	mov	r2, fp
 8000536:	4093      	lsls	r3, r2
 8000538:	9301      	str	r3, [sp, #4]
 800053a:	2301      	movs	r3, #1
 800053c:	4642      	mov	r2, r8
 800053e:	4093      	lsls	r3, r2
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	e029      	b.n	8000598 <__udivmoddi4+0xcc>
 8000544:	4282      	cmp	r2, r0
 8000546:	d9cf      	bls.n	80004e8 <__udivmoddi4+0x1c>
 8000548:	2200      	movs	r2, #0
 800054a:	2300      	movs	r3, #0
 800054c:	9200      	str	r2, [sp, #0]
 800054e:	9301      	str	r3, [sp, #4]
 8000550:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <__udivmoddi4+0x8e>
 8000556:	601c      	str	r4, [r3, #0]
 8000558:	605d      	str	r5, [r3, #4]
 800055a:	9800      	ldr	r0, [sp, #0]
 800055c:	9901      	ldr	r1, [sp, #4]
 800055e:	b003      	add	sp, #12
 8000560:	bcf0      	pop	{r4, r5, r6, r7}
 8000562:	46bb      	mov	fp, r7
 8000564:	46b2      	mov	sl, r6
 8000566:	46a9      	mov	r9, r5
 8000568:	46a0      	mov	r8, r4
 800056a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056c:	4642      	mov	r2, r8
 800056e:	469b      	mov	fp, r3
 8000570:	2320      	movs	r3, #32
 8000572:	1a9b      	subs	r3, r3, r2
 8000574:	4652      	mov	r2, sl
 8000576:	40da      	lsrs	r2, r3
 8000578:	4641      	mov	r1, r8
 800057a:	0013      	movs	r3, r2
 800057c:	464a      	mov	r2, r9
 800057e:	408a      	lsls	r2, r1
 8000580:	0017      	movs	r7, r2
 8000582:	4642      	mov	r2, r8
 8000584:	431f      	orrs	r7, r3
 8000586:	4653      	mov	r3, sl
 8000588:	4093      	lsls	r3, r2
 800058a:	001e      	movs	r6, r3
 800058c:	42af      	cmp	r7, r5
 800058e:	d9c3      	bls.n	8000518 <__udivmoddi4+0x4c>
 8000590:	2200      	movs	r2, #0
 8000592:	2300      	movs	r3, #0
 8000594:	9200      	str	r2, [sp, #0]
 8000596:	9301      	str	r3, [sp, #4]
 8000598:	4643      	mov	r3, r8
 800059a:	2b00      	cmp	r3, #0
 800059c:	d0d8      	beq.n	8000550 <__udivmoddi4+0x84>
 800059e:	07fb      	lsls	r3, r7, #31
 80005a0:	0872      	lsrs	r2, r6, #1
 80005a2:	431a      	orrs	r2, r3
 80005a4:	4646      	mov	r6, r8
 80005a6:	087b      	lsrs	r3, r7, #1
 80005a8:	e00e      	b.n	80005c8 <__udivmoddi4+0xfc>
 80005aa:	42ab      	cmp	r3, r5
 80005ac:	d101      	bne.n	80005b2 <__udivmoddi4+0xe6>
 80005ae:	42a2      	cmp	r2, r4
 80005b0:	d80c      	bhi.n	80005cc <__udivmoddi4+0x100>
 80005b2:	1aa4      	subs	r4, r4, r2
 80005b4:	419d      	sbcs	r5, r3
 80005b6:	2001      	movs	r0, #1
 80005b8:	1924      	adds	r4, r4, r4
 80005ba:	416d      	adcs	r5, r5
 80005bc:	2100      	movs	r1, #0
 80005be:	3e01      	subs	r6, #1
 80005c0:	1824      	adds	r4, r4, r0
 80005c2:	414d      	adcs	r5, r1
 80005c4:	2e00      	cmp	r6, #0
 80005c6:	d006      	beq.n	80005d6 <__udivmoddi4+0x10a>
 80005c8:	42ab      	cmp	r3, r5
 80005ca:	d9ee      	bls.n	80005aa <__udivmoddi4+0xde>
 80005cc:	3e01      	subs	r6, #1
 80005ce:	1924      	adds	r4, r4, r4
 80005d0:	416d      	adcs	r5, r5
 80005d2:	2e00      	cmp	r6, #0
 80005d4:	d1f8      	bne.n	80005c8 <__udivmoddi4+0xfc>
 80005d6:	9800      	ldr	r0, [sp, #0]
 80005d8:	9901      	ldr	r1, [sp, #4]
 80005da:	465b      	mov	r3, fp
 80005dc:	1900      	adds	r0, r0, r4
 80005de:	4169      	adcs	r1, r5
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	db24      	blt.n	800062e <__udivmoddi4+0x162>
 80005e4:	002b      	movs	r3, r5
 80005e6:	465a      	mov	r2, fp
 80005e8:	4644      	mov	r4, r8
 80005ea:	40d3      	lsrs	r3, r2
 80005ec:	002a      	movs	r2, r5
 80005ee:	40e2      	lsrs	r2, r4
 80005f0:	001c      	movs	r4, r3
 80005f2:	465b      	mov	r3, fp
 80005f4:	0015      	movs	r5, r2
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	db2a      	blt.n	8000650 <__udivmoddi4+0x184>
 80005fa:	0026      	movs	r6, r4
 80005fc:	409e      	lsls	r6, r3
 80005fe:	0033      	movs	r3, r6
 8000600:	0026      	movs	r6, r4
 8000602:	4647      	mov	r7, r8
 8000604:	40be      	lsls	r6, r7
 8000606:	0032      	movs	r2, r6
 8000608:	1a80      	subs	r0, r0, r2
 800060a:	4199      	sbcs	r1, r3
 800060c:	9000      	str	r0, [sp, #0]
 800060e:	9101      	str	r1, [sp, #4]
 8000610:	e79e      	b.n	8000550 <__udivmoddi4+0x84>
 8000612:	42a3      	cmp	r3, r4
 8000614:	d8bc      	bhi.n	8000590 <__udivmoddi4+0xc4>
 8000616:	e782      	b.n	800051e <__udivmoddi4+0x52>
 8000618:	4642      	mov	r2, r8
 800061a:	2320      	movs	r3, #32
 800061c:	2100      	movs	r1, #0
 800061e:	1a9b      	subs	r3, r3, r2
 8000620:	2200      	movs	r2, #0
 8000622:	9100      	str	r1, [sp, #0]
 8000624:	9201      	str	r2, [sp, #4]
 8000626:	2201      	movs	r2, #1
 8000628:	40da      	lsrs	r2, r3
 800062a:	9201      	str	r2, [sp, #4]
 800062c:	e785      	b.n	800053a <__udivmoddi4+0x6e>
 800062e:	4642      	mov	r2, r8
 8000630:	2320      	movs	r3, #32
 8000632:	1a9b      	subs	r3, r3, r2
 8000634:	002a      	movs	r2, r5
 8000636:	4646      	mov	r6, r8
 8000638:	409a      	lsls	r2, r3
 800063a:	0023      	movs	r3, r4
 800063c:	40f3      	lsrs	r3, r6
 800063e:	4644      	mov	r4, r8
 8000640:	4313      	orrs	r3, r2
 8000642:	002a      	movs	r2, r5
 8000644:	40e2      	lsrs	r2, r4
 8000646:	001c      	movs	r4, r3
 8000648:	465b      	mov	r3, fp
 800064a:	0015      	movs	r5, r2
 800064c:	2b00      	cmp	r3, #0
 800064e:	dad4      	bge.n	80005fa <__udivmoddi4+0x12e>
 8000650:	4642      	mov	r2, r8
 8000652:	002f      	movs	r7, r5
 8000654:	2320      	movs	r3, #32
 8000656:	0026      	movs	r6, r4
 8000658:	4097      	lsls	r7, r2
 800065a:	1a9b      	subs	r3, r3, r2
 800065c:	40de      	lsrs	r6, r3
 800065e:	003b      	movs	r3, r7
 8000660:	4333      	orrs	r3, r6
 8000662:	e7cd      	b.n	8000600 <__udivmoddi4+0x134>

08000664 <__aeabi_dadd>:
 8000664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000666:	464f      	mov	r7, r9
 8000668:	4646      	mov	r6, r8
 800066a:	46d6      	mov	lr, sl
 800066c:	0004      	movs	r4, r0
 800066e:	b5c0      	push	{r6, r7, lr}
 8000670:	001f      	movs	r7, r3
 8000672:	030b      	lsls	r3, r1, #12
 8000674:	0010      	movs	r0, r2
 8000676:	004e      	lsls	r6, r1, #1
 8000678:	0a5b      	lsrs	r3, r3, #9
 800067a:	0fcd      	lsrs	r5, r1, #31
 800067c:	0f61      	lsrs	r1, r4, #29
 800067e:	007a      	lsls	r2, r7, #1
 8000680:	4319      	orrs	r1, r3
 8000682:	00e3      	lsls	r3, r4, #3
 8000684:	033c      	lsls	r4, r7, #12
 8000686:	0fff      	lsrs	r7, r7, #31
 8000688:	46bc      	mov	ip, r7
 800068a:	0a64      	lsrs	r4, r4, #9
 800068c:	0f47      	lsrs	r7, r0, #29
 800068e:	4327      	orrs	r7, r4
 8000690:	0d76      	lsrs	r6, r6, #21
 8000692:	0d52      	lsrs	r2, r2, #21
 8000694:	00c0      	lsls	r0, r0, #3
 8000696:	46b9      	mov	r9, r7
 8000698:	4680      	mov	r8, r0
 800069a:	1ab7      	subs	r7, r6, r2
 800069c:	4565      	cmp	r5, ip
 800069e:	d100      	bne.n	80006a2 <__aeabi_dadd+0x3e>
 80006a0:	e09b      	b.n	80007da <__aeabi_dadd+0x176>
 80006a2:	2f00      	cmp	r7, #0
 80006a4:	dc00      	bgt.n	80006a8 <__aeabi_dadd+0x44>
 80006a6:	e084      	b.n	80007b2 <__aeabi_dadd+0x14e>
 80006a8:	2a00      	cmp	r2, #0
 80006aa:	d100      	bne.n	80006ae <__aeabi_dadd+0x4a>
 80006ac:	e0be      	b.n	800082c <__aeabi_dadd+0x1c8>
 80006ae:	4ac8      	ldr	r2, [pc, #800]	; (80009d0 <__aeabi_dadd+0x36c>)
 80006b0:	4296      	cmp	r6, r2
 80006b2:	d100      	bne.n	80006b6 <__aeabi_dadd+0x52>
 80006b4:	e124      	b.n	8000900 <__aeabi_dadd+0x29c>
 80006b6:	2280      	movs	r2, #128	; 0x80
 80006b8:	464c      	mov	r4, r9
 80006ba:	0412      	lsls	r2, r2, #16
 80006bc:	4314      	orrs	r4, r2
 80006be:	46a1      	mov	r9, r4
 80006c0:	2f38      	cmp	r7, #56	; 0x38
 80006c2:	dd00      	ble.n	80006c6 <__aeabi_dadd+0x62>
 80006c4:	e167      	b.n	8000996 <__aeabi_dadd+0x332>
 80006c6:	2f1f      	cmp	r7, #31
 80006c8:	dd00      	ble.n	80006cc <__aeabi_dadd+0x68>
 80006ca:	e1d6      	b.n	8000a7a <__aeabi_dadd+0x416>
 80006cc:	2220      	movs	r2, #32
 80006ce:	464c      	mov	r4, r9
 80006d0:	1bd2      	subs	r2, r2, r7
 80006d2:	4094      	lsls	r4, r2
 80006d4:	46a2      	mov	sl, r4
 80006d6:	4644      	mov	r4, r8
 80006d8:	40fc      	lsrs	r4, r7
 80006da:	0020      	movs	r0, r4
 80006dc:	4654      	mov	r4, sl
 80006de:	4304      	orrs	r4, r0
 80006e0:	4640      	mov	r0, r8
 80006e2:	4090      	lsls	r0, r2
 80006e4:	1e42      	subs	r2, r0, #1
 80006e6:	4190      	sbcs	r0, r2
 80006e8:	464a      	mov	r2, r9
 80006ea:	40fa      	lsrs	r2, r7
 80006ec:	4304      	orrs	r4, r0
 80006ee:	1a89      	subs	r1, r1, r2
 80006f0:	1b1c      	subs	r4, r3, r4
 80006f2:	42a3      	cmp	r3, r4
 80006f4:	4192      	sbcs	r2, r2
 80006f6:	4252      	negs	r2, r2
 80006f8:	1a8b      	subs	r3, r1, r2
 80006fa:	469a      	mov	sl, r3
 80006fc:	4653      	mov	r3, sl
 80006fe:	021b      	lsls	r3, r3, #8
 8000700:	d400      	bmi.n	8000704 <__aeabi_dadd+0xa0>
 8000702:	e0d4      	b.n	80008ae <__aeabi_dadd+0x24a>
 8000704:	4653      	mov	r3, sl
 8000706:	025a      	lsls	r2, r3, #9
 8000708:	0a53      	lsrs	r3, r2, #9
 800070a:	469a      	mov	sl, r3
 800070c:	4653      	mov	r3, sl
 800070e:	2b00      	cmp	r3, #0
 8000710:	d100      	bne.n	8000714 <__aeabi_dadd+0xb0>
 8000712:	e104      	b.n	800091e <__aeabi_dadd+0x2ba>
 8000714:	4650      	mov	r0, sl
 8000716:	f000 fefb 	bl	8001510 <__clzsi2>
 800071a:	0003      	movs	r3, r0
 800071c:	3b08      	subs	r3, #8
 800071e:	2220      	movs	r2, #32
 8000720:	0020      	movs	r0, r4
 8000722:	1ad2      	subs	r2, r2, r3
 8000724:	4651      	mov	r1, sl
 8000726:	40d0      	lsrs	r0, r2
 8000728:	4099      	lsls	r1, r3
 800072a:	0002      	movs	r2, r0
 800072c:	409c      	lsls	r4, r3
 800072e:	430a      	orrs	r2, r1
 8000730:	42b3      	cmp	r3, r6
 8000732:	da00      	bge.n	8000736 <__aeabi_dadd+0xd2>
 8000734:	e102      	b.n	800093c <__aeabi_dadd+0x2d8>
 8000736:	1b9b      	subs	r3, r3, r6
 8000738:	1c59      	adds	r1, r3, #1
 800073a:	291f      	cmp	r1, #31
 800073c:	dd00      	ble.n	8000740 <__aeabi_dadd+0xdc>
 800073e:	e0a7      	b.n	8000890 <__aeabi_dadd+0x22c>
 8000740:	2320      	movs	r3, #32
 8000742:	0010      	movs	r0, r2
 8000744:	0026      	movs	r6, r4
 8000746:	1a5b      	subs	r3, r3, r1
 8000748:	409c      	lsls	r4, r3
 800074a:	4098      	lsls	r0, r3
 800074c:	40ce      	lsrs	r6, r1
 800074e:	40ca      	lsrs	r2, r1
 8000750:	1e63      	subs	r3, r4, #1
 8000752:	419c      	sbcs	r4, r3
 8000754:	4330      	orrs	r0, r6
 8000756:	4692      	mov	sl, r2
 8000758:	2600      	movs	r6, #0
 800075a:	4304      	orrs	r4, r0
 800075c:	0763      	lsls	r3, r4, #29
 800075e:	d009      	beq.n	8000774 <__aeabi_dadd+0x110>
 8000760:	230f      	movs	r3, #15
 8000762:	4023      	ands	r3, r4
 8000764:	2b04      	cmp	r3, #4
 8000766:	d005      	beq.n	8000774 <__aeabi_dadd+0x110>
 8000768:	1d23      	adds	r3, r4, #4
 800076a:	42a3      	cmp	r3, r4
 800076c:	41a4      	sbcs	r4, r4
 800076e:	4264      	negs	r4, r4
 8000770:	44a2      	add	sl, r4
 8000772:	001c      	movs	r4, r3
 8000774:	4653      	mov	r3, sl
 8000776:	021b      	lsls	r3, r3, #8
 8000778:	d400      	bmi.n	800077c <__aeabi_dadd+0x118>
 800077a:	e09b      	b.n	80008b4 <__aeabi_dadd+0x250>
 800077c:	4b94      	ldr	r3, [pc, #592]	; (80009d0 <__aeabi_dadd+0x36c>)
 800077e:	3601      	adds	r6, #1
 8000780:	429e      	cmp	r6, r3
 8000782:	d100      	bne.n	8000786 <__aeabi_dadd+0x122>
 8000784:	e0b8      	b.n	80008f8 <__aeabi_dadd+0x294>
 8000786:	4653      	mov	r3, sl
 8000788:	4992      	ldr	r1, [pc, #584]	; (80009d4 <__aeabi_dadd+0x370>)
 800078a:	08e4      	lsrs	r4, r4, #3
 800078c:	400b      	ands	r3, r1
 800078e:	0019      	movs	r1, r3
 8000790:	075b      	lsls	r3, r3, #29
 8000792:	4323      	orrs	r3, r4
 8000794:	0572      	lsls	r2, r6, #21
 8000796:	024c      	lsls	r4, r1, #9
 8000798:	0b24      	lsrs	r4, r4, #12
 800079a:	0d52      	lsrs	r2, r2, #21
 800079c:	0512      	lsls	r2, r2, #20
 800079e:	07ed      	lsls	r5, r5, #31
 80007a0:	4322      	orrs	r2, r4
 80007a2:	432a      	orrs	r2, r5
 80007a4:	0018      	movs	r0, r3
 80007a6:	0011      	movs	r1, r2
 80007a8:	bce0      	pop	{r5, r6, r7}
 80007aa:	46ba      	mov	sl, r7
 80007ac:	46b1      	mov	r9, r6
 80007ae:	46a8      	mov	r8, r5
 80007b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007b2:	2f00      	cmp	r7, #0
 80007b4:	d048      	beq.n	8000848 <__aeabi_dadd+0x1e4>
 80007b6:	1b97      	subs	r7, r2, r6
 80007b8:	2e00      	cmp	r6, #0
 80007ba:	d000      	beq.n	80007be <__aeabi_dadd+0x15a>
 80007bc:	e10e      	b.n	80009dc <__aeabi_dadd+0x378>
 80007be:	000c      	movs	r4, r1
 80007c0:	431c      	orrs	r4, r3
 80007c2:	d100      	bne.n	80007c6 <__aeabi_dadd+0x162>
 80007c4:	e1b7      	b.n	8000b36 <__aeabi_dadd+0x4d2>
 80007c6:	1e7c      	subs	r4, r7, #1
 80007c8:	2f01      	cmp	r7, #1
 80007ca:	d100      	bne.n	80007ce <__aeabi_dadd+0x16a>
 80007cc:	e226      	b.n	8000c1c <__aeabi_dadd+0x5b8>
 80007ce:	4d80      	ldr	r5, [pc, #512]	; (80009d0 <__aeabi_dadd+0x36c>)
 80007d0:	42af      	cmp	r7, r5
 80007d2:	d100      	bne.n	80007d6 <__aeabi_dadd+0x172>
 80007d4:	e1d5      	b.n	8000b82 <__aeabi_dadd+0x51e>
 80007d6:	0027      	movs	r7, r4
 80007d8:	e107      	b.n	80009ea <__aeabi_dadd+0x386>
 80007da:	2f00      	cmp	r7, #0
 80007dc:	dc00      	bgt.n	80007e0 <__aeabi_dadd+0x17c>
 80007de:	e0b2      	b.n	8000946 <__aeabi_dadd+0x2e2>
 80007e0:	2a00      	cmp	r2, #0
 80007e2:	d047      	beq.n	8000874 <__aeabi_dadd+0x210>
 80007e4:	4a7a      	ldr	r2, [pc, #488]	; (80009d0 <__aeabi_dadd+0x36c>)
 80007e6:	4296      	cmp	r6, r2
 80007e8:	d100      	bne.n	80007ec <__aeabi_dadd+0x188>
 80007ea:	e089      	b.n	8000900 <__aeabi_dadd+0x29c>
 80007ec:	2280      	movs	r2, #128	; 0x80
 80007ee:	464c      	mov	r4, r9
 80007f0:	0412      	lsls	r2, r2, #16
 80007f2:	4314      	orrs	r4, r2
 80007f4:	46a1      	mov	r9, r4
 80007f6:	2f38      	cmp	r7, #56	; 0x38
 80007f8:	dc6b      	bgt.n	80008d2 <__aeabi_dadd+0x26e>
 80007fa:	2f1f      	cmp	r7, #31
 80007fc:	dc00      	bgt.n	8000800 <__aeabi_dadd+0x19c>
 80007fe:	e16e      	b.n	8000ade <__aeabi_dadd+0x47a>
 8000800:	003a      	movs	r2, r7
 8000802:	4648      	mov	r0, r9
 8000804:	3a20      	subs	r2, #32
 8000806:	40d0      	lsrs	r0, r2
 8000808:	4684      	mov	ip, r0
 800080a:	2f20      	cmp	r7, #32
 800080c:	d007      	beq.n	800081e <__aeabi_dadd+0x1ba>
 800080e:	2240      	movs	r2, #64	; 0x40
 8000810:	4648      	mov	r0, r9
 8000812:	1bd2      	subs	r2, r2, r7
 8000814:	4090      	lsls	r0, r2
 8000816:	0002      	movs	r2, r0
 8000818:	4640      	mov	r0, r8
 800081a:	4310      	orrs	r0, r2
 800081c:	4680      	mov	r8, r0
 800081e:	4640      	mov	r0, r8
 8000820:	1e42      	subs	r2, r0, #1
 8000822:	4190      	sbcs	r0, r2
 8000824:	4662      	mov	r2, ip
 8000826:	0004      	movs	r4, r0
 8000828:	4314      	orrs	r4, r2
 800082a:	e057      	b.n	80008dc <__aeabi_dadd+0x278>
 800082c:	464a      	mov	r2, r9
 800082e:	4302      	orrs	r2, r0
 8000830:	d100      	bne.n	8000834 <__aeabi_dadd+0x1d0>
 8000832:	e103      	b.n	8000a3c <__aeabi_dadd+0x3d8>
 8000834:	1e7a      	subs	r2, r7, #1
 8000836:	2f01      	cmp	r7, #1
 8000838:	d100      	bne.n	800083c <__aeabi_dadd+0x1d8>
 800083a:	e193      	b.n	8000b64 <__aeabi_dadd+0x500>
 800083c:	4c64      	ldr	r4, [pc, #400]	; (80009d0 <__aeabi_dadd+0x36c>)
 800083e:	42a7      	cmp	r7, r4
 8000840:	d100      	bne.n	8000844 <__aeabi_dadd+0x1e0>
 8000842:	e18a      	b.n	8000b5a <__aeabi_dadd+0x4f6>
 8000844:	0017      	movs	r7, r2
 8000846:	e73b      	b.n	80006c0 <__aeabi_dadd+0x5c>
 8000848:	4c63      	ldr	r4, [pc, #396]	; (80009d8 <__aeabi_dadd+0x374>)
 800084a:	1c72      	adds	r2, r6, #1
 800084c:	4222      	tst	r2, r4
 800084e:	d000      	beq.n	8000852 <__aeabi_dadd+0x1ee>
 8000850:	e0e0      	b.n	8000a14 <__aeabi_dadd+0x3b0>
 8000852:	000a      	movs	r2, r1
 8000854:	431a      	orrs	r2, r3
 8000856:	2e00      	cmp	r6, #0
 8000858:	d000      	beq.n	800085c <__aeabi_dadd+0x1f8>
 800085a:	e174      	b.n	8000b46 <__aeabi_dadd+0x4e2>
 800085c:	2a00      	cmp	r2, #0
 800085e:	d100      	bne.n	8000862 <__aeabi_dadd+0x1fe>
 8000860:	e1d0      	b.n	8000c04 <__aeabi_dadd+0x5a0>
 8000862:	464a      	mov	r2, r9
 8000864:	4302      	orrs	r2, r0
 8000866:	d000      	beq.n	800086a <__aeabi_dadd+0x206>
 8000868:	e1e3      	b.n	8000c32 <__aeabi_dadd+0x5ce>
 800086a:	074a      	lsls	r2, r1, #29
 800086c:	08db      	lsrs	r3, r3, #3
 800086e:	4313      	orrs	r3, r2
 8000870:	08c9      	lsrs	r1, r1, #3
 8000872:	e029      	b.n	80008c8 <__aeabi_dadd+0x264>
 8000874:	464a      	mov	r2, r9
 8000876:	4302      	orrs	r2, r0
 8000878:	d100      	bne.n	800087c <__aeabi_dadd+0x218>
 800087a:	e17d      	b.n	8000b78 <__aeabi_dadd+0x514>
 800087c:	1e7a      	subs	r2, r7, #1
 800087e:	2f01      	cmp	r7, #1
 8000880:	d100      	bne.n	8000884 <__aeabi_dadd+0x220>
 8000882:	e0e0      	b.n	8000a46 <__aeabi_dadd+0x3e2>
 8000884:	4c52      	ldr	r4, [pc, #328]	; (80009d0 <__aeabi_dadd+0x36c>)
 8000886:	42a7      	cmp	r7, r4
 8000888:	d100      	bne.n	800088c <__aeabi_dadd+0x228>
 800088a:	e166      	b.n	8000b5a <__aeabi_dadd+0x4f6>
 800088c:	0017      	movs	r7, r2
 800088e:	e7b2      	b.n	80007f6 <__aeabi_dadd+0x192>
 8000890:	0010      	movs	r0, r2
 8000892:	3b1f      	subs	r3, #31
 8000894:	40d8      	lsrs	r0, r3
 8000896:	2920      	cmp	r1, #32
 8000898:	d003      	beq.n	80008a2 <__aeabi_dadd+0x23e>
 800089a:	2340      	movs	r3, #64	; 0x40
 800089c:	1a5b      	subs	r3, r3, r1
 800089e:	409a      	lsls	r2, r3
 80008a0:	4314      	orrs	r4, r2
 80008a2:	1e63      	subs	r3, r4, #1
 80008a4:	419c      	sbcs	r4, r3
 80008a6:	2300      	movs	r3, #0
 80008a8:	2600      	movs	r6, #0
 80008aa:	469a      	mov	sl, r3
 80008ac:	4304      	orrs	r4, r0
 80008ae:	0763      	lsls	r3, r4, #29
 80008b0:	d000      	beq.n	80008b4 <__aeabi_dadd+0x250>
 80008b2:	e755      	b.n	8000760 <__aeabi_dadd+0xfc>
 80008b4:	4652      	mov	r2, sl
 80008b6:	08e3      	lsrs	r3, r4, #3
 80008b8:	0752      	lsls	r2, r2, #29
 80008ba:	4313      	orrs	r3, r2
 80008bc:	4652      	mov	r2, sl
 80008be:	0037      	movs	r7, r6
 80008c0:	08d1      	lsrs	r1, r2, #3
 80008c2:	4a43      	ldr	r2, [pc, #268]	; (80009d0 <__aeabi_dadd+0x36c>)
 80008c4:	4297      	cmp	r7, r2
 80008c6:	d01f      	beq.n	8000908 <__aeabi_dadd+0x2a4>
 80008c8:	0309      	lsls	r1, r1, #12
 80008ca:	057a      	lsls	r2, r7, #21
 80008cc:	0b0c      	lsrs	r4, r1, #12
 80008ce:	0d52      	lsrs	r2, r2, #21
 80008d0:	e764      	b.n	800079c <__aeabi_dadd+0x138>
 80008d2:	4642      	mov	r2, r8
 80008d4:	464c      	mov	r4, r9
 80008d6:	4314      	orrs	r4, r2
 80008d8:	1e62      	subs	r2, r4, #1
 80008da:	4194      	sbcs	r4, r2
 80008dc:	18e4      	adds	r4, r4, r3
 80008de:	429c      	cmp	r4, r3
 80008e0:	4192      	sbcs	r2, r2
 80008e2:	4252      	negs	r2, r2
 80008e4:	4692      	mov	sl, r2
 80008e6:	448a      	add	sl, r1
 80008e8:	4653      	mov	r3, sl
 80008ea:	021b      	lsls	r3, r3, #8
 80008ec:	d5df      	bpl.n	80008ae <__aeabi_dadd+0x24a>
 80008ee:	4b38      	ldr	r3, [pc, #224]	; (80009d0 <__aeabi_dadd+0x36c>)
 80008f0:	3601      	adds	r6, #1
 80008f2:	429e      	cmp	r6, r3
 80008f4:	d000      	beq.n	80008f8 <__aeabi_dadd+0x294>
 80008f6:	e0b3      	b.n	8000a60 <__aeabi_dadd+0x3fc>
 80008f8:	0032      	movs	r2, r6
 80008fa:	2400      	movs	r4, #0
 80008fc:	2300      	movs	r3, #0
 80008fe:	e74d      	b.n	800079c <__aeabi_dadd+0x138>
 8000900:	074a      	lsls	r2, r1, #29
 8000902:	08db      	lsrs	r3, r3, #3
 8000904:	4313      	orrs	r3, r2
 8000906:	08c9      	lsrs	r1, r1, #3
 8000908:	001a      	movs	r2, r3
 800090a:	430a      	orrs	r2, r1
 800090c:	d100      	bne.n	8000910 <__aeabi_dadd+0x2ac>
 800090e:	e200      	b.n	8000d12 <__aeabi_dadd+0x6ae>
 8000910:	2480      	movs	r4, #128	; 0x80
 8000912:	0324      	lsls	r4, r4, #12
 8000914:	430c      	orrs	r4, r1
 8000916:	0324      	lsls	r4, r4, #12
 8000918:	4a2d      	ldr	r2, [pc, #180]	; (80009d0 <__aeabi_dadd+0x36c>)
 800091a:	0b24      	lsrs	r4, r4, #12
 800091c:	e73e      	b.n	800079c <__aeabi_dadd+0x138>
 800091e:	0020      	movs	r0, r4
 8000920:	f000 fdf6 	bl	8001510 <__clzsi2>
 8000924:	0003      	movs	r3, r0
 8000926:	3318      	adds	r3, #24
 8000928:	2b1f      	cmp	r3, #31
 800092a:	dc00      	bgt.n	800092e <__aeabi_dadd+0x2ca>
 800092c:	e6f7      	b.n	800071e <__aeabi_dadd+0xba>
 800092e:	0022      	movs	r2, r4
 8000930:	3808      	subs	r0, #8
 8000932:	4082      	lsls	r2, r0
 8000934:	2400      	movs	r4, #0
 8000936:	42b3      	cmp	r3, r6
 8000938:	db00      	blt.n	800093c <__aeabi_dadd+0x2d8>
 800093a:	e6fc      	b.n	8000736 <__aeabi_dadd+0xd2>
 800093c:	1af6      	subs	r6, r6, r3
 800093e:	4b25      	ldr	r3, [pc, #148]	; (80009d4 <__aeabi_dadd+0x370>)
 8000940:	401a      	ands	r2, r3
 8000942:	4692      	mov	sl, r2
 8000944:	e70a      	b.n	800075c <__aeabi_dadd+0xf8>
 8000946:	2f00      	cmp	r7, #0
 8000948:	d02b      	beq.n	80009a2 <__aeabi_dadd+0x33e>
 800094a:	1b97      	subs	r7, r2, r6
 800094c:	2e00      	cmp	r6, #0
 800094e:	d100      	bne.n	8000952 <__aeabi_dadd+0x2ee>
 8000950:	e0b8      	b.n	8000ac4 <__aeabi_dadd+0x460>
 8000952:	4c1f      	ldr	r4, [pc, #124]	; (80009d0 <__aeabi_dadd+0x36c>)
 8000954:	42a2      	cmp	r2, r4
 8000956:	d100      	bne.n	800095a <__aeabi_dadd+0x2f6>
 8000958:	e11c      	b.n	8000b94 <__aeabi_dadd+0x530>
 800095a:	2480      	movs	r4, #128	; 0x80
 800095c:	0424      	lsls	r4, r4, #16
 800095e:	4321      	orrs	r1, r4
 8000960:	2f38      	cmp	r7, #56	; 0x38
 8000962:	dd00      	ble.n	8000966 <__aeabi_dadd+0x302>
 8000964:	e11e      	b.n	8000ba4 <__aeabi_dadd+0x540>
 8000966:	2f1f      	cmp	r7, #31
 8000968:	dd00      	ble.n	800096c <__aeabi_dadd+0x308>
 800096a:	e19e      	b.n	8000caa <__aeabi_dadd+0x646>
 800096c:	2620      	movs	r6, #32
 800096e:	000c      	movs	r4, r1
 8000970:	1bf6      	subs	r6, r6, r7
 8000972:	0018      	movs	r0, r3
 8000974:	40b3      	lsls	r3, r6
 8000976:	40b4      	lsls	r4, r6
 8000978:	40f8      	lsrs	r0, r7
 800097a:	1e5e      	subs	r6, r3, #1
 800097c:	41b3      	sbcs	r3, r6
 800097e:	40f9      	lsrs	r1, r7
 8000980:	4304      	orrs	r4, r0
 8000982:	431c      	orrs	r4, r3
 8000984:	4489      	add	r9, r1
 8000986:	4444      	add	r4, r8
 8000988:	4544      	cmp	r4, r8
 800098a:	419b      	sbcs	r3, r3
 800098c:	425b      	negs	r3, r3
 800098e:	444b      	add	r3, r9
 8000990:	469a      	mov	sl, r3
 8000992:	0016      	movs	r6, r2
 8000994:	e7a8      	b.n	80008e8 <__aeabi_dadd+0x284>
 8000996:	4642      	mov	r2, r8
 8000998:	464c      	mov	r4, r9
 800099a:	4314      	orrs	r4, r2
 800099c:	1e62      	subs	r2, r4, #1
 800099e:	4194      	sbcs	r4, r2
 80009a0:	e6a6      	b.n	80006f0 <__aeabi_dadd+0x8c>
 80009a2:	4c0d      	ldr	r4, [pc, #52]	; (80009d8 <__aeabi_dadd+0x374>)
 80009a4:	1c72      	adds	r2, r6, #1
 80009a6:	4222      	tst	r2, r4
 80009a8:	d000      	beq.n	80009ac <__aeabi_dadd+0x348>
 80009aa:	e0a8      	b.n	8000afe <__aeabi_dadd+0x49a>
 80009ac:	000a      	movs	r2, r1
 80009ae:	431a      	orrs	r2, r3
 80009b0:	2e00      	cmp	r6, #0
 80009b2:	d000      	beq.n	80009b6 <__aeabi_dadd+0x352>
 80009b4:	e10a      	b.n	8000bcc <__aeabi_dadd+0x568>
 80009b6:	2a00      	cmp	r2, #0
 80009b8:	d100      	bne.n	80009bc <__aeabi_dadd+0x358>
 80009ba:	e15e      	b.n	8000c7a <__aeabi_dadd+0x616>
 80009bc:	464a      	mov	r2, r9
 80009be:	4302      	orrs	r2, r0
 80009c0:	d000      	beq.n	80009c4 <__aeabi_dadd+0x360>
 80009c2:	e161      	b.n	8000c88 <__aeabi_dadd+0x624>
 80009c4:	074a      	lsls	r2, r1, #29
 80009c6:	08db      	lsrs	r3, r3, #3
 80009c8:	4313      	orrs	r3, r2
 80009ca:	08c9      	lsrs	r1, r1, #3
 80009cc:	e77c      	b.n	80008c8 <__aeabi_dadd+0x264>
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	000007ff 	.word	0x000007ff
 80009d4:	ff7fffff 	.word	0xff7fffff
 80009d8:	000007fe 	.word	0x000007fe
 80009dc:	4ccf      	ldr	r4, [pc, #828]	; (8000d1c <__aeabi_dadd+0x6b8>)
 80009de:	42a2      	cmp	r2, r4
 80009e0:	d100      	bne.n	80009e4 <__aeabi_dadd+0x380>
 80009e2:	e0ce      	b.n	8000b82 <__aeabi_dadd+0x51e>
 80009e4:	2480      	movs	r4, #128	; 0x80
 80009e6:	0424      	lsls	r4, r4, #16
 80009e8:	4321      	orrs	r1, r4
 80009ea:	2f38      	cmp	r7, #56	; 0x38
 80009ec:	dc5b      	bgt.n	8000aa6 <__aeabi_dadd+0x442>
 80009ee:	2f1f      	cmp	r7, #31
 80009f0:	dd00      	ble.n	80009f4 <__aeabi_dadd+0x390>
 80009f2:	e0dc      	b.n	8000bae <__aeabi_dadd+0x54a>
 80009f4:	2520      	movs	r5, #32
 80009f6:	000c      	movs	r4, r1
 80009f8:	1bed      	subs	r5, r5, r7
 80009fa:	001e      	movs	r6, r3
 80009fc:	40ab      	lsls	r3, r5
 80009fe:	40ac      	lsls	r4, r5
 8000a00:	40fe      	lsrs	r6, r7
 8000a02:	1e5d      	subs	r5, r3, #1
 8000a04:	41ab      	sbcs	r3, r5
 8000a06:	4334      	orrs	r4, r6
 8000a08:	40f9      	lsrs	r1, r7
 8000a0a:	431c      	orrs	r4, r3
 8000a0c:	464b      	mov	r3, r9
 8000a0e:	1a5b      	subs	r3, r3, r1
 8000a10:	4699      	mov	r9, r3
 8000a12:	e04c      	b.n	8000aae <__aeabi_dadd+0x44a>
 8000a14:	464a      	mov	r2, r9
 8000a16:	1a1c      	subs	r4, r3, r0
 8000a18:	1a88      	subs	r0, r1, r2
 8000a1a:	42a3      	cmp	r3, r4
 8000a1c:	4192      	sbcs	r2, r2
 8000a1e:	4252      	negs	r2, r2
 8000a20:	4692      	mov	sl, r2
 8000a22:	0002      	movs	r2, r0
 8000a24:	4650      	mov	r0, sl
 8000a26:	1a12      	subs	r2, r2, r0
 8000a28:	4692      	mov	sl, r2
 8000a2a:	0212      	lsls	r2, r2, #8
 8000a2c:	d478      	bmi.n	8000b20 <__aeabi_dadd+0x4bc>
 8000a2e:	4653      	mov	r3, sl
 8000a30:	4323      	orrs	r3, r4
 8000a32:	d000      	beq.n	8000a36 <__aeabi_dadd+0x3d2>
 8000a34:	e66a      	b.n	800070c <__aeabi_dadd+0xa8>
 8000a36:	2100      	movs	r1, #0
 8000a38:	2500      	movs	r5, #0
 8000a3a:	e745      	b.n	80008c8 <__aeabi_dadd+0x264>
 8000a3c:	074a      	lsls	r2, r1, #29
 8000a3e:	08db      	lsrs	r3, r3, #3
 8000a40:	4313      	orrs	r3, r2
 8000a42:	08c9      	lsrs	r1, r1, #3
 8000a44:	e73d      	b.n	80008c2 <__aeabi_dadd+0x25e>
 8000a46:	181c      	adds	r4, r3, r0
 8000a48:	429c      	cmp	r4, r3
 8000a4a:	419b      	sbcs	r3, r3
 8000a4c:	4449      	add	r1, r9
 8000a4e:	468a      	mov	sl, r1
 8000a50:	425b      	negs	r3, r3
 8000a52:	449a      	add	sl, r3
 8000a54:	4653      	mov	r3, sl
 8000a56:	2601      	movs	r6, #1
 8000a58:	021b      	lsls	r3, r3, #8
 8000a5a:	d400      	bmi.n	8000a5e <__aeabi_dadd+0x3fa>
 8000a5c:	e727      	b.n	80008ae <__aeabi_dadd+0x24a>
 8000a5e:	2602      	movs	r6, #2
 8000a60:	4652      	mov	r2, sl
 8000a62:	4baf      	ldr	r3, [pc, #700]	; (8000d20 <__aeabi_dadd+0x6bc>)
 8000a64:	2101      	movs	r1, #1
 8000a66:	401a      	ands	r2, r3
 8000a68:	0013      	movs	r3, r2
 8000a6a:	4021      	ands	r1, r4
 8000a6c:	0862      	lsrs	r2, r4, #1
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	07dc      	lsls	r4, r3, #31
 8000a72:	085b      	lsrs	r3, r3, #1
 8000a74:	469a      	mov	sl, r3
 8000a76:	4314      	orrs	r4, r2
 8000a78:	e670      	b.n	800075c <__aeabi_dadd+0xf8>
 8000a7a:	003a      	movs	r2, r7
 8000a7c:	464c      	mov	r4, r9
 8000a7e:	3a20      	subs	r2, #32
 8000a80:	40d4      	lsrs	r4, r2
 8000a82:	46a4      	mov	ip, r4
 8000a84:	2f20      	cmp	r7, #32
 8000a86:	d007      	beq.n	8000a98 <__aeabi_dadd+0x434>
 8000a88:	2240      	movs	r2, #64	; 0x40
 8000a8a:	4648      	mov	r0, r9
 8000a8c:	1bd2      	subs	r2, r2, r7
 8000a8e:	4090      	lsls	r0, r2
 8000a90:	0002      	movs	r2, r0
 8000a92:	4640      	mov	r0, r8
 8000a94:	4310      	orrs	r0, r2
 8000a96:	4680      	mov	r8, r0
 8000a98:	4640      	mov	r0, r8
 8000a9a:	1e42      	subs	r2, r0, #1
 8000a9c:	4190      	sbcs	r0, r2
 8000a9e:	4662      	mov	r2, ip
 8000aa0:	0004      	movs	r4, r0
 8000aa2:	4314      	orrs	r4, r2
 8000aa4:	e624      	b.n	80006f0 <__aeabi_dadd+0x8c>
 8000aa6:	4319      	orrs	r1, r3
 8000aa8:	000c      	movs	r4, r1
 8000aaa:	1e63      	subs	r3, r4, #1
 8000aac:	419c      	sbcs	r4, r3
 8000aae:	4643      	mov	r3, r8
 8000ab0:	1b1c      	subs	r4, r3, r4
 8000ab2:	45a0      	cmp	r8, r4
 8000ab4:	419b      	sbcs	r3, r3
 8000ab6:	4649      	mov	r1, r9
 8000ab8:	425b      	negs	r3, r3
 8000aba:	1acb      	subs	r3, r1, r3
 8000abc:	469a      	mov	sl, r3
 8000abe:	4665      	mov	r5, ip
 8000ac0:	0016      	movs	r6, r2
 8000ac2:	e61b      	b.n	80006fc <__aeabi_dadd+0x98>
 8000ac4:	000c      	movs	r4, r1
 8000ac6:	431c      	orrs	r4, r3
 8000ac8:	d100      	bne.n	8000acc <__aeabi_dadd+0x468>
 8000aca:	e0c7      	b.n	8000c5c <__aeabi_dadd+0x5f8>
 8000acc:	1e7c      	subs	r4, r7, #1
 8000ace:	2f01      	cmp	r7, #1
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_dadd+0x470>
 8000ad2:	e0f9      	b.n	8000cc8 <__aeabi_dadd+0x664>
 8000ad4:	4e91      	ldr	r6, [pc, #580]	; (8000d1c <__aeabi_dadd+0x6b8>)
 8000ad6:	42b7      	cmp	r7, r6
 8000ad8:	d05c      	beq.n	8000b94 <__aeabi_dadd+0x530>
 8000ada:	0027      	movs	r7, r4
 8000adc:	e740      	b.n	8000960 <__aeabi_dadd+0x2fc>
 8000ade:	2220      	movs	r2, #32
 8000ae0:	464c      	mov	r4, r9
 8000ae2:	4640      	mov	r0, r8
 8000ae4:	1bd2      	subs	r2, r2, r7
 8000ae6:	4094      	lsls	r4, r2
 8000ae8:	40f8      	lsrs	r0, r7
 8000aea:	4304      	orrs	r4, r0
 8000aec:	4640      	mov	r0, r8
 8000aee:	4090      	lsls	r0, r2
 8000af0:	1e42      	subs	r2, r0, #1
 8000af2:	4190      	sbcs	r0, r2
 8000af4:	464a      	mov	r2, r9
 8000af6:	40fa      	lsrs	r2, r7
 8000af8:	4304      	orrs	r4, r0
 8000afa:	1889      	adds	r1, r1, r2
 8000afc:	e6ee      	b.n	80008dc <__aeabi_dadd+0x278>
 8000afe:	4c87      	ldr	r4, [pc, #540]	; (8000d1c <__aeabi_dadd+0x6b8>)
 8000b00:	42a2      	cmp	r2, r4
 8000b02:	d100      	bne.n	8000b06 <__aeabi_dadd+0x4a2>
 8000b04:	e6f9      	b.n	80008fa <__aeabi_dadd+0x296>
 8000b06:	1818      	adds	r0, r3, r0
 8000b08:	4298      	cmp	r0, r3
 8000b0a:	419b      	sbcs	r3, r3
 8000b0c:	4449      	add	r1, r9
 8000b0e:	425b      	negs	r3, r3
 8000b10:	18cb      	adds	r3, r1, r3
 8000b12:	07dc      	lsls	r4, r3, #31
 8000b14:	0840      	lsrs	r0, r0, #1
 8000b16:	085b      	lsrs	r3, r3, #1
 8000b18:	469a      	mov	sl, r3
 8000b1a:	0016      	movs	r6, r2
 8000b1c:	4304      	orrs	r4, r0
 8000b1e:	e6c6      	b.n	80008ae <__aeabi_dadd+0x24a>
 8000b20:	4642      	mov	r2, r8
 8000b22:	1ad4      	subs	r4, r2, r3
 8000b24:	45a0      	cmp	r8, r4
 8000b26:	4180      	sbcs	r0, r0
 8000b28:	464b      	mov	r3, r9
 8000b2a:	4240      	negs	r0, r0
 8000b2c:	1a59      	subs	r1, r3, r1
 8000b2e:	1a0b      	subs	r3, r1, r0
 8000b30:	469a      	mov	sl, r3
 8000b32:	4665      	mov	r5, ip
 8000b34:	e5ea      	b.n	800070c <__aeabi_dadd+0xa8>
 8000b36:	464b      	mov	r3, r9
 8000b38:	464a      	mov	r2, r9
 8000b3a:	08c0      	lsrs	r0, r0, #3
 8000b3c:	075b      	lsls	r3, r3, #29
 8000b3e:	4665      	mov	r5, ip
 8000b40:	4303      	orrs	r3, r0
 8000b42:	08d1      	lsrs	r1, r2, #3
 8000b44:	e6bd      	b.n	80008c2 <__aeabi_dadd+0x25e>
 8000b46:	2a00      	cmp	r2, #0
 8000b48:	d000      	beq.n	8000b4c <__aeabi_dadd+0x4e8>
 8000b4a:	e08e      	b.n	8000c6a <__aeabi_dadd+0x606>
 8000b4c:	464b      	mov	r3, r9
 8000b4e:	4303      	orrs	r3, r0
 8000b50:	d117      	bne.n	8000b82 <__aeabi_dadd+0x51e>
 8000b52:	2180      	movs	r1, #128	; 0x80
 8000b54:	2500      	movs	r5, #0
 8000b56:	0309      	lsls	r1, r1, #12
 8000b58:	e6da      	b.n	8000910 <__aeabi_dadd+0x2ac>
 8000b5a:	074a      	lsls	r2, r1, #29
 8000b5c:	08db      	lsrs	r3, r3, #3
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	08c9      	lsrs	r1, r1, #3
 8000b62:	e6d1      	b.n	8000908 <__aeabi_dadd+0x2a4>
 8000b64:	1a1c      	subs	r4, r3, r0
 8000b66:	464a      	mov	r2, r9
 8000b68:	42a3      	cmp	r3, r4
 8000b6a:	419b      	sbcs	r3, r3
 8000b6c:	1a89      	subs	r1, r1, r2
 8000b6e:	425b      	negs	r3, r3
 8000b70:	1acb      	subs	r3, r1, r3
 8000b72:	469a      	mov	sl, r3
 8000b74:	2601      	movs	r6, #1
 8000b76:	e5c1      	b.n	80006fc <__aeabi_dadd+0x98>
 8000b78:	074a      	lsls	r2, r1, #29
 8000b7a:	08db      	lsrs	r3, r3, #3
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	08c9      	lsrs	r1, r1, #3
 8000b80:	e69f      	b.n	80008c2 <__aeabi_dadd+0x25e>
 8000b82:	4643      	mov	r3, r8
 8000b84:	08d8      	lsrs	r0, r3, #3
 8000b86:	464b      	mov	r3, r9
 8000b88:	464a      	mov	r2, r9
 8000b8a:	075b      	lsls	r3, r3, #29
 8000b8c:	4665      	mov	r5, ip
 8000b8e:	4303      	orrs	r3, r0
 8000b90:	08d1      	lsrs	r1, r2, #3
 8000b92:	e6b9      	b.n	8000908 <__aeabi_dadd+0x2a4>
 8000b94:	4643      	mov	r3, r8
 8000b96:	08d8      	lsrs	r0, r3, #3
 8000b98:	464b      	mov	r3, r9
 8000b9a:	464a      	mov	r2, r9
 8000b9c:	075b      	lsls	r3, r3, #29
 8000b9e:	4303      	orrs	r3, r0
 8000ba0:	08d1      	lsrs	r1, r2, #3
 8000ba2:	e6b1      	b.n	8000908 <__aeabi_dadd+0x2a4>
 8000ba4:	4319      	orrs	r1, r3
 8000ba6:	000c      	movs	r4, r1
 8000ba8:	1e63      	subs	r3, r4, #1
 8000baa:	419c      	sbcs	r4, r3
 8000bac:	e6eb      	b.n	8000986 <__aeabi_dadd+0x322>
 8000bae:	003c      	movs	r4, r7
 8000bb0:	000d      	movs	r5, r1
 8000bb2:	3c20      	subs	r4, #32
 8000bb4:	40e5      	lsrs	r5, r4
 8000bb6:	2f20      	cmp	r7, #32
 8000bb8:	d003      	beq.n	8000bc2 <__aeabi_dadd+0x55e>
 8000bba:	2440      	movs	r4, #64	; 0x40
 8000bbc:	1be4      	subs	r4, r4, r7
 8000bbe:	40a1      	lsls	r1, r4
 8000bc0:	430b      	orrs	r3, r1
 8000bc2:	001c      	movs	r4, r3
 8000bc4:	1e63      	subs	r3, r4, #1
 8000bc6:	419c      	sbcs	r4, r3
 8000bc8:	432c      	orrs	r4, r5
 8000bca:	e770      	b.n	8000aae <__aeabi_dadd+0x44a>
 8000bcc:	2a00      	cmp	r2, #0
 8000bce:	d0e1      	beq.n	8000b94 <__aeabi_dadd+0x530>
 8000bd0:	464a      	mov	r2, r9
 8000bd2:	4302      	orrs	r2, r0
 8000bd4:	d0c1      	beq.n	8000b5a <__aeabi_dadd+0x4f6>
 8000bd6:	074a      	lsls	r2, r1, #29
 8000bd8:	08db      	lsrs	r3, r3, #3
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	2280      	movs	r2, #128	; 0x80
 8000bde:	08c9      	lsrs	r1, r1, #3
 8000be0:	0312      	lsls	r2, r2, #12
 8000be2:	4211      	tst	r1, r2
 8000be4:	d008      	beq.n	8000bf8 <__aeabi_dadd+0x594>
 8000be6:	4648      	mov	r0, r9
 8000be8:	08c4      	lsrs	r4, r0, #3
 8000bea:	4214      	tst	r4, r2
 8000bec:	d104      	bne.n	8000bf8 <__aeabi_dadd+0x594>
 8000bee:	4643      	mov	r3, r8
 8000bf0:	0021      	movs	r1, r4
 8000bf2:	08db      	lsrs	r3, r3, #3
 8000bf4:	0742      	lsls	r2, r0, #29
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	0f5a      	lsrs	r2, r3, #29
 8000bfa:	00db      	lsls	r3, r3, #3
 8000bfc:	0752      	lsls	r2, r2, #29
 8000bfe:	08db      	lsrs	r3, r3, #3
 8000c00:	4313      	orrs	r3, r2
 8000c02:	e681      	b.n	8000908 <__aeabi_dadd+0x2a4>
 8000c04:	464b      	mov	r3, r9
 8000c06:	4303      	orrs	r3, r0
 8000c08:	d100      	bne.n	8000c0c <__aeabi_dadd+0x5a8>
 8000c0a:	e714      	b.n	8000a36 <__aeabi_dadd+0x3d2>
 8000c0c:	464b      	mov	r3, r9
 8000c0e:	464a      	mov	r2, r9
 8000c10:	08c0      	lsrs	r0, r0, #3
 8000c12:	075b      	lsls	r3, r3, #29
 8000c14:	4665      	mov	r5, ip
 8000c16:	4303      	orrs	r3, r0
 8000c18:	08d1      	lsrs	r1, r2, #3
 8000c1a:	e655      	b.n	80008c8 <__aeabi_dadd+0x264>
 8000c1c:	1ac4      	subs	r4, r0, r3
 8000c1e:	45a0      	cmp	r8, r4
 8000c20:	4180      	sbcs	r0, r0
 8000c22:	464b      	mov	r3, r9
 8000c24:	4240      	negs	r0, r0
 8000c26:	1a59      	subs	r1, r3, r1
 8000c28:	1a0b      	subs	r3, r1, r0
 8000c2a:	469a      	mov	sl, r3
 8000c2c:	4665      	mov	r5, ip
 8000c2e:	2601      	movs	r6, #1
 8000c30:	e564      	b.n	80006fc <__aeabi_dadd+0x98>
 8000c32:	1a1c      	subs	r4, r3, r0
 8000c34:	464a      	mov	r2, r9
 8000c36:	42a3      	cmp	r3, r4
 8000c38:	4180      	sbcs	r0, r0
 8000c3a:	1a8a      	subs	r2, r1, r2
 8000c3c:	4240      	negs	r0, r0
 8000c3e:	1a12      	subs	r2, r2, r0
 8000c40:	4692      	mov	sl, r2
 8000c42:	0212      	lsls	r2, r2, #8
 8000c44:	d549      	bpl.n	8000cda <__aeabi_dadd+0x676>
 8000c46:	4642      	mov	r2, r8
 8000c48:	1ad4      	subs	r4, r2, r3
 8000c4a:	45a0      	cmp	r8, r4
 8000c4c:	4180      	sbcs	r0, r0
 8000c4e:	464b      	mov	r3, r9
 8000c50:	4240      	negs	r0, r0
 8000c52:	1a59      	subs	r1, r3, r1
 8000c54:	1a0b      	subs	r3, r1, r0
 8000c56:	469a      	mov	sl, r3
 8000c58:	4665      	mov	r5, ip
 8000c5a:	e57f      	b.n	800075c <__aeabi_dadd+0xf8>
 8000c5c:	464b      	mov	r3, r9
 8000c5e:	464a      	mov	r2, r9
 8000c60:	08c0      	lsrs	r0, r0, #3
 8000c62:	075b      	lsls	r3, r3, #29
 8000c64:	4303      	orrs	r3, r0
 8000c66:	08d1      	lsrs	r1, r2, #3
 8000c68:	e62b      	b.n	80008c2 <__aeabi_dadd+0x25e>
 8000c6a:	464a      	mov	r2, r9
 8000c6c:	08db      	lsrs	r3, r3, #3
 8000c6e:	4302      	orrs	r2, r0
 8000c70:	d138      	bne.n	8000ce4 <__aeabi_dadd+0x680>
 8000c72:	074a      	lsls	r2, r1, #29
 8000c74:	4313      	orrs	r3, r2
 8000c76:	08c9      	lsrs	r1, r1, #3
 8000c78:	e646      	b.n	8000908 <__aeabi_dadd+0x2a4>
 8000c7a:	464b      	mov	r3, r9
 8000c7c:	464a      	mov	r2, r9
 8000c7e:	08c0      	lsrs	r0, r0, #3
 8000c80:	075b      	lsls	r3, r3, #29
 8000c82:	4303      	orrs	r3, r0
 8000c84:	08d1      	lsrs	r1, r2, #3
 8000c86:	e61f      	b.n	80008c8 <__aeabi_dadd+0x264>
 8000c88:	181c      	adds	r4, r3, r0
 8000c8a:	429c      	cmp	r4, r3
 8000c8c:	419b      	sbcs	r3, r3
 8000c8e:	4449      	add	r1, r9
 8000c90:	468a      	mov	sl, r1
 8000c92:	425b      	negs	r3, r3
 8000c94:	449a      	add	sl, r3
 8000c96:	4653      	mov	r3, sl
 8000c98:	021b      	lsls	r3, r3, #8
 8000c9a:	d400      	bmi.n	8000c9e <__aeabi_dadd+0x63a>
 8000c9c:	e607      	b.n	80008ae <__aeabi_dadd+0x24a>
 8000c9e:	4652      	mov	r2, sl
 8000ca0:	4b1f      	ldr	r3, [pc, #124]	; (8000d20 <__aeabi_dadd+0x6bc>)
 8000ca2:	2601      	movs	r6, #1
 8000ca4:	401a      	ands	r2, r3
 8000ca6:	4692      	mov	sl, r2
 8000ca8:	e601      	b.n	80008ae <__aeabi_dadd+0x24a>
 8000caa:	003c      	movs	r4, r7
 8000cac:	000e      	movs	r6, r1
 8000cae:	3c20      	subs	r4, #32
 8000cb0:	40e6      	lsrs	r6, r4
 8000cb2:	2f20      	cmp	r7, #32
 8000cb4:	d003      	beq.n	8000cbe <__aeabi_dadd+0x65a>
 8000cb6:	2440      	movs	r4, #64	; 0x40
 8000cb8:	1be4      	subs	r4, r4, r7
 8000cba:	40a1      	lsls	r1, r4
 8000cbc:	430b      	orrs	r3, r1
 8000cbe:	001c      	movs	r4, r3
 8000cc0:	1e63      	subs	r3, r4, #1
 8000cc2:	419c      	sbcs	r4, r3
 8000cc4:	4334      	orrs	r4, r6
 8000cc6:	e65e      	b.n	8000986 <__aeabi_dadd+0x322>
 8000cc8:	4443      	add	r3, r8
 8000cca:	4283      	cmp	r3, r0
 8000ccc:	4180      	sbcs	r0, r0
 8000cce:	4449      	add	r1, r9
 8000cd0:	468a      	mov	sl, r1
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	001c      	movs	r4, r3
 8000cd6:	4482      	add	sl, r0
 8000cd8:	e6bc      	b.n	8000a54 <__aeabi_dadd+0x3f0>
 8000cda:	4653      	mov	r3, sl
 8000cdc:	4323      	orrs	r3, r4
 8000cde:	d100      	bne.n	8000ce2 <__aeabi_dadd+0x67e>
 8000ce0:	e6a9      	b.n	8000a36 <__aeabi_dadd+0x3d2>
 8000ce2:	e5e4      	b.n	80008ae <__aeabi_dadd+0x24a>
 8000ce4:	074a      	lsls	r2, r1, #29
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	2280      	movs	r2, #128	; 0x80
 8000cea:	08c9      	lsrs	r1, r1, #3
 8000cec:	0312      	lsls	r2, r2, #12
 8000cee:	4211      	tst	r1, r2
 8000cf0:	d009      	beq.n	8000d06 <__aeabi_dadd+0x6a2>
 8000cf2:	4648      	mov	r0, r9
 8000cf4:	08c4      	lsrs	r4, r0, #3
 8000cf6:	4214      	tst	r4, r2
 8000cf8:	d105      	bne.n	8000d06 <__aeabi_dadd+0x6a2>
 8000cfa:	4643      	mov	r3, r8
 8000cfc:	4665      	mov	r5, ip
 8000cfe:	0021      	movs	r1, r4
 8000d00:	08db      	lsrs	r3, r3, #3
 8000d02:	0742      	lsls	r2, r0, #29
 8000d04:	4313      	orrs	r3, r2
 8000d06:	0f5a      	lsrs	r2, r3, #29
 8000d08:	00db      	lsls	r3, r3, #3
 8000d0a:	08db      	lsrs	r3, r3, #3
 8000d0c:	0752      	lsls	r2, r2, #29
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	e5fa      	b.n	8000908 <__aeabi_dadd+0x2a4>
 8000d12:	2300      	movs	r3, #0
 8000d14:	4a01      	ldr	r2, [pc, #4]	; (8000d1c <__aeabi_dadd+0x6b8>)
 8000d16:	001c      	movs	r4, r3
 8000d18:	e540      	b.n	800079c <__aeabi_dadd+0x138>
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	000007ff 	.word	0x000007ff
 8000d20:	ff7fffff 	.word	0xff7fffff

08000d24 <__aeabi_dsub>:
 8000d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d26:	4657      	mov	r7, sl
 8000d28:	464e      	mov	r6, r9
 8000d2a:	4645      	mov	r5, r8
 8000d2c:	46de      	mov	lr, fp
 8000d2e:	b5e0      	push	{r5, r6, r7, lr}
 8000d30:	000d      	movs	r5, r1
 8000d32:	0004      	movs	r4, r0
 8000d34:	0019      	movs	r1, r3
 8000d36:	0010      	movs	r0, r2
 8000d38:	032b      	lsls	r3, r5, #12
 8000d3a:	0a5b      	lsrs	r3, r3, #9
 8000d3c:	0f62      	lsrs	r2, r4, #29
 8000d3e:	431a      	orrs	r2, r3
 8000d40:	00e3      	lsls	r3, r4, #3
 8000d42:	030c      	lsls	r4, r1, #12
 8000d44:	0a64      	lsrs	r4, r4, #9
 8000d46:	0f47      	lsrs	r7, r0, #29
 8000d48:	4327      	orrs	r7, r4
 8000d4a:	4cd0      	ldr	r4, [pc, #832]	; (800108c <__aeabi_dsub+0x368>)
 8000d4c:	006e      	lsls	r6, r5, #1
 8000d4e:	4691      	mov	r9, r2
 8000d50:	b083      	sub	sp, #12
 8000d52:	004a      	lsls	r2, r1, #1
 8000d54:	00c0      	lsls	r0, r0, #3
 8000d56:	4698      	mov	r8, r3
 8000d58:	46a2      	mov	sl, r4
 8000d5a:	0d76      	lsrs	r6, r6, #21
 8000d5c:	0fed      	lsrs	r5, r5, #31
 8000d5e:	0d52      	lsrs	r2, r2, #21
 8000d60:	0fc9      	lsrs	r1, r1, #31
 8000d62:	9001      	str	r0, [sp, #4]
 8000d64:	42a2      	cmp	r2, r4
 8000d66:	d100      	bne.n	8000d6a <__aeabi_dsub+0x46>
 8000d68:	e0b9      	b.n	8000ede <__aeabi_dsub+0x1ba>
 8000d6a:	2401      	movs	r4, #1
 8000d6c:	4061      	eors	r1, r4
 8000d6e:	468b      	mov	fp, r1
 8000d70:	428d      	cmp	r5, r1
 8000d72:	d100      	bne.n	8000d76 <__aeabi_dsub+0x52>
 8000d74:	e08d      	b.n	8000e92 <__aeabi_dsub+0x16e>
 8000d76:	1ab4      	subs	r4, r6, r2
 8000d78:	46a4      	mov	ip, r4
 8000d7a:	2c00      	cmp	r4, #0
 8000d7c:	dc00      	bgt.n	8000d80 <__aeabi_dsub+0x5c>
 8000d7e:	e0b7      	b.n	8000ef0 <__aeabi_dsub+0x1cc>
 8000d80:	2a00      	cmp	r2, #0
 8000d82:	d100      	bne.n	8000d86 <__aeabi_dsub+0x62>
 8000d84:	e0cb      	b.n	8000f1e <__aeabi_dsub+0x1fa>
 8000d86:	4ac1      	ldr	r2, [pc, #772]	; (800108c <__aeabi_dsub+0x368>)
 8000d88:	4296      	cmp	r6, r2
 8000d8a:	d100      	bne.n	8000d8e <__aeabi_dsub+0x6a>
 8000d8c:	e186      	b.n	800109c <__aeabi_dsub+0x378>
 8000d8e:	2280      	movs	r2, #128	; 0x80
 8000d90:	0412      	lsls	r2, r2, #16
 8000d92:	4317      	orrs	r7, r2
 8000d94:	4662      	mov	r2, ip
 8000d96:	2a38      	cmp	r2, #56	; 0x38
 8000d98:	dd00      	ble.n	8000d9c <__aeabi_dsub+0x78>
 8000d9a:	e1a4      	b.n	80010e6 <__aeabi_dsub+0x3c2>
 8000d9c:	2a1f      	cmp	r2, #31
 8000d9e:	dd00      	ble.n	8000da2 <__aeabi_dsub+0x7e>
 8000da0:	e21d      	b.n	80011de <__aeabi_dsub+0x4ba>
 8000da2:	4661      	mov	r1, ip
 8000da4:	2220      	movs	r2, #32
 8000da6:	003c      	movs	r4, r7
 8000da8:	1a52      	subs	r2, r2, r1
 8000daa:	0001      	movs	r1, r0
 8000dac:	4090      	lsls	r0, r2
 8000dae:	4094      	lsls	r4, r2
 8000db0:	1e42      	subs	r2, r0, #1
 8000db2:	4190      	sbcs	r0, r2
 8000db4:	4662      	mov	r2, ip
 8000db6:	46a0      	mov	r8, r4
 8000db8:	4664      	mov	r4, ip
 8000dba:	40d7      	lsrs	r7, r2
 8000dbc:	464a      	mov	r2, r9
 8000dbe:	40e1      	lsrs	r1, r4
 8000dc0:	4644      	mov	r4, r8
 8000dc2:	1bd2      	subs	r2, r2, r7
 8000dc4:	4691      	mov	r9, r2
 8000dc6:	430c      	orrs	r4, r1
 8000dc8:	4304      	orrs	r4, r0
 8000dca:	1b1c      	subs	r4, r3, r4
 8000dcc:	42a3      	cmp	r3, r4
 8000dce:	4192      	sbcs	r2, r2
 8000dd0:	464b      	mov	r3, r9
 8000dd2:	4252      	negs	r2, r2
 8000dd4:	1a9b      	subs	r3, r3, r2
 8000dd6:	469a      	mov	sl, r3
 8000dd8:	4653      	mov	r3, sl
 8000dda:	021b      	lsls	r3, r3, #8
 8000ddc:	d400      	bmi.n	8000de0 <__aeabi_dsub+0xbc>
 8000dde:	e12b      	b.n	8001038 <__aeabi_dsub+0x314>
 8000de0:	4653      	mov	r3, sl
 8000de2:	025a      	lsls	r2, r3, #9
 8000de4:	0a53      	lsrs	r3, r2, #9
 8000de6:	469a      	mov	sl, r3
 8000de8:	4653      	mov	r3, sl
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d100      	bne.n	8000df0 <__aeabi_dsub+0xcc>
 8000dee:	e166      	b.n	80010be <__aeabi_dsub+0x39a>
 8000df0:	4650      	mov	r0, sl
 8000df2:	f000 fb8d 	bl	8001510 <__clzsi2>
 8000df6:	0003      	movs	r3, r0
 8000df8:	3b08      	subs	r3, #8
 8000dfa:	2220      	movs	r2, #32
 8000dfc:	0020      	movs	r0, r4
 8000dfe:	1ad2      	subs	r2, r2, r3
 8000e00:	4651      	mov	r1, sl
 8000e02:	40d0      	lsrs	r0, r2
 8000e04:	4099      	lsls	r1, r3
 8000e06:	0002      	movs	r2, r0
 8000e08:	409c      	lsls	r4, r3
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	429e      	cmp	r6, r3
 8000e0e:	dd00      	ble.n	8000e12 <__aeabi_dsub+0xee>
 8000e10:	e164      	b.n	80010dc <__aeabi_dsub+0x3b8>
 8000e12:	1b9b      	subs	r3, r3, r6
 8000e14:	1c59      	adds	r1, r3, #1
 8000e16:	291f      	cmp	r1, #31
 8000e18:	dd00      	ble.n	8000e1c <__aeabi_dsub+0xf8>
 8000e1a:	e0fe      	b.n	800101a <__aeabi_dsub+0x2f6>
 8000e1c:	2320      	movs	r3, #32
 8000e1e:	0010      	movs	r0, r2
 8000e20:	0026      	movs	r6, r4
 8000e22:	1a5b      	subs	r3, r3, r1
 8000e24:	409c      	lsls	r4, r3
 8000e26:	4098      	lsls	r0, r3
 8000e28:	40ce      	lsrs	r6, r1
 8000e2a:	40ca      	lsrs	r2, r1
 8000e2c:	1e63      	subs	r3, r4, #1
 8000e2e:	419c      	sbcs	r4, r3
 8000e30:	4330      	orrs	r0, r6
 8000e32:	4692      	mov	sl, r2
 8000e34:	2600      	movs	r6, #0
 8000e36:	4304      	orrs	r4, r0
 8000e38:	0763      	lsls	r3, r4, #29
 8000e3a:	d009      	beq.n	8000e50 <__aeabi_dsub+0x12c>
 8000e3c:	230f      	movs	r3, #15
 8000e3e:	4023      	ands	r3, r4
 8000e40:	2b04      	cmp	r3, #4
 8000e42:	d005      	beq.n	8000e50 <__aeabi_dsub+0x12c>
 8000e44:	1d23      	adds	r3, r4, #4
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	41a4      	sbcs	r4, r4
 8000e4a:	4264      	negs	r4, r4
 8000e4c:	44a2      	add	sl, r4
 8000e4e:	001c      	movs	r4, r3
 8000e50:	4653      	mov	r3, sl
 8000e52:	021b      	lsls	r3, r3, #8
 8000e54:	d400      	bmi.n	8000e58 <__aeabi_dsub+0x134>
 8000e56:	e0f2      	b.n	800103e <__aeabi_dsub+0x31a>
 8000e58:	4b8c      	ldr	r3, [pc, #560]	; (800108c <__aeabi_dsub+0x368>)
 8000e5a:	3601      	adds	r6, #1
 8000e5c:	429e      	cmp	r6, r3
 8000e5e:	d100      	bne.n	8000e62 <__aeabi_dsub+0x13e>
 8000e60:	e10f      	b.n	8001082 <__aeabi_dsub+0x35e>
 8000e62:	4653      	mov	r3, sl
 8000e64:	498a      	ldr	r1, [pc, #552]	; (8001090 <__aeabi_dsub+0x36c>)
 8000e66:	08e4      	lsrs	r4, r4, #3
 8000e68:	400b      	ands	r3, r1
 8000e6a:	0019      	movs	r1, r3
 8000e6c:	075b      	lsls	r3, r3, #29
 8000e6e:	4323      	orrs	r3, r4
 8000e70:	0572      	lsls	r2, r6, #21
 8000e72:	024c      	lsls	r4, r1, #9
 8000e74:	0b24      	lsrs	r4, r4, #12
 8000e76:	0d52      	lsrs	r2, r2, #21
 8000e78:	0512      	lsls	r2, r2, #20
 8000e7a:	4322      	orrs	r2, r4
 8000e7c:	07ed      	lsls	r5, r5, #31
 8000e7e:	432a      	orrs	r2, r5
 8000e80:	0018      	movs	r0, r3
 8000e82:	0011      	movs	r1, r2
 8000e84:	b003      	add	sp, #12
 8000e86:	bcf0      	pop	{r4, r5, r6, r7}
 8000e88:	46bb      	mov	fp, r7
 8000e8a:	46b2      	mov	sl, r6
 8000e8c:	46a9      	mov	r9, r5
 8000e8e:	46a0      	mov	r8, r4
 8000e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e92:	1ab4      	subs	r4, r6, r2
 8000e94:	46a4      	mov	ip, r4
 8000e96:	2c00      	cmp	r4, #0
 8000e98:	dd59      	ble.n	8000f4e <__aeabi_dsub+0x22a>
 8000e9a:	2a00      	cmp	r2, #0
 8000e9c:	d100      	bne.n	8000ea0 <__aeabi_dsub+0x17c>
 8000e9e:	e0b0      	b.n	8001002 <__aeabi_dsub+0x2de>
 8000ea0:	4556      	cmp	r6, sl
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_dsub+0x182>
 8000ea4:	e0fa      	b.n	800109c <__aeabi_dsub+0x378>
 8000ea6:	2280      	movs	r2, #128	; 0x80
 8000ea8:	0412      	lsls	r2, r2, #16
 8000eaa:	4317      	orrs	r7, r2
 8000eac:	4662      	mov	r2, ip
 8000eae:	2a38      	cmp	r2, #56	; 0x38
 8000eb0:	dd00      	ble.n	8000eb4 <__aeabi_dsub+0x190>
 8000eb2:	e0d4      	b.n	800105e <__aeabi_dsub+0x33a>
 8000eb4:	2a1f      	cmp	r2, #31
 8000eb6:	dc00      	bgt.n	8000eba <__aeabi_dsub+0x196>
 8000eb8:	e1c0      	b.n	800123c <__aeabi_dsub+0x518>
 8000eba:	0039      	movs	r1, r7
 8000ebc:	3a20      	subs	r2, #32
 8000ebe:	40d1      	lsrs	r1, r2
 8000ec0:	4662      	mov	r2, ip
 8000ec2:	2a20      	cmp	r2, #32
 8000ec4:	d006      	beq.n	8000ed4 <__aeabi_dsub+0x1b0>
 8000ec6:	4664      	mov	r4, ip
 8000ec8:	2240      	movs	r2, #64	; 0x40
 8000eca:	1b12      	subs	r2, r2, r4
 8000ecc:	003c      	movs	r4, r7
 8000ece:	4094      	lsls	r4, r2
 8000ed0:	4304      	orrs	r4, r0
 8000ed2:	9401      	str	r4, [sp, #4]
 8000ed4:	9c01      	ldr	r4, [sp, #4]
 8000ed6:	1e62      	subs	r2, r4, #1
 8000ed8:	4194      	sbcs	r4, r2
 8000eda:	430c      	orrs	r4, r1
 8000edc:	e0c3      	b.n	8001066 <__aeabi_dsub+0x342>
 8000ede:	003c      	movs	r4, r7
 8000ee0:	4304      	orrs	r4, r0
 8000ee2:	d02b      	beq.n	8000f3c <__aeabi_dsub+0x218>
 8000ee4:	468b      	mov	fp, r1
 8000ee6:	428d      	cmp	r5, r1
 8000ee8:	d02e      	beq.n	8000f48 <__aeabi_dsub+0x224>
 8000eea:	4c6a      	ldr	r4, [pc, #424]	; (8001094 <__aeabi_dsub+0x370>)
 8000eec:	46a4      	mov	ip, r4
 8000eee:	44b4      	add	ip, r6
 8000ef0:	4664      	mov	r4, ip
 8000ef2:	2c00      	cmp	r4, #0
 8000ef4:	d05f      	beq.n	8000fb6 <__aeabi_dsub+0x292>
 8000ef6:	1b94      	subs	r4, r2, r6
 8000ef8:	46a4      	mov	ip, r4
 8000efa:	2e00      	cmp	r6, #0
 8000efc:	d000      	beq.n	8000f00 <__aeabi_dsub+0x1dc>
 8000efe:	e120      	b.n	8001142 <__aeabi_dsub+0x41e>
 8000f00:	464c      	mov	r4, r9
 8000f02:	431c      	orrs	r4, r3
 8000f04:	d100      	bne.n	8000f08 <__aeabi_dsub+0x1e4>
 8000f06:	e1c7      	b.n	8001298 <__aeabi_dsub+0x574>
 8000f08:	4661      	mov	r1, ip
 8000f0a:	1e4c      	subs	r4, r1, #1
 8000f0c:	2901      	cmp	r1, #1
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_dsub+0x1ee>
 8000f10:	e223      	b.n	800135a <__aeabi_dsub+0x636>
 8000f12:	4d5e      	ldr	r5, [pc, #376]	; (800108c <__aeabi_dsub+0x368>)
 8000f14:	45ac      	cmp	ip, r5
 8000f16:	d100      	bne.n	8000f1a <__aeabi_dsub+0x1f6>
 8000f18:	e1d8      	b.n	80012cc <__aeabi_dsub+0x5a8>
 8000f1a:	46a4      	mov	ip, r4
 8000f1c:	e11a      	b.n	8001154 <__aeabi_dsub+0x430>
 8000f1e:	003a      	movs	r2, r7
 8000f20:	4302      	orrs	r2, r0
 8000f22:	d100      	bne.n	8000f26 <__aeabi_dsub+0x202>
 8000f24:	e0e4      	b.n	80010f0 <__aeabi_dsub+0x3cc>
 8000f26:	0022      	movs	r2, r4
 8000f28:	3a01      	subs	r2, #1
 8000f2a:	2c01      	cmp	r4, #1
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_dsub+0x20c>
 8000f2e:	e1c3      	b.n	80012b8 <__aeabi_dsub+0x594>
 8000f30:	4956      	ldr	r1, [pc, #344]	; (800108c <__aeabi_dsub+0x368>)
 8000f32:	428c      	cmp	r4, r1
 8000f34:	d100      	bne.n	8000f38 <__aeabi_dsub+0x214>
 8000f36:	e0b1      	b.n	800109c <__aeabi_dsub+0x378>
 8000f38:	4694      	mov	ip, r2
 8000f3a:	e72b      	b.n	8000d94 <__aeabi_dsub+0x70>
 8000f3c:	2401      	movs	r4, #1
 8000f3e:	4061      	eors	r1, r4
 8000f40:	468b      	mov	fp, r1
 8000f42:	428d      	cmp	r5, r1
 8000f44:	d000      	beq.n	8000f48 <__aeabi_dsub+0x224>
 8000f46:	e716      	b.n	8000d76 <__aeabi_dsub+0x52>
 8000f48:	4952      	ldr	r1, [pc, #328]	; (8001094 <__aeabi_dsub+0x370>)
 8000f4a:	468c      	mov	ip, r1
 8000f4c:	44b4      	add	ip, r6
 8000f4e:	4664      	mov	r4, ip
 8000f50:	2c00      	cmp	r4, #0
 8000f52:	d100      	bne.n	8000f56 <__aeabi_dsub+0x232>
 8000f54:	e0d3      	b.n	80010fe <__aeabi_dsub+0x3da>
 8000f56:	1b91      	subs	r1, r2, r6
 8000f58:	468c      	mov	ip, r1
 8000f5a:	2e00      	cmp	r6, #0
 8000f5c:	d100      	bne.n	8000f60 <__aeabi_dsub+0x23c>
 8000f5e:	e15e      	b.n	800121e <__aeabi_dsub+0x4fa>
 8000f60:	494a      	ldr	r1, [pc, #296]	; (800108c <__aeabi_dsub+0x368>)
 8000f62:	428a      	cmp	r2, r1
 8000f64:	d100      	bne.n	8000f68 <__aeabi_dsub+0x244>
 8000f66:	e1be      	b.n	80012e6 <__aeabi_dsub+0x5c2>
 8000f68:	2180      	movs	r1, #128	; 0x80
 8000f6a:	464c      	mov	r4, r9
 8000f6c:	0409      	lsls	r1, r1, #16
 8000f6e:	430c      	orrs	r4, r1
 8000f70:	46a1      	mov	r9, r4
 8000f72:	4661      	mov	r1, ip
 8000f74:	2938      	cmp	r1, #56	; 0x38
 8000f76:	dd00      	ble.n	8000f7a <__aeabi_dsub+0x256>
 8000f78:	e1ba      	b.n	80012f0 <__aeabi_dsub+0x5cc>
 8000f7a:	291f      	cmp	r1, #31
 8000f7c:	dd00      	ble.n	8000f80 <__aeabi_dsub+0x25c>
 8000f7e:	e227      	b.n	80013d0 <__aeabi_dsub+0x6ac>
 8000f80:	2420      	movs	r4, #32
 8000f82:	1a64      	subs	r4, r4, r1
 8000f84:	4649      	mov	r1, r9
 8000f86:	40a1      	lsls	r1, r4
 8000f88:	001e      	movs	r6, r3
 8000f8a:	4688      	mov	r8, r1
 8000f8c:	4661      	mov	r1, ip
 8000f8e:	40a3      	lsls	r3, r4
 8000f90:	40ce      	lsrs	r6, r1
 8000f92:	4641      	mov	r1, r8
 8000f94:	1e5c      	subs	r4, r3, #1
 8000f96:	41a3      	sbcs	r3, r4
 8000f98:	4331      	orrs	r1, r6
 8000f9a:	4319      	orrs	r1, r3
 8000f9c:	000c      	movs	r4, r1
 8000f9e:	4663      	mov	r3, ip
 8000fa0:	4649      	mov	r1, r9
 8000fa2:	40d9      	lsrs	r1, r3
 8000fa4:	187f      	adds	r7, r7, r1
 8000fa6:	1824      	adds	r4, r4, r0
 8000fa8:	4284      	cmp	r4, r0
 8000faa:	419b      	sbcs	r3, r3
 8000fac:	425b      	negs	r3, r3
 8000fae:	469a      	mov	sl, r3
 8000fb0:	0016      	movs	r6, r2
 8000fb2:	44ba      	add	sl, r7
 8000fb4:	e05d      	b.n	8001072 <__aeabi_dsub+0x34e>
 8000fb6:	4c38      	ldr	r4, [pc, #224]	; (8001098 <__aeabi_dsub+0x374>)
 8000fb8:	1c72      	adds	r2, r6, #1
 8000fba:	4222      	tst	r2, r4
 8000fbc:	d000      	beq.n	8000fc0 <__aeabi_dsub+0x29c>
 8000fbe:	e0df      	b.n	8001180 <__aeabi_dsub+0x45c>
 8000fc0:	464a      	mov	r2, r9
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	2e00      	cmp	r6, #0
 8000fc6:	d000      	beq.n	8000fca <__aeabi_dsub+0x2a6>
 8000fc8:	e15c      	b.n	8001284 <__aeabi_dsub+0x560>
 8000fca:	2a00      	cmp	r2, #0
 8000fcc:	d100      	bne.n	8000fd0 <__aeabi_dsub+0x2ac>
 8000fce:	e1cf      	b.n	8001370 <__aeabi_dsub+0x64c>
 8000fd0:	003a      	movs	r2, r7
 8000fd2:	4302      	orrs	r2, r0
 8000fd4:	d100      	bne.n	8000fd8 <__aeabi_dsub+0x2b4>
 8000fd6:	e17f      	b.n	80012d8 <__aeabi_dsub+0x5b4>
 8000fd8:	1a1c      	subs	r4, r3, r0
 8000fda:	464a      	mov	r2, r9
 8000fdc:	42a3      	cmp	r3, r4
 8000fde:	4189      	sbcs	r1, r1
 8000fe0:	1bd2      	subs	r2, r2, r7
 8000fe2:	4249      	negs	r1, r1
 8000fe4:	1a52      	subs	r2, r2, r1
 8000fe6:	4692      	mov	sl, r2
 8000fe8:	0212      	lsls	r2, r2, #8
 8000fea:	d400      	bmi.n	8000fee <__aeabi_dsub+0x2ca>
 8000fec:	e20a      	b.n	8001404 <__aeabi_dsub+0x6e0>
 8000fee:	1ac4      	subs	r4, r0, r3
 8000ff0:	42a0      	cmp	r0, r4
 8000ff2:	4180      	sbcs	r0, r0
 8000ff4:	464b      	mov	r3, r9
 8000ff6:	4240      	negs	r0, r0
 8000ff8:	1aff      	subs	r7, r7, r3
 8000ffa:	1a3b      	subs	r3, r7, r0
 8000ffc:	469a      	mov	sl, r3
 8000ffe:	465d      	mov	r5, fp
 8001000:	e71a      	b.n	8000e38 <__aeabi_dsub+0x114>
 8001002:	003a      	movs	r2, r7
 8001004:	4302      	orrs	r2, r0
 8001006:	d073      	beq.n	80010f0 <__aeabi_dsub+0x3cc>
 8001008:	0022      	movs	r2, r4
 800100a:	3a01      	subs	r2, #1
 800100c:	2c01      	cmp	r4, #1
 800100e:	d100      	bne.n	8001012 <__aeabi_dsub+0x2ee>
 8001010:	e0cb      	b.n	80011aa <__aeabi_dsub+0x486>
 8001012:	4554      	cmp	r4, sl
 8001014:	d042      	beq.n	800109c <__aeabi_dsub+0x378>
 8001016:	4694      	mov	ip, r2
 8001018:	e748      	b.n	8000eac <__aeabi_dsub+0x188>
 800101a:	0010      	movs	r0, r2
 800101c:	3b1f      	subs	r3, #31
 800101e:	40d8      	lsrs	r0, r3
 8001020:	2920      	cmp	r1, #32
 8001022:	d003      	beq.n	800102c <__aeabi_dsub+0x308>
 8001024:	2340      	movs	r3, #64	; 0x40
 8001026:	1a5b      	subs	r3, r3, r1
 8001028:	409a      	lsls	r2, r3
 800102a:	4314      	orrs	r4, r2
 800102c:	1e63      	subs	r3, r4, #1
 800102e:	419c      	sbcs	r4, r3
 8001030:	2300      	movs	r3, #0
 8001032:	2600      	movs	r6, #0
 8001034:	469a      	mov	sl, r3
 8001036:	4304      	orrs	r4, r0
 8001038:	0763      	lsls	r3, r4, #29
 800103a:	d000      	beq.n	800103e <__aeabi_dsub+0x31a>
 800103c:	e6fe      	b.n	8000e3c <__aeabi_dsub+0x118>
 800103e:	4652      	mov	r2, sl
 8001040:	08e3      	lsrs	r3, r4, #3
 8001042:	0752      	lsls	r2, r2, #29
 8001044:	4313      	orrs	r3, r2
 8001046:	4652      	mov	r2, sl
 8001048:	46b4      	mov	ip, r6
 800104a:	08d2      	lsrs	r2, r2, #3
 800104c:	490f      	ldr	r1, [pc, #60]	; (800108c <__aeabi_dsub+0x368>)
 800104e:	458c      	cmp	ip, r1
 8001050:	d02a      	beq.n	80010a8 <__aeabi_dsub+0x384>
 8001052:	0312      	lsls	r2, r2, #12
 8001054:	0b14      	lsrs	r4, r2, #12
 8001056:	4662      	mov	r2, ip
 8001058:	0552      	lsls	r2, r2, #21
 800105a:	0d52      	lsrs	r2, r2, #21
 800105c:	e70c      	b.n	8000e78 <__aeabi_dsub+0x154>
 800105e:	003c      	movs	r4, r7
 8001060:	4304      	orrs	r4, r0
 8001062:	1e62      	subs	r2, r4, #1
 8001064:	4194      	sbcs	r4, r2
 8001066:	18e4      	adds	r4, r4, r3
 8001068:	429c      	cmp	r4, r3
 800106a:	4192      	sbcs	r2, r2
 800106c:	4252      	negs	r2, r2
 800106e:	444a      	add	r2, r9
 8001070:	4692      	mov	sl, r2
 8001072:	4653      	mov	r3, sl
 8001074:	021b      	lsls	r3, r3, #8
 8001076:	d5df      	bpl.n	8001038 <__aeabi_dsub+0x314>
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <__aeabi_dsub+0x368>)
 800107a:	3601      	adds	r6, #1
 800107c:	429e      	cmp	r6, r3
 800107e:	d000      	beq.n	8001082 <__aeabi_dsub+0x35e>
 8001080:	e0a0      	b.n	80011c4 <__aeabi_dsub+0x4a0>
 8001082:	0032      	movs	r2, r6
 8001084:	2400      	movs	r4, #0
 8001086:	2300      	movs	r3, #0
 8001088:	e6f6      	b.n	8000e78 <__aeabi_dsub+0x154>
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	000007ff 	.word	0x000007ff
 8001090:	ff7fffff 	.word	0xff7fffff
 8001094:	fffff801 	.word	0xfffff801
 8001098:	000007fe 	.word	0x000007fe
 800109c:	08db      	lsrs	r3, r3, #3
 800109e:	464a      	mov	r2, r9
 80010a0:	0752      	lsls	r2, r2, #29
 80010a2:	4313      	orrs	r3, r2
 80010a4:	464a      	mov	r2, r9
 80010a6:	08d2      	lsrs	r2, r2, #3
 80010a8:	0019      	movs	r1, r3
 80010aa:	4311      	orrs	r1, r2
 80010ac:	d100      	bne.n	80010b0 <__aeabi_dsub+0x38c>
 80010ae:	e1b5      	b.n	800141c <__aeabi_dsub+0x6f8>
 80010b0:	2480      	movs	r4, #128	; 0x80
 80010b2:	0324      	lsls	r4, r4, #12
 80010b4:	4314      	orrs	r4, r2
 80010b6:	0324      	lsls	r4, r4, #12
 80010b8:	4ad5      	ldr	r2, [pc, #852]	; (8001410 <__aeabi_dsub+0x6ec>)
 80010ba:	0b24      	lsrs	r4, r4, #12
 80010bc:	e6dc      	b.n	8000e78 <__aeabi_dsub+0x154>
 80010be:	0020      	movs	r0, r4
 80010c0:	f000 fa26 	bl	8001510 <__clzsi2>
 80010c4:	0003      	movs	r3, r0
 80010c6:	3318      	adds	r3, #24
 80010c8:	2b1f      	cmp	r3, #31
 80010ca:	dc00      	bgt.n	80010ce <__aeabi_dsub+0x3aa>
 80010cc:	e695      	b.n	8000dfa <__aeabi_dsub+0xd6>
 80010ce:	0022      	movs	r2, r4
 80010d0:	3808      	subs	r0, #8
 80010d2:	4082      	lsls	r2, r0
 80010d4:	2400      	movs	r4, #0
 80010d6:	429e      	cmp	r6, r3
 80010d8:	dc00      	bgt.n	80010dc <__aeabi_dsub+0x3b8>
 80010da:	e69a      	b.n	8000e12 <__aeabi_dsub+0xee>
 80010dc:	1af6      	subs	r6, r6, r3
 80010de:	4bcd      	ldr	r3, [pc, #820]	; (8001414 <__aeabi_dsub+0x6f0>)
 80010e0:	401a      	ands	r2, r3
 80010e2:	4692      	mov	sl, r2
 80010e4:	e6a8      	b.n	8000e38 <__aeabi_dsub+0x114>
 80010e6:	003c      	movs	r4, r7
 80010e8:	4304      	orrs	r4, r0
 80010ea:	1e62      	subs	r2, r4, #1
 80010ec:	4194      	sbcs	r4, r2
 80010ee:	e66c      	b.n	8000dca <__aeabi_dsub+0xa6>
 80010f0:	464a      	mov	r2, r9
 80010f2:	08db      	lsrs	r3, r3, #3
 80010f4:	0752      	lsls	r2, r2, #29
 80010f6:	4313      	orrs	r3, r2
 80010f8:	464a      	mov	r2, r9
 80010fa:	08d2      	lsrs	r2, r2, #3
 80010fc:	e7a6      	b.n	800104c <__aeabi_dsub+0x328>
 80010fe:	4cc6      	ldr	r4, [pc, #792]	; (8001418 <__aeabi_dsub+0x6f4>)
 8001100:	1c72      	adds	r2, r6, #1
 8001102:	4222      	tst	r2, r4
 8001104:	d000      	beq.n	8001108 <__aeabi_dsub+0x3e4>
 8001106:	e0ac      	b.n	8001262 <__aeabi_dsub+0x53e>
 8001108:	464a      	mov	r2, r9
 800110a:	431a      	orrs	r2, r3
 800110c:	2e00      	cmp	r6, #0
 800110e:	d000      	beq.n	8001112 <__aeabi_dsub+0x3ee>
 8001110:	e105      	b.n	800131e <__aeabi_dsub+0x5fa>
 8001112:	2a00      	cmp	r2, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_dsub+0x3f4>
 8001116:	e156      	b.n	80013c6 <__aeabi_dsub+0x6a2>
 8001118:	003a      	movs	r2, r7
 800111a:	4302      	orrs	r2, r0
 800111c:	d100      	bne.n	8001120 <__aeabi_dsub+0x3fc>
 800111e:	e0db      	b.n	80012d8 <__aeabi_dsub+0x5b4>
 8001120:	181c      	adds	r4, r3, r0
 8001122:	429c      	cmp	r4, r3
 8001124:	419b      	sbcs	r3, r3
 8001126:	444f      	add	r7, r9
 8001128:	46ba      	mov	sl, r7
 800112a:	425b      	negs	r3, r3
 800112c:	449a      	add	sl, r3
 800112e:	4653      	mov	r3, sl
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	d400      	bmi.n	8001136 <__aeabi_dsub+0x412>
 8001134:	e780      	b.n	8001038 <__aeabi_dsub+0x314>
 8001136:	4652      	mov	r2, sl
 8001138:	4bb6      	ldr	r3, [pc, #728]	; (8001414 <__aeabi_dsub+0x6f0>)
 800113a:	2601      	movs	r6, #1
 800113c:	401a      	ands	r2, r3
 800113e:	4692      	mov	sl, r2
 8001140:	e77a      	b.n	8001038 <__aeabi_dsub+0x314>
 8001142:	4cb3      	ldr	r4, [pc, #716]	; (8001410 <__aeabi_dsub+0x6ec>)
 8001144:	42a2      	cmp	r2, r4
 8001146:	d100      	bne.n	800114a <__aeabi_dsub+0x426>
 8001148:	e0c0      	b.n	80012cc <__aeabi_dsub+0x5a8>
 800114a:	2480      	movs	r4, #128	; 0x80
 800114c:	464d      	mov	r5, r9
 800114e:	0424      	lsls	r4, r4, #16
 8001150:	4325      	orrs	r5, r4
 8001152:	46a9      	mov	r9, r5
 8001154:	4664      	mov	r4, ip
 8001156:	2c38      	cmp	r4, #56	; 0x38
 8001158:	dc53      	bgt.n	8001202 <__aeabi_dsub+0x4de>
 800115a:	4661      	mov	r1, ip
 800115c:	2c1f      	cmp	r4, #31
 800115e:	dd00      	ble.n	8001162 <__aeabi_dsub+0x43e>
 8001160:	e0cd      	b.n	80012fe <__aeabi_dsub+0x5da>
 8001162:	2520      	movs	r5, #32
 8001164:	001e      	movs	r6, r3
 8001166:	1b2d      	subs	r5, r5, r4
 8001168:	464c      	mov	r4, r9
 800116a:	40ab      	lsls	r3, r5
 800116c:	40ac      	lsls	r4, r5
 800116e:	40ce      	lsrs	r6, r1
 8001170:	1e5d      	subs	r5, r3, #1
 8001172:	41ab      	sbcs	r3, r5
 8001174:	4334      	orrs	r4, r6
 8001176:	4323      	orrs	r3, r4
 8001178:	464c      	mov	r4, r9
 800117a:	40cc      	lsrs	r4, r1
 800117c:	1b3f      	subs	r7, r7, r4
 800117e:	e045      	b.n	800120c <__aeabi_dsub+0x4e8>
 8001180:	464a      	mov	r2, r9
 8001182:	1a1c      	subs	r4, r3, r0
 8001184:	1bd1      	subs	r1, r2, r7
 8001186:	42a3      	cmp	r3, r4
 8001188:	4192      	sbcs	r2, r2
 800118a:	4252      	negs	r2, r2
 800118c:	4692      	mov	sl, r2
 800118e:	000a      	movs	r2, r1
 8001190:	4651      	mov	r1, sl
 8001192:	1a52      	subs	r2, r2, r1
 8001194:	4692      	mov	sl, r2
 8001196:	0212      	lsls	r2, r2, #8
 8001198:	d500      	bpl.n	800119c <__aeabi_dsub+0x478>
 800119a:	e083      	b.n	80012a4 <__aeabi_dsub+0x580>
 800119c:	4653      	mov	r3, sl
 800119e:	4323      	orrs	r3, r4
 80011a0:	d000      	beq.n	80011a4 <__aeabi_dsub+0x480>
 80011a2:	e621      	b.n	8000de8 <__aeabi_dsub+0xc4>
 80011a4:	2200      	movs	r2, #0
 80011a6:	2500      	movs	r5, #0
 80011a8:	e753      	b.n	8001052 <__aeabi_dsub+0x32e>
 80011aa:	181c      	adds	r4, r3, r0
 80011ac:	429c      	cmp	r4, r3
 80011ae:	419b      	sbcs	r3, r3
 80011b0:	444f      	add	r7, r9
 80011b2:	46ba      	mov	sl, r7
 80011b4:	425b      	negs	r3, r3
 80011b6:	449a      	add	sl, r3
 80011b8:	4653      	mov	r3, sl
 80011ba:	2601      	movs	r6, #1
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	d400      	bmi.n	80011c2 <__aeabi_dsub+0x49e>
 80011c0:	e73a      	b.n	8001038 <__aeabi_dsub+0x314>
 80011c2:	2602      	movs	r6, #2
 80011c4:	4652      	mov	r2, sl
 80011c6:	4b93      	ldr	r3, [pc, #588]	; (8001414 <__aeabi_dsub+0x6f0>)
 80011c8:	2101      	movs	r1, #1
 80011ca:	401a      	ands	r2, r3
 80011cc:	0013      	movs	r3, r2
 80011ce:	4021      	ands	r1, r4
 80011d0:	0862      	lsrs	r2, r4, #1
 80011d2:	430a      	orrs	r2, r1
 80011d4:	07dc      	lsls	r4, r3, #31
 80011d6:	085b      	lsrs	r3, r3, #1
 80011d8:	469a      	mov	sl, r3
 80011da:	4314      	orrs	r4, r2
 80011dc:	e62c      	b.n	8000e38 <__aeabi_dsub+0x114>
 80011de:	0039      	movs	r1, r7
 80011e0:	3a20      	subs	r2, #32
 80011e2:	40d1      	lsrs	r1, r2
 80011e4:	4662      	mov	r2, ip
 80011e6:	2a20      	cmp	r2, #32
 80011e8:	d006      	beq.n	80011f8 <__aeabi_dsub+0x4d4>
 80011ea:	4664      	mov	r4, ip
 80011ec:	2240      	movs	r2, #64	; 0x40
 80011ee:	1b12      	subs	r2, r2, r4
 80011f0:	003c      	movs	r4, r7
 80011f2:	4094      	lsls	r4, r2
 80011f4:	4304      	orrs	r4, r0
 80011f6:	9401      	str	r4, [sp, #4]
 80011f8:	9c01      	ldr	r4, [sp, #4]
 80011fa:	1e62      	subs	r2, r4, #1
 80011fc:	4194      	sbcs	r4, r2
 80011fe:	430c      	orrs	r4, r1
 8001200:	e5e3      	b.n	8000dca <__aeabi_dsub+0xa6>
 8001202:	4649      	mov	r1, r9
 8001204:	4319      	orrs	r1, r3
 8001206:	000b      	movs	r3, r1
 8001208:	1e5c      	subs	r4, r3, #1
 800120a:	41a3      	sbcs	r3, r4
 800120c:	1ac4      	subs	r4, r0, r3
 800120e:	42a0      	cmp	r0, r4
 8001210:	419b      	sbcs	r3, r3
 8001212:	425b      	negs	r3, r3
 8001214:	1afb      	subs	r3, r7, r3
 8001216:	469a      	mov	sl, r3
 8001218:	465d      	mov	r5, fp
 800121a:	0016      	movs	r6, r2
 800121c:	e5dc      	b.n	8000dd8 <__aeabi_dsub+0xb4>
 800121e:	4649      	mov	r1, r9
 8001220:	4319      	orrs	r1, r3
 8001222:	d100      	bne.n	8001226 <__aeabi_dsub+0x502>
 8001224:	e0ae      	b.n	8001384 <__aeabi_dsub+0x660>
 8001226:	4661      	mov	r1, ip
 8001228:	4664      	mov	r4, ip
 800122a:	3901      	subs	r1, #1
 800122c:	2c01      	cmp	r4, #1
 800122e:	d100      	bne.n	8001232 <__aeabi_dsub+0x50e>
 8001230:	e0e0      	b.n	80013f4 <__aeabi_dsub+0x6d0>
 8001232:	4c77      	ldr	r4, [pc, #476]	; (8001410 <__aeabi_dsub+0x6ec>)
 8001234:	45a4      	cmp	ip, r4
 8001236:	d056      	beq.n	80012e6 <__aeabi_dsub+0x5c2>
 8001238:	468c      	mov	ip, r1
 800123a:	e69a      	b.n	8000f72 <__aeabi_dsub+0x24e>
 800123c:	4661      	mov	r1, ip
 800123e:	2220      	movs	r2, #32
 8001240:	003c      	movs	r4, r7
 8001242:	1a52      	subs	r2, r2, r1
 8001244:	4094      	lsls	r4, r2
 8001246:	0001      	movs	r1, r0
 8001248:	4090      	lsls	r0, r2
 800124a:	46a0      	mov	r8, r4
 800124c:	4664      	mov	r4, ip
 800124e:	1e42      	subs	r2, r0, #1
 8001250:	4190      	sbcs	r0, r2
 8001252:	4662      	mov	r2, ip
 8001254:	40e1      	lsrs	r1, r4
 8001256:	4644      	mov	r4, r8
 8001258:	40d7      	lsrs	r7, r2
 800125a:	430c      	orrs	r4, r1
 800125c:	4304      	orrs	r4, r0
 800125e:	44b9      	add	r9, r7
 8001260:	e701      	b.n	8001066 <__aeabi_dsub+0x342>
 8001262:	496b      	ldr	r1, [pc, #428]	; (8001410 <__aeabi_dsub+0x6ec>)
 8001264:	428a      	cmp	r2, r1
 8001266:	d100      	bne.n	800126a <__aeabi_dsub+0x546>
 8001268:	e70c      	b.n	8001084 <__aeabi_dsub+0x360>
 800126a:	1818      	adds	r0, r3, r0
 800126c:	4298      	cmp	r0, r3
 800126e:	419b      	sbcs	r3, r3
 8001270:	444f      	add	r7, r9
 8001272:	425b      	negs	r3, r3
 8001274:	18fb      	adds	r3, r7, r3
 8001276:	07dc      	lsls	r4, r3, #31
 8001278:	0840      	lsrs	r0, r0, #1
 800127a:	085b      	lsrs	r3, r3, #1
 800127c:	469a      	mov	sl, r3
 800127e:	0016      	movs	r6, r2
 8001280:	4304      	orrs	r4, r0
 8001282:	e6d9      	b.n	8001038 <__aeabi_dsub+0x314>
 8001284:	2a00      	cmp	r2, #0
 8001286:	d000      	beq.n	800128a <__aeabi_dsub+0x566>
 8001288:	e081      	b.n	800138e <__aeabi_dsub+0x66a>
 800128a:	003b      	movs	r3, r7
 800128c:	4303      	orrs	r3, r0
 800128e:	d11d      	bne.n	80012cc <__aeabi_dsub+0x5a8>
 8001290:	2280      	movs	r2, #128	; 0x80
 8001292:	2500      	movs	r5, #0
 8001294:	0312      	lsls	r2, r2, #12
 8001296:	e70b      	b.n	80010b0 <__aeabi_dsub+0x38c>
 8001298:	08c0      	lsrs	r0, r0, #3
 800129a:	077b      	lsls	r3, r7, #29
 800129c:	465d      	mov	r5, fp
 800129e:	4303      	orrs	r3, r0
 80012a0:	08fa      	lsrs	r2, r7, #3
 80012a2:	e6d3      	b.n	800104c <__aeabi_dsub+0x328>
 80012a4:	1ac4      	subs	r4, r0, r3
 80012a6:	42a0      	cmp	r0, r4
 80012a8:	4180      	sbcs	r0, r0
 80012aa:	464b      	mov	r3, r9
 80012ac:	4240      	negs	r0, r0
 80012ae:	1aff      	subs	r7, r7, r3
 80012b0:	1a3b      	subs	r3, r7, r0
 80012b2:	469a      	mov	sl, r3
 80012b4:	465d      	mov	r5, fp
 80012b6:	e597      	b.n	8000de8 <__aeabi_dsub+0xc4>
 80012b8:	1a1c      	subs	r4, r3, r0
 80012ba:	464a      	mov	r2, r9
 80012bc:	42a3      	cmp	r3, r4
 80012be:	419b      	sbcs	r3, r3
 80012c0:	1bd7      	subs	r7, r2, r7
 80012c2:	425b      	negs	r3, r3
 80012c4:	1afb      	subs	r3, r7, r3
 80012c6:	469a      	mov	sl, r3
 80012c8:	2601      	movs	r6, #1
 80012ca:	e585      	b.n	8000dd8 <__aeabi_dsub+0xb4>
 80012cc:	08c0      	lsrs	r0, r0, #3
 80012ce:	077b      	lsls	r3, r7, #29
 80012d0:	465d      	mov	r5, fp
 80012d2:	4303      	orrs	r3, r0
 80012d4:	08fa      	lsrs	r2, r7, #3
 80012d6:	e6e7      	b.n	80010a8 <__aeabi_dsub+0x384>
 80012d8:	464a      	mov	r2, r9
 80012da:	08db      	lsrs	r3, r3, #3
 80012dc:	0752      	lsls	r2, r2, #29
 80012de:	4313      	orrs	r3, r2
 80012e0:	464a      	mov	r2, r9
 80012e2:	08d2      	lsrs	r2, r2, #3
 80012e4:	e6b5      	b.n	8001052 <__aeabi_dsub+0x32e>
 80012e6:	08c0      	lsrs	r0, r0, #3
 80012e8:	077b      	lsls	r3, r7, #29
 80012ea:	4303      	orrs	r3, r0
 80012ec:	08fa      	lsrs	r2, r7, #3
 80012ee:	e6db      	b.n	80010a8 <__aeabi_dsub+0x384>
 80012f0:	4649      	mov	r1, r9
 80012f2:	4319      	orrs	r1, r3
 80012f4:	000b      	movs	r3, r1
 80012f6:	1e59      	subs	r1, r3, #1
 80012f8:	418b      	sbcs	r3, r1
 80012fa:	001c      	movs	r4, r3
 80012fc:	e653      	b.n	8000fa6 <__aeabi_dsub+0x282>
 80012fe:	464d      	mov	r5, r9
 8001300:	3c20      	subs	r4, #32
 8001302:	40e5      	lsrs	r5, r4
 8001304:	2920      	cmp	r1, #32
 8001306:	d005      	beq.n	8001314 <__aeabi_dsub+0x5f0>
 8001308:	2440      	movs	r4, #64	; 0x40
 800130a:	1a64      	subs	r4, r4, r1
 800130c:	4649      	mov	r1, r9
 800130e:	40a1      	lsls	r1, r4
 8001310:	430b      	orrs	r3, r1
 8001312:	4698      	mov	r8, r3
 8001314:	4643      	mov	r3, r8
 8001316:	1e5c      	subs	r4, r3, #1
 8001318:	41a3      	sbcs	r3, r4
 800131a:	432b      	orrs	r3, r5
 800131c:	e776      	b.n	800120c <__aeabi_dsub+0x4e8>
 800131e:	2a00      	cmp	r2, #0
 8001320:	d0e1      	beq.n	80012e6 <__aeabi_dsub+0x5c2>
 8001322:	003a      	movs	r2, r7
 8001324:	08db      	lsrs	r3, r3, #3
 8001326:	4302      	orrs	r2, r0
 8001328:	d100      	bne.n	800132c <__aeabi_dsub+0x608>
 800132a:	e6b8      	b.n	800109e <__aeabi_dsub+0x37a>
 800132c:	464a      	mov	r2, r9
 800132e:	0752      	lsls	r2, r2, #29
 8001330:	2480      	movs	r4, #128	; 0x80
 8001332:	4313      	orrs	r3, r2
 8001334:	464a      	mov	r2, r9
 8001336:	0324      	lsls	r4, r4, #12
 8001338:	08d2      	lsrs	r2, r2, #3
 800133a:	4222      	tst	r2, r4
 800133c:	d007      	beq.n	800134e <__aeabi_dsub+0x62a>
 800133e:	08fe      	lsrs	r6, r7, #3
 8001340:	4226      	tst	r6, r4
 8001342:	d104      	bne.n	800134e <__aeabi_dsub+0x62a>
 8001344:	465d      	mov	r5, fp
 8001346:	0032      	movs	r2, r6
 8001348:	08c3      	lsrs	r3, r0, #3
 800134a:	077f      	lsls	r7, r7, #29
 800134c:	433b      	orrs	r3, r7
 800134e:	0f59      	lsrs	r1, r3, #29
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	0749      	lsls	r1, r1, #29
 8001354:	08db      	lsrs	r3, r3, #3
 8001356:	430b      	orrs	r3, r1
 8001358:	e6a6      	b.n	80010a8 <__aeabi_dsub+0x384>
 800135a:	1ac4      	subs	r4, r0, r3
 800135c:	42a0      	cmp	r0, r4
 800135e:	4180      	sbcs	r0, r0
 8001360:	464b      	mov	r3, r9
 8001362:	4240      	negs	r0, r0
 8001364:	1aff      	subs	r7, r7, r3
 8001366:	1a3b      	subs	r3, r7, r0
 8001368:	469a      	mov	sl, r3
 800136a:	465d      	mov	r5, fp
 800136c:	2601      	movs	r6, #1
 800136e:	e533      	b.n	8000dd8 <__aeabi_dsub+0xb4>
 8001370:	003b      	movs	r3, r7
 8001372:	4303      	orrs	r3, r0
 8001374:	d100      	bne.n	8001378 <__aeabi_dsub+0x654>
 8001376:	e715      	b.n	80011a4 <__aeabi_dsub+0x480>
 8001378:	08c0      	lsrs	r0, r0, #3
 800137a:	077b      	lsls	r3, r7, #29
 800137c:	465d      	mov	r5, fp
 800137e:	4303      	orrs	r3, r0
 8001380:	08fa      	lsrs	r2, r7, #3
 8001382:	e666      	b.n	8001052 <__aeabi_dsub+0x32e>
 8001384:	08c0      	lsrs	r0, r0, #3
 8001386:	077b      	lsls	r3, r7, #29
 8001388:	4303      	orrs	r3, r0
 800138a:	08fa      	lsrs	r2, r7, #3
 800138c:	e65e      	b.n	800104c <__aeabi_dsub+0x328>
 800138e:	003a      	movs	r2, r7
 8001390:	08db      	lsrs	r3, r3, #3
 8001392:	4302      	orrs	r2, r0
 8001394:	d100      	bne.n	8001398 <__aeabi_dsub+0x674>
 8001396:	e682      	b.n	800109e <__aeabi_dsub+0x37a>
 8001398:	464a      	mov	r2, r9
 800139a:	0752      	lsls	r2, r2, #29
 800139c:	2480      	movs	r4, #128	; 0x80
 800139e:	4313      	orrs	r3, r2
 80013a0:	464a      	mov	r2, r9
 80013a2:	0324      	lsls	r4, r4, #12
 80013a4:	08d2      	lsrs	r2, r2, #3
 80013a6:	4222      	tst	r2, r4
 80013a8:	d007      	beq.n	80013ba <__aeabi_dsub+0x696>
 80013aa:	08fe      	lsrs	r6, r7, #3
 80013ac:	4226      	tst	r6, r4
 80013ae:	d104      	bne.n	80013ba <__aeabi_dsub+0x696>
 80013b0:	465d      	mov	r5, fp
 80013b2:	0032      	movs	r2, r6
 80013b4:	08c3      	lsrs	r3, r0, #3
 80013b6:	077f      	lsls	r7, r7, #29
 80013b8:	433b      	orrs	r3, r7
 80013ba:	0f59      	lsrs	r1, r3, #29
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	08db      	lsrs	r3, r3, #3
 80013c0:	0749      	lsls	r1, r1, #29
 80013c2:	430b      	orrs	r3, r1
 80013c4:	e670      	b.n	80010a8 <__aeabi_dsub+0x384>
 80013c6:	08c0      	lsrs	r0, r0, #3
 80013c8:	077b      	lsls	r3, r7, #29
 80013ca:	4303      	orrs	r3, r0
 80013cc:	08fa      	lsrs	r2, r7, #3
 80013ce:	e640      	b.n	8001052 <__aeabi_dsub+0x32e>
 80013d0:	464c      	mov	r4, r9
 80013d2:	3920      	subs	r1, #32
 80013d4:	40cc      	lsrs	r4, r1
 80013d6:	4661      	mov	r1, ip
 80013d8:	2920      	cmp	r1, #32
 80013da:	d006      	beq.n	80013ea <__aeabi_dsub+0x6c6>
 80013dc:	4666      	mov	r6, ip
 80013de:	2140      	movs	r1, #64	; 0x40
 80013e0:	1b89      	subs	r1, r1, r6
 80013e2:	464e      	mov	r6, r9
 80013e4:	408e      	lsls	r6, r1
 80013e6:	4333      	orrs	r3, r6
 80013e8:	4698      	mov	r8, r3
 80013ea:	4643      	mov	r3, r8
 80013ec:	1e59      	subs	r1, r3, #1
 80013ee:	418b      	sbcs	r3, r1
 80013f0:	431c      	orrs	r4, r3
 80013f2:	e5d8      	b.n	8000fa6 <__aeabi_dsub+0x282>
 80013f4:	181c      	adds	r4, r3, r0
 80013f6:	4284      	cmp	r4, r0
 80013f8:	4180      	sbcs	r0, r0
 80013fa:	444f      	add	r7, r9
 80013fc:	46ba      	mov	sl, r7
 80013fe:	4240      	negs	r0, r0
 8001400:	4482      	add	sl, r0
 8001402:	e6d9      	b.n	80011b8 <__aeabi_dsub+0x494>
 8001404:	4653      	mov	r3, sl
 8001406:	4323      	orrs	r3, r4
 8001408:	d100      	bne.n	800140c <__aeabi_dsub+0x6e8>
 800140a:	e6cb      	b.n	80011a4 <__aeabi_dsub+0x480>
 800140c:	e614      	b.n	8001038 <__aeabi_dsub+0x314>
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	000007ff 	.word	0x000007ff
 8001414:	ff7fffff 	.word	0xff7fffff
 8001418:	000007fe 	.word	0x000007fe
 800141c:	2300      	movs	r3, #0
 800141e:	4a01      	ldr	r2, [pc, #4]	; (8001424 <__aeabi_dsub+0x700>)
 8001420:	001c      	movs	r4, r3
 8001422:	e529      	b.n	8000e78 <__aeabi_dsub+0x154>
 8001424:	000007ff 	.word	0x000007ff

08001428 <__aeabi_d2iz>:
 8001428:	000a      	movs	r2, r1
 800142a:	b530      	push	{r4, r5, lr}
 800142c:	4c13      	ldr	r4, [pc, #76]	; (800147c <__aeabi_d2iz+0x54>)
 800142e:	0053      	lsls	r3, r2, #1
 8001430:	0309      	lsls	r1, r1, #12
 8001432:	0005      	movs	r5, r0
 8001434:	0b09      	lsrs	r1, r1, #12
 8001436:	2000      	movs	r0, #0
 8001438:	0d5b      	lsrs	r3, r3, #21
 800143a:	0fd2      	lsrs	r2, r2, #31
 800143c:	42a3      	cmp	r3, r4
 800143e:	dd04      	ble.n	800144a <__aeabi_d2iz+0x22>
 8001440:	480f      	ldr	r0, [pc, #60]	; (8001480 <__aeabi_d2iz+0x58>)
 8001442:	4283      	cmp	r3, r0
 8001444:	dd02      	ble.n	800144c <__aeabi_d2iz+0x24>
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <__aeabi_d2iz+0x5c>)
 8001448:	18d0      	adds	r0, r2, r3
 800144a:	bd30      	pop	{r4, r5, pc}
 800144c:	2080      	movs	r0, #128	; 0x80
 800144e:	0340      	lsls	r0, r0, #13
 8001450:	4301      	orrs	r1, r0
 8001452:	480d      	ldr	r0, [pc, #52]	; (8001488 <__aeabi_d2iz+0x60>)
 8001454:	1ac0      	subs	r0, r0, r3
 8001456:	281f      	cmp	r0, #31
 8001458:	dd08      	ble.n	800146c <__aeabi_d2iz+0x44>
 800145a:	480c      	ldr	r0, [pc, #48]	; (800148c <__aeabi_d2iz+0x64>)
 800145c:	1ac3      	subs	r3, r0, r3
 800145e:	40d9      	lsrs	r1, r3
 8001460:	000b      	movs	r3, r1
 8001462:	4258      	negs	r0, r3
 8001464:	2a00      	cmp	r2, #0
 8001466:	d1f0      	bne.n	800144a <__aeabi_d2iz+0x22>
 8001468:	0018      	movs	r0, r3
 800146a:	e7ee      	b.n	800144a <__aeabi_d2iz+0x22>
 800146c:	4c08      	ldr	r4, [pc, #32]	; (8001490 <__aeabi_d2iz+0x68>)
 800146e:	40c5      	lsrs	r5, r0
 8001470:	46a4      	mov	ip, r4
 8001472:	4463      	add	r3, ip
 8001474:	4099      	lsls	r1, r3
 8001476:	000b      	movs	r3, r1
 8001478:	432b      	orrs	r3, r5
 800147a:	e7f2      	b.n	8001462 <__aeabi_d2iz+0x3a>
 800147c:	000003fe 	.word	0x000003fe
 8001480:	0000041d 	.word	0x0000041d
 8001484:	7fffffff 	.word	0x7fffffff
 8001488:	00000433 	.word	0x00000433
 800148c:	00000413 	.word	0x00000413
 8001490:	fffffbed 	.word	0xfffffbed

08001494 <__aeabi_cdrcmple>:
 8001494:	4684      	mov	ip, r0
 8001496:	0010      	movs	r0, r2
 8001498:	4662      	mov	r2, ip
 800149a:	468c      	mov	ip, r1
 800149c:	0019      	movs	r1, r3
 800149e:	4663      	mov	r3, ip
 80014a0:	e000      	b.n	80014a4 <__aeabi_cdcmpeq>
 80014a2:	46c0      	nop			; (mov r8, r8)

080014a4 <__aeabi_cdcmpeq>:
 80014a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80014a6:	f000 f905 	bl	80016b4 <__ledf2>
 80014aa:	2800      	cmp	r0, #0
 80014ac:	d401      	bmi.n	80014b2 <__aeabi_cdcmpeq+0xe>
 80014ae:	2100      	movs	r1, #0
 80014b0:	42c8      	cmn	r0, r1
 80014b2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080014b4 <__aeabi_dcmpeq>:
 80014b4:	b510      	push	{r4, lr}
 80014b6:	f000 f855 	bl	8001564 <__eqdf2>
 80014ba:	4240      	negs	r0, r0
 80014bc:	3001      	adds	r0, #1
 80014be:	bd10      	pop	{r4, pc}

080014c0 <__aeabi_dcmplt>:
 80014c0:	b510      	push	{r4, lr}
 80014c2:	f000 f8f7 	bl	80016b4 <__ledf2>
 80014c6:	2800      	cmp	r0, #0
 80014c8:	db01      	blt.n	80014ce <__aeabi_dcmplt+0xe>
 80014ca:	2000      	movs	r0, #0
 80014cc:	bd10      	pop	{r4, pc}
 80014ce:	2001      	movs	r0, #1
 80014d0:	bd10      	pop	{r4, pc}
 80014d2:	46c0      	nop			; (mov r8, r8)

080014d4 <__aeabi_dcmple>:
 80014d4:	b510      	push	{r4, lr}
 80014d6:	f000 f8ed 	bl	80016b4 <__ledf2>
 80014da:	2800      	cmp	r0, #0
 80014dc:	dd01      	ble.n	80014e2 <__aeabi_dcmple+0xe>
 80014de:	2000      	movs	r0, #0
 80014e0:	bd10      	pop	{r4, pc}
 80014e2:	2001      	movs	r0, #1
 80014e4:	bd10      	pop	{r4, pc}
 80014e6:	46c0      	nop			; (mov r8, r8)

080014e8 <__aeabi_dcmpgt>:
 80014e8:	b510      	push	{r4, lr}
 80014ea:	f000 f87d 	bl	80015e8 <__gedf2>
 80014ee:	2800      	cmp	r0, #0
 80014f0:	dc01      	bgt.n	80014f6 <__aeabi_dcmpgt+0xe>
 80014f2:	2000      	movs	r0, #0
 80014f4:	bd10      	pop	{r4, pc}
 80014f6:	2001      	movs	r0, #1
 80014f8:	bd10      	pop	{r4, pc}
 80014fa:	46c0      	nop			; (mov r8, r8)

080014fc <__aeabi_dcmpge>:
 80014fc:	b510      	push	{r4, lr}
 80014fe:	f000 f873 	bl	80015e8 <__gedf2>
 8001502:	2800      	cmp	r0, #0
 8001504:	da01      	bge.n	800150a <__aeabi_dcmpge+0xe>
 8001506:	2000      	movs	r0, #0
 8001508:	bd10      	pop	{r4, pc}
 800150a:	2001      	movs	r0, #1
 800150c:	bd10      	pop	{r4, pc}
 800150e:	46c0      	nop			; (mov r8, r8)

08001510 <__clzsi2>:
 8001510:	211c      	movs	r1, #28
 8001512:	2301      	movs	r3, #1
 8001514:	041b      	lsls	r3, r3, #16
 8001516:	4298      	cmp	r0, r3
 8001518:	d301      	bcc.n	800151e <__clzsi2+0xe>
 800151a:	0c00      	lsrs	r0, r0, #16
 800151c:	3910      	subs	r1, #16
 800151e:	0a1b      	lsrs	r3, r3, #8
 8001520:	4298      	cmp	r0, r3
 8001522:	d301      	bcc.n	8001528 <__clzsi2+0x18>
 8001524:	0a00      	lsrs	r0, r0, #8
 8001526:	3908      	subs	r1, #8
 8001528:	091b      	lsrs	r3, r3, #4
 800152a:	4298      	cmp	r0, r3
 800152c:	d301      	bcc.n	8001532 <__clzsi2+0x22>
 800152e:	0900      	lsrs	r0, r0, #4
 8001530:	3904      	subs	r1, #4
 8001532:	a202      	add	r2, pc, #8	; (adr r2, 800153c <__clzsi2+0x2c>)
 8001534:	5c10      	ldrb	r0, [r2, r0]
 8001536:	1840      	adds	r0, r0, r1
 8001538:	4770      	bx	lr
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	02020304 	.word	0x02020304
 8001540:	01010101 	.word	0x01010101
	...

0800154c <__clzdi2>:
 800154c:	b510      	push	{r4, lr}
 800154e:	2900      	cmp	r1, #0
 8001550:	d103      	bne.n	800155a <__clzdi2+0xe>
 8001552:	f7ff ffdd 	bl	8001510 <__clzsi2>
 8001556:	3020      	adds	r0, #32
 8001558:	e002      	b.n	8001560 <__clzdi2+0x14>
 800155a:	0008      	movs	r0, r1
 800155c:	f7ff ffd8 	bl	8001510 <__clzsi2>
 8001560:	bd10      	pop	{r4, pc}
 8001562:	46c0      	nop			; (mov r8, r8)

08001564 <__eqdf2>:
 8001564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001566:	464e      	mov	r6, r9
 8001568:	4645      	mov	r5, r8
 800156a:	46de      	mov	lr, fp
 800156c:	4657      	mov	r7, sl
 800156e:	4690      	mov	r8, r2
 8001570:	b5e0      	push	{r5, r6, r7, lr}
 8001572:	0017      	movs	r7, r2
 8001574:	031a      	lsls	r2, r3, #12
 8001576:	0b12      	lsrs	r2, r2, #12
 8001578:	0005      	movs	r5, r0
 800157a:	4684      	mov	ip, r0
 800157c:	4819      	ldr	r0, [pc, #100]	; (80015e4 <__eqdf2+0x80>)
 800157e:	030e      	lsls	r6, r1, #12
 8001580:	004c      	lsls	r4, r1, #1
 8001582:	4691      	mov	r9, r2
 8001584:	005a      	lsls	r2, r3, #1
 8001586:	0fdb      	lsrs	r3, r3, #31
 8001588:	469b      	mov	fp, r3
 800158a:	0b36      	lsrs	r6, r6, #12
 800158c:	0d64      	lsrs	r4, r4, #21
 800158e:	0fc9      	lsrs	r1, r1, #31
 8001590:	0d52      	lsrs	r2, r2, #21
 8001592:	4284      	cmp	r4, r0
 8001594:	d019      	beq.n	80015ca <__eqdf2+0x66>
 8001596:	4282      	cmp	r2, r0
 8001598:	d010      	beq.n	80015bc <__eqdf2+0x58>
 800159a:	2001      	movs	r0, #1
 800159c:	4294      	cmp	r4, r2
 800159e:	d10e      	bne.n	80015be <__eqdf2+0x5a>
 80015a0:	454e      	cmp	r6, r9
 80015a2:	d10c      	bne.n	80015be <__eqdf2+0x5a>
 80015a4:	2001      	movs	r0, #1
 80015a6:	45c4      	cmp	ip, r8
 80015a8:	d109      	bne.n	80015be <__eqdf2+0x5a>
 80015aa:	4559      	cmp	r1, fp
 80015ac:	d017      	beq.n	80015de <__eqdf2+0x7a>
 80015ae:	2c00      	cmp	r4, #0
 80015b0:	d105      	bne.n	80015be <__eqdf2+0x5a>
 80015b2:	0030      	movs	r0, r6
 80015b4:	4328      	orrs	r0, r5
 80015b6:	1e43      	subs	r3, r0, #1
 80015b8:	4198      	sbcs	r0, r3
 80015ba:	e000      	b.n	80015be <__eqdf2+0x5a>
 80015bc:	2001      	movs	r0, #1
 80015be:	bcf0      	pop	{r4, r5, r6, r7}
 80015c0:	46bb      	mov	fp, r7
 80015c2:	46b2      	mov	sl, r6
 80015c4:	46a9      	mov	r9, r5
 80015c6:	46a0      	mov	r8, r4
 80015c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015ca:	0033      	movs	r3, r6
 80015cc:	2001      	movs	r0, #1
 80015ce:	432b      	orrs	r3, r5
 80015d0:	d1f5      	bne.n	80015be <__eqdf2+0x5a>
 80015d2:	42a2      	cmp	r2, r4
 80015d4:	d1f3      	bne.n	80015be <__eqdf2+0x5a>
 80015d6:	464b      	mov	r3, r9
 80015d8:	433b      	orrs	r3, r7
 80015da:	d1f0      	bne.n	80015be <__eqdf2+0x5a>
 80015dc:	e7e2      	b.n	80015a4 <__eqdf2+0x40>
 80015de:	2000      	movs	r0, #0
 80015e0:	e7ed      	b.n	80015be <__eqdf2+0x5a>
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	000007ff 	.word	0x000007ff

080015e8 <__gedf2>:
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ea:	4647      	mov	r7, r8
 80015ec:	46ce      	mov	lr, r9
 80015ee:	0004      	movs	r4, r0
 80015f0:	0018      	movs	r0, r3
 80015f2:	0016      	movs	r6, r2
 80015f4:	031b      	lsls	r3, r3, #12
 80015f6:	0b1b      	lsrs	r3, r3, #12
 80015f8:	4d2d      	ldr	r5, [pc, #180]	; (80016b0 <__gedf2+0xc8>)
 80015fa:	004a      	lsls	r2, r1, #1
 80015fc:	4699      	mov	r9, r3
 80015fe:	b580      	push	{r7, lr}
 8001600:	0043      	lsls	r3, r0, #1
 8001602:	030f      	lsls	r7, r1, #12
 8001604:	46a4      	mov	ip, r4
 8001606:	46b0      	mov	r8, r6
 8001608:	0b3f      	lsrs	r7, r7, #12
 800160a:	0d52      	lsrs	r2, r2, #21
 800160c:	0fc9      	lsrs	r1, r1, #31
 800160e:	0d5b      	lsrs	r3, r3, #21
 8001610:	0fc0      	lsrs	r0, r0, #31
 8001612:	42aa      	cmp	r2, r5
 8001614:	d021      	beq.n	800165a <__gedf2+0x72>
 8001616:	42ab      	cmp	r3, r5
 8001618:	d013      	beq.n	8001642 <__gedf2+0x5a>
 800161a:	2a00      	cmp	r2, #0
 800161c:	d122      	bne.n	8001664 <__gedf2+0x7c>
 800161e:	433c      	orrs	r4, r7
 8001620:	2b00      	cmp	r3, #0
 8001622:	d102      	bne.n	800162a <__gedf2+0x42>
 8001624:	464d      	mov	r5, r9
 8001626:	432e      	orrs	r6, r5
 8001628:	d022      	beq.n	8001670 <__gedf2+0x88>
 800162a:	2c00      	cmp	r4, #0
 800162c:	d010      	beq.n	8001650 <__gedf2+0x68>
 800162e:	4281      	cmp	r1, r0
 8001630:	d022      	beq.n	8001678 <__gedf2+0x90>
 8001632:	2002      	movs	r0, #2
 8001634:	3901      	subs	r1, #1
 8001636:	4008      	ands	r0, r1
 8001638:	3801      	subs	r0, #1
 800163a:	bcc0      	pop	{r6, r7}
 800163c:	46b9      	mov	r9, r7
 800163e:	46b0      	mov	r8, r6
 8001640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001642:	464d      	mov	r5, r9
 8001644:	432e      	orrs	r6, r5
 8001646:	d129      	bne.n	800169c <__gedf2+0xb4>
 8001648:	2a00      	cmp	r2, #0
 800164a:	d1f0      	bne.n	800162e <__gedf2+0x46>
 800164c:	433c      	orrs	r4, r7
 800164e:	d1ee      	bne.n	800162e <__gedf2+0x46>
 8001650:	2800      	cmp	r0, #0
 8001652:	d1f2      	bne.n	800163a <__gedf2+0x52>
 8001654:	2001      	movs	r0, #1
 8001656:	4240      	negs	r0, r0
 8001658:	e7ef      	b.n	800163a <__gedf2+0x52>
 800165a:	003d      	movs	r5, r7
 800165c:	4325      	orrs	r5, r4
 800165e:	d11d      	bne.n	800169c <__gedf2+0xb4>
 8001660:	4293      	cmp	r3, r2
 8001662:	d0ee      	beq.n	8001642 <__gedf2+0x5a>
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1e2      	bne.n	800162e <__gedf2+0x46>
 8001668:	464c      	mov	r4, r9
 800166a:	4326      	orrs	r6, r4
 800166c:	d1df      	bne.n	800162e <__gedf2+0x46>
 800166e:	e7e0      	b.n	8001632 <__gedf2+0x4a>
 8001670:	2000      	movs	r0, #0
 8001672:	2c00      	cmp	r4, #0
 8001674:	d0e1      	beq.n	800163a <__gedf2+0x52>
 8001676:	e7dc      	b.n	8001632 <__gedf2+0x4a>
 8001678:	429a      	cmp	r2, r3
 800167a:	dc0a      	bgt.n	8001692 <__gedf2+0xaa>
 800167c:	dbe8      	blt.n	8001650 <__gedf2+0x68>
 800167e:	454f      	cmp	r7, r9
 8001680:	d8d7      	bhi.n	8001632 <__gedf2+0x4a>
 8001682:	d00e      	beq.n	80016a2 <__gedf2+0xba>
 8001684:	2000      	movs	r0, #0
 8001686:	454f      	cmp	r7, r9
 8001688:	d2d7      	bcs.n	800163a <__gedf2+0x52>
 800168a:	2900      	cmp	r1, #0
 800168c:	d0e2      	beq.n	8001654 <__gedf2+0x6c>
 800168e:	0008      	movs	r0, r1
 8001690:	e7d3      	b.n	800163a <__gedf2+0x52>
 8001692:	4243      	negs	r3, r0
 8001694:	4158      	adcs	r0, r3
 8001696:	0040      	lsls	r0, r0, #1
 8001698:	3801      	subs	r0, #1
 800169a:	e7ce      	b.n	800163a <__gedf2+0x52>
 800169c:	2002      	movs	r0, #2
 800169e:	4240      	negs	r0, r0
 80016a0:	e7cb      	b.n	800163a <__gedf2+0x52>
 80016a2:	45c4      	cmp	ip, r8
 80016a4:	d8c5      	bhi.n	8001632 <__gedf2+0x4a>
 80016a6:	2000      	movs	r0, #0
 80016a8:	45c4      	cmp	ip, r8
 80016aa:	d2c6      	bcs.n	800163a <__gedf2+0x52>
 80016ac:	e7ed      	b.n	800168a <__gedf2+0xa2>
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	000007ff 	.word	0x000007ff

080016b4 <__ledf2>:
 80016b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016b6:	4647      	mov	r7, r8
 80016b8:	46ce      	mov	lr, r9
 80016ba:	0004      	movs	r4, r0
 80016bc:	0018      	movs	r0, r3
 80016be:	0016      	movs	r6, r2
 80016c0:	031b      	lsls	r3, r3, #12
 80016c2:	0b1b      	lsrs	r3, r3, #12
 80016c4:	4d2c      	ldr	r5, [pc, #176]	; (8001778 <__ledf2+0xc4>)
 80016c6:	004a      	lsls	r2, r1, #1
 80016c8:	4699      	mov	r9, r3
 80016ca:	b580      	push	{r7, lr}
 80016cc:	0043      	lsls	r3, r0, #1
 80016ce:	030f      	lsls	r7, r1, #12
 80016d0:	46a4      	mov	ip, r4
 80016d2:	46b0      	mov	r8, r6
 80016d4:	0b3f      	lsrs	r7, r7, #12
 80016d6:	0d52      	lsrs	r2, r2, #21
 80016d8:	0fc9      	lsrs	r1, r1, #31
 80016da:	0d5b      	lsrs	r3, r3, #21
 80016dc:	0fc0      	lsrs	r0, r0, #31
 80016de:	42aa      	cmp	r2, r5
 80016e0:	d00d      	beq.n	80016fe <__ledf2+0x4a>
 80016e2:	42ab      	cmp	r3, r5
 80016e4:	d010      	beq.n	8001708 <__ledf2+0x54>
 80016e6:	2a00      	cmp	r2, #0
 80016e8:	d127      	bne.n	800173a <__ledf2+0x86>
 80016ea:	433c      	orrs	r4, r7
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d111      	bne.n	8001714 <__ledf2+0x60>
 80016f0:	464d      	mov	r5, r9
 80016f2:	432e      	orrs	r6, r5
 80016f4:	d10e      	bne.n	8001714 <__ledf2+0x60>
 80016f6:	2000      	movs	r0, #0
 80016f8:	2c00      	cmp	r4, #0
 80016fa:	d015      	beq.n	8001728 <__ledf2+0x74>
 80016fc:	e00e      	b.n	800171c <__ledf2+0x68>
 80016fe:	003d      	movs	r5, r7
 8001700:	4325      	orrs	r5, r4
 8001702:	d110      	bne.n	8001726 <__ledf2+0x72>
 8001704:	4293      	cmp	r3, r2
 8001706:	d118      	bne.n	800173a <__ledf2+0x86>
 8001708:	464d      	mov	r5, r9
 800170a:	432e      	orrs	r6, r5
 800170c:	d10b      	bne.n	8001726 <__ledf2+0x72>
 800170e:	2a00      	cmp	r2, #0
 8001710:	d102      	bne.n	8001718 <__ledf2+0x64>
 8001712:	433c      	orrs	r4, r7
 8001714:	2c00      	cmp	r4, #0
 8001716:	d00b      	beq.n	8001730 <__ledf2+0x7c>
 8001718:	4281      	cmp	r1, r0
 800171a:	d014      	beq.n	8001746 <__ledf2+0x92>
 800171c:	2002      	movs	r0, #2
 800171e:	3901      	subs	r1, #1
 8001720:	4008      	ands	r0, r1
 8001722:	3801      	subs	r0, #1
 8001724:	e000      	b.n	8001728 <__ledf2+0x74>
 8001726:	2002      	movs	r0, #2
 8001728:	bcc0      	pop	{r6, r7}
 800172a:	46b9      	mov	r9, r7
 800172c:	46b0      	mov	r8, r6
 800172e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001730:	2800      	cmp	r0, #0
 8001732:	d1f9      	bne.n	8001728 <__ledf2+0x74>
 8001734:	2001      	movs	r0, #1
 8001736:	4240      	negs	r0, r0
 8001738:	e7f6      	b.n	8001728 <__ledf2+0x74>
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1ec      	bne.n	8001718 <__ledf2+0x64>
 800173e:	464c      	mov	r4, r9
 8001740:	4326      	orrs	r6, r4
 8001742:	d1e9      	bne.n	8001718 <__ledf2+0x64>
 8001744:	e7ea      	b.n	800171c <__ledf2+0x68>
 8001746:	429a      	cmp	r2, r3
 8001748:	dd04      	ble.n	8001754 <__ledf2+0xa0>
 800174a:	4243      	negs	r3, r0
 800174c:	4158      	adcs	r0, r3
 800174e:	0040      	lsls	r0, r0, #1
 8001750:	3801      	subs	r0, #1
 8001752:	e7e9      	b.n	8001728 <__ledf2+0x74>
 8001754:	429a      	cmp	r2, r3
 8001756:	dbeb      	blt.n	8001730 <__ledf2+0x7c>
 8001758:	454f      	cmp	r7, r9
 800175a:	d8df      	bhi.n	800171c <__ledf2+0x68>
 800175c:	d006      	beq.n	800176c <__ledf2+0xb8>
 800175e:	2000      	movs	r0, #0
 8001760:	454f      	cmp	r7, r9
 8001762:	d2e1      	bcs.n	8001728 <__ledf2+0x74>
 8001764:	2900      	cmp	r1, #0
 8001766:	d0e5      	beq.n	8001734 <__ledf2+0x80>
 8001768:	0008      	movs	r0, r1
 800176a:	e7dd      	b.n	8001728 <__ledf2+0x74>
 800176c:	45c4      	cmp	ip, r8
 800176e:	d8d5      	bhi.n	800171c <__ledf2+0x68>
 8001770:	2000      	movs	r0, #0
 8001772:	45c4      	cmp	ip, r8
 8001774:	d2d8      	bcs.n	8001728 <__ledf2+0x74>
 8001776:	e7f5      	b.n	8001764 <__ledf2+0xb0>
 8001778:	000007ff 	.word	0x000007ff

0800177c <displayParameters>:
// Parametry:
// - short positioningState: stan pozycjonowania,
// - short receivingState: stan odbierania,
// - double size_x: szerokość znaku,
// - double size_y: wysokość znaku.
void displayParameters(short positioningState, short receivingState, double size_x, double size_y){
 800177c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177e:	b08d      	sub	sp, #52	; 0x34
 8001780:	af04      	add	r7, sp, #16
 8001782:	603a      	str	r2, [r7, #0]
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	250e      	movs	r5, #14
 8001788:	197b      	adds	r3, r7, r5
 800178a:	1c02      	adds	r2, r0, #0
 800178c:	801a      	strh	r2, [r3, #0]
 800178e:	260c      	movs	r6, #12
 8001790:	19bb      	adds	r3, r7, r6
 8001792:	1c0a      	adds	r2, r1, #0
 8001794:	801a      	strh	r2, [r3, #0]

    double char_size_x = 2 * size_x; // Obliczenie rozmiaru znaku w osi X.
 8001796:	6838      	ldr	r0, [r7, #0]
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	0002      	movs	r2, r0
 800179c:	000b      	movs	r3, r1
 800179e:	f7fe ff61 	bl	8000664 <__aeabi_dadd>
 80017a2:	0002      	movs	r2, r0
 80017a4:	000b      	movs	r3, r1
 80017a6:	61ba      	str	r2, [r7, #24]
 80017a8:	61fb      	str	r3, [r7, #28]
    double char_size_y = 2 * size_y; // Obliczenie rozmiaru znaku w osi Y.
 80017aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80017ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80017ae:	0002      	movs	r2, r0
 80017b0:	000b      	movs	r3, r1
 80017b2:	f7fe ff57 	bl	8000664 <__aeabi_dadd>
 80017b6:	0002      	movs	r2, r0
 80017b8:	000b      	movs	r3, r1
 80017ba:	613a      	str	r2, [r7, #16]
 80017bc:	617b      	str	r3, [r7, #20]

    // Wyświetlanie parametrów na ekranie OLED.
    GFX_draw_string(0, 54,"Positioning state: ",WHITE, BLACK, size_x, size_y);
 80017be:	6838      	ldr	r0, [r7, #0]
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	f7fe fe65 	bl	8000490 <__aeabi_d2uiz>
 80017c6:	0003      	movs	r3, r0
 80017c8:	b2dc      	uxtb	r4, r3
 80017ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80017cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80017ce:	f7fe fe5f 	bl	8000490 <__aeabi_d2uiz>
 80017d2:	0003      	movs	r3, r0
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	4a37      	ldr	r2, [pc, #220]	; (80018b4 <displayParameters+0x138>)
 80017d8:	9302      	str	r3, [sp, #8]
 80017da:	9401      	str	r4, [sp, #4]
 80017dc:	2300      	movs	r3, #0
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	2301      	movs	r3, #1
 80017e2:	2136      	movs	r1, #54	; 0x36
 80017e4:	2000      	movs	r0, #0
 80017e6:	f000 fa17 	bl	8001c18 <GFX_draw_string>
    GFX_draw_char(59, 34, positioningState, WHITE, BLACK, char_size_x, char_size_y);
 80017ea:	197b      	adds	r3, r7, r5
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	b2dd      	uxtb	r5, r3
 80017f0:	69b8      	ldr	r0, [r7, #24]
 80017f2:	69f9      	ldr	r1, [r7, #28]
 80017f4:	f7fe fe4c 	bl	8000490 <__aeabi_d2uiz>
 80017f8:	0003      	movs	r3, r0
 80017fa:	b2dc      	uxtb	r4, r3
 80017fc:	6938      	ldr	r0, [r7, #16]
 80017fe:	6979      	ldr	r1, [r7, #20]
 8001800:	f7fe fe46 	bl	8000490 <__aeabi_d2uiz>
 8001804:	0003      	movs	r3, r0
 8001806:	b2db      	uxtb	r3, r3
 8001808:	9302      	str	r3, [sp, #8]
 800180a:	9401      	str	r4, [sp, #4]
 800180c:	2300      	movs	r3, #0
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	2301      	movs	r3, #1
 8001812:	002a      	movs	r2, r5
 8001814:	2122      	movs	r1, #34	; 0x22
 8001816:	203b      	movs	r0, #59	; 0x3b
 8001818:	f000 f890 	bl	800193c <GFX_draw_char>
    GFX_draw_string(0, 27,"-------------------",WHITE, BLACK, size_x, size_y);
 800181c:	6838      	ldr	r0, [r7, #0]
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	f7fe fe36 	bl	8000490 <__aeabi_d2uiz>
 8001824:	0003      	movs	r3, r0
 8001826:	b2dc      	uxtb	r4, r3
 8001828:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800182a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800182c:	f7fe fe30 	bl	8000490 <__aeabi_d2uiz>
 8001830:	0003      	movs	r3, r0
 8001832:	b2db      	uxtb	r3, r3
 8001834:	4a20      	ldr	r2, [pc, #128]	; (80018b8 <displayParameters+0x13c>)
 8001836:	9302      	str	r3, [sp, #8]
 8001838:	9401      	str	r4, [sp, #4]
 800183a:	2300      	movs	r3, #0
 800183c:	9300      	str	r3, [sp, #0]
 800183e:	2301      	movs	r3, #1
 8001840:	211b      	movs	r1, #27
 8001842:	2000      	movs	r0, #0
 8001844:	f000 f9e8 	bl	8001c18 <GFX_draw_string>
    GFX_draw_string(0, 20,"Connection status: ",WHITE, BLACK, size_x, size_y);
 8001848:	6838      	ldr	r0, [r7, #0]
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	f7fe fe20 	bl	8000490 <__aeabi_d2uiz>
 8001850:	0003      	movs	r3, r0
 8001852:	b2dc      	uxtb	r4, r3
 8001854:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001856:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001858:	f7fe fe1a 	bl	8000490 <__aeabi_d2uiz>
 800185c:	0003      	movs	r3, r0
 800185e:	b2db      	uxtb	r3, r3
 8001860:	4a16      	ldr	r2, [pc, #88]	; (80018bc <displayParameters+0x140>)
 8001862:	9302      	str	r3, [sp, #8]
 8001864:	9401      	str	r4, [sp, #4]
 8001866:	2300      	movs	r3, #0
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	2301      	movs	r3, #1
 800186c:	2114      	movs	r1, #20
 800186e:	2000      	movs	r0, #0
 8001870:	f000 f9d2 	bl	8001c18 <GFX_draw_string>
    GFX_draw_char(59, 1, receivingState, WHITE, BLACK, char_size_x, char_size_y);
 8001874:	19bb      	adds	r3, r7, r6
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	b2dd      	uxtb	r5, r3
 800187a:	69b8      	ldr	r0, [r7, #24]
 800187c:	69f9      	ldr	r1, [r7, #28]
 800187e:	f7fe fe07 	bl	8000490 <__aeabi_d2uiz>
 8001882:	0003      	movs	r3, r0
 8001884:	b2dc      	uxtb	r4, r3
 8001886:	6938      	ldr	r0, [r7, #16]
 8001888:	6979      	ldr	r1, [r7, #20]
 800188a:	f7fe fe01 	bl	8000490 <__aeabi_d2uiz>
 800188e:	0003      	movs	r3, r0
 8001890:	b2db      	uxtb	r3, r3
 8001892:	9302      	str	r3, [sp, #8]
 8001894:	9401      	str	r4, [sp, #4]
 8001896:	2300      	movs	r3, #0
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	2301      	movs	r3, #1
 800189c:	002a      	movs	r2, r5
 800189e:	2101      	movs	r1, #1
 80018a0:	203b      	movs	r0, #59	; 0x3b
 80018a2:	f000 f84b 	bl	800193c <GFX_draw_char>

    SSD1306_display_repaint(); // Odświeżenie wyświetlacza OLED.
 80018a6:	f000 ff71 	bl	800278c <SSD1306_display_repaint>

}
 80018aa:	46c0      	nop			; (mov r8, r8)
 80018ac:	46bd      	mov	sp, r7
 80018ae:	b009      	add	sp, #36	; 0x24
 80018b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	0800a118 	.word	0x0800a118
 80018b8:	0800a12c 	.word	0x0800a12c
 80018bc:	0800a140 	.word	0x0800a140

080018c0 <displayState>:

// Funkcja do wyświetlania stanu na ekranie OLED.
// Parametry:
// - int stateMemory[]: tablica stanów.
// Zwraca: stan wyświetlany na ekranie.
char displayState(int stateMemory[]){
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
        STATE_2 = '2',
        STATE_3 = '3'
    };

    // Sprawdzenie stanu i przypisanie odpowiedniego znaku dla wyświetlenia na ekranie OLED.
    if (stateMemory[0] == 1 && stateMemory[1] == 0){
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d109      	bne.n	80018e4 <displayState+0x24>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3304      	adds	r3, #4
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d104      	bne.n	80018e4 <displayState+0x24>
        positioningState = STATE_2; // Ustawienie stanu 2.
 80018da:	230f      	movs	r3, #15
 80018dc:	18fb      	adds	r3, r7, r3
 80018de:	2232      	movs	r2, #50	; 0x32
 80018e0:	701a      	strb	r2, [r3, #0]
 80018e2:	e003      	b.n	80018ec <displayState+0x2c>
    }
    else {
        positioningState = STATE_1; // Ustawienie stanu 1.
 80018e4:	230f      	movs	r3, #15
 80018e6:	18fb      	adds	r3, r7, r3
 80018e8:	2231      	movs	r2, #49	; 0x31
 80018ea:	701a      	strb	r2, [r3, #0]
    }

    return positioningState; // Zwrócenie stanu wyświetlanego na ekranie.
 80018ec:	230f      	movs	r3, #15
 80018ee:	18fb      	adds	r3, r7, r3
 80018f0:	781b      	ldrb	r3, [r3, #0]
}
 80018f2:	0018      	movs	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	b004      	add	sp, #16
 80018f8:	bd80      	pop	{r7, pc}

080018fa <togglePositioningState>:

// Funkcja do przełączania stanu pozycjonowania.
// Parametry:
// - int stateMemory[2]: tablica przechowująca stany.
void togglePositioningState(int stateMemory[2]) {
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]

    if (stateMemory[0] == 0) {
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d103      	bne.n	8001912 <togglePositioningState+0x18>
        stateMemory[0] = 1; // Ustawienie stanu 1.
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2201      	movs	r2, #1
 800190e:	601a      	str	r2, [r3, #0]
        stateMemory[1] = 1; // Ustawienie stanu 2.
    } else {
        stateMemory[0] = 0; // Powrót do stanu 0.
        stateMemory[1] = 0; // Powrót do stanu 0.
    }
}
 8001910:	e010      	b.n	8001934 <togglePositioningState+0x3a>
    } else if (stateMemory[1] == 0) {
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3304      	adds	r3, #4
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d104      	bne.n	8001926 <togglePositioningState+0x2c>
        stateMemory[1] = 1; // Ustawienie stanu 2.
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3304      	adds	r3, #4
 8001920:	2201      	movs	r2, #1
 8001922:	601a      	str	r2, [r3, #0]
}
 8001924:	e006      	b.n	8001934 <togglePositioningState+0x3a>
        stateMemory[0] = 0; // Powrót do stanu 0.
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
        stateMemory[1] = 0; // Powrót do stanu 0.
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3304      	adds	r3, #4
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
}
 8001934:	46c0      	nop			; (mov r8, r8)
 8001936:	46bd      	mov	sp, r7
 8001938:	b002      	add	sp, #8
 800193a:	bd80      	pop	{r7, pc}

0800193c <GFX_draw_char>:
    @param    size_x Powiększenie czcionki w osi X, 1 oznacza 'oryginalny' rozmiar
    @param    size_y Powiększenie czcionki w osi Y, 1 oznacza 'oryginalny' rozmiar
*/
/**************************************************************************/
void GFX_draw_char(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y)
{
 800193c:	b5b0      	push	{r4, r5, r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af02      	add	r7, sp, #8
 8001942:	0005      	movs	r5, r0
 8001944:	000c      	movs	r4, r1
 8001946:	0010      	movs	r0, r2
 8001948:	0019      	movs	r1, r3
 800194a:	1dbb      	adds	r3, r7, #6
 800194c:	1c2a      	adds	r2, r5, #0
 800194e:	801a      	strh	r2, [r3, #0]
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	1c22      	adds	r2, r4, #0
 8001954:	801a      	strh	r2, [r3, #0]
 8001956:	1cfb      	adds	r3, r7, #3
 8001958:	1c02      	adds	r2, r0, #0
 800195a:	701a      	strb	r2, [r3, #0]
 800195c:	003b      	movs	r3, r7
 800195e:	1c0a      	adds	r2, r1, #0
 8001960:	801a      	strh	r2, [r3, #0]
	// Zmienne iteracyjne i od iterate
    int8_t i, j;
    uint8_t line;

    // Jeśli znak wykracza poza obszar wyświetlacza, funkcja nic nie robi
    if((x >= WIDTH) || (y >= HEIGHT) || ((x + 6 * size_x - 1) < 0) || ((y + 8 * size_y - 1) < 0))
 8001962:	1dbb      	adds	r3, r7, #6
 8001964:	2200      	movs	r2, #0
 8001966:	5e9b      	ldrsh	r3, [r3, r2]
 8001968:	2b7f      	cmp	r3, #127	; 0x7f
 800196a:	dd00      	ble.n	800196e <GFX_draw_char+0x32>
 800196c:	e14d      	b.n	8001c0a <GFX_draw_char+0x2ce>
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	2200      	movs	r2, #0
 8001972:	5e9b      	ldrsh	r3, [r3, r2]
 8001974:	2b3f      	cmp	r3, #63	; 0x3f
 8001976:	dd00      	ble.n	800197a <GFX_draw_char+0x3e>
 8001978:	e147      	b.n	8001c0a <GFX_draw_char+0x2ce>
 800197a:	1dbb      	adds	r3, r7, #6
 800197c:	2100      	movs	r1, #0
 800197e:	5e59      	ldrsh	r1, [r3, r1]
 8001980:	2324      	movs	r3, #36	; 0x24
 8001982:	18fb      	adds	r3, r7, r3
 8001984:	781a      	ldrb	r2, [r3, #0]
 8001986:	0013      	movs	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	189b      	adds	r3, r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	18cb      	adds	r3, r1, r3
 8001990:	2b00      	cmp	r3, #0
 8001992:	dc00      	bgt.n	8001996 <GFX_draw_char+0x5a>
 8001994:	e139      	b.n	8001c0a <GFX_draw_char+0x2ce>
 8001996:	1d3b      	adds	r3, r7, #4
 8001998:	2200      	movs	r2, #0
 800199a:	5e9a      	ldrsh	r2, [r3, r2]
 800199c:	2328      	movs	r3, #40	; 0x28
 800199e:	18fb      	adds	r3, r7, r3
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	18d3      	adds	r3, r2, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	dc00      	bgt.n	80019ac <GFX_draw_char+0x70>
 80019aa:	e12e      	b.n	8001c0a <GFX_draw_char+0x2ce>
    {
        return;
    }

    // Iteracja przez 5 kolumn bitmapy znaku
    for(i = 0; i < 5; i++)
 80019ac:	230f      	movs	r3, #15
 80019ae:	18fb      	adds	r3, r7, r3
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
 80019b4:	e0e0      	b.n	8001b78 <GFX_draw_char+0x23c>
    {
        line = (*(const unsigned char *)(&font[c * 5 + i])); // Pobranie kolumny bitmapy
 80019b6:	1cfb      	adds	r3, r7, #3
 80019b8:	781a      	ldrb	r2, [r3, #0]
 80019ba:	0013      	movs	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	189a      	adds	r2, r3, r2
 80019c0:	230f      	movs	r3, #15
 80019c2:	18fb      	adds	r3, r7, r3
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	b25b      	sxtb	r3, r3
 80019c8:	18d2      	adds	r2, r2, r3
 80019ca:	230d      	movs	r3, #13
 80019cc:	18fb      	adds	r3, r7, r3
 80019ce:	4991      	ldr	r1, [pc, #580]	; (8001c14 <GFX_draw_char+0x2d8>)
 80019d0:	5c8a      	ldrb	r2, [r1, r2]
 80019d2:	701a      	strb	r2, [r3, #0]
        for(j = 7; j >= 0; j--, line >>= 1) // Iteracja przez 8 pikseli w kolumnie
 80019d4:	230e      	movs	r3, #14
 80019d6:	18fb      	adds	r3, r7, r3
 80019d8:	2207      	movs	r2, #7
 80019da:	701a      	strb	r2, [r3, #0]
 80019dc:	e0bd      	b.n	8001b5a <GFX_draw_char+0x21e>
        {
            if(line & 1) // Jeśli bit jest ustawiony, rysujemy piksel
 80019de:	230d      	movs	r3, #13
 80019e0:	18fb      	adds	r3, r7, r3
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2201      	movs	r2, #1
 80019e6:	4013      	ands	r3, r2
 80019e8:	d050      	beq.n	8001a8c <GFX_draw_char+0x150>
            {
                if(size_x == 1 && size_y == 1)
 80019ea:	2324      	movs	r3, #36	; 0x24
 80019ec:	18fb      	adds	r3, r7, r3
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d11e      	bne.n	8001a32 <GFX_draw_char+0xf6>
 80019f4:	2328      	movs	r3, #40	; 0x28
 80019f6:	18fb      	adds	r3, r7, r3
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d119      	bne.n	8001a32 <GFX_draw_char+0xf6>
                {
                    SSD1306_draw_pixel(x + i, y + j, color);
 80019fe:	230f      	movs	r3, #15
 8001a00:	18fb      	adds	r3, r7, r3
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	b25b      	sxtb	r3, r3
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	1dbb      	adds	r3, r7, #6
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	18d3      	adds	r3, r2, r3
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	b218      	sxth	r0, r3
 8001a12:	230e      	movs	r3, #14
 8001a14:	18fb      	adds	r3, r7, r3
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	b25b      	sxtb	r3, r3
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	1d3b      	adds	r3, r7, #4
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	18d3      	adds	r3, r2, r3
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	b219      	sxth	r1, r3
 8001a26:	003b      	movs	r3, r7
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	001a      	movs	r2, r3
 8001a2c:	f000 fae2 	bl	8001ff4 <SSD1306_draw_pixel>
 8001a30:	e084      	b.n	8001b3c <GFX_draw_char+0x200>
                }
                else
                {
                    GFX_draw_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, color);
 8001a32:	230f      	movs	r3, #15
 8001a34:	18fb      	adds	r3, r7, r3
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	b25b      	sxtb	r3, r3
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	2424      	movs	r4, #36	; 0x24
 8001a3e:	193a      	adds	r2, r7, r4
 8001a40:	7812      	ldrb	r2, [r2, #0]
 8001a42:	b292      	uxth	r2, r2
 8001a44:	4353      	muls	r3, r2
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	1dbb      	adds	r3, r7, #6
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	18d3      	adds	r3, r2, r3
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	b218      	sxth	r0, r3
 8001a52:	230e      	movs	r3, #14
 8001a54:	18fb      	adds	r3, r7, r3
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	b25b      	sxtb	r3, r3
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	2528      	movs	r5, #40	; 0x28
 8001a5e:	197a      	adds	r2, r7, r5
 8001a60:	7812      	ldrb	r2, [r2, #0]
 8001a62:	b292      	uxth	r2, r2
 8001a64:	4353      	muls	r3, r2
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	18d3      	adds	r3, r2, r3
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	b219      	sxth	r1, r3
 8001a72:	193b      	adds	r3, r7, r4
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	b21a      	sxth	r2, r3
 8001a78:	197b      	adds	r3, r7, r5
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	b21c      	sxth	r4, r3
 8001a7e:	003b      	movs	r3, r7
 8001a80:	881b      	ldrh	r3, [r3, #0]
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	0023      	movs	r3, r4
 8001a86:	f000 f91e 	bl	8001cc6 <GFX_draw_fill_rect>
 8001a8a:	e057      	b.n	8001b3c <GFX_draw_char+0x200>
                }
            }
            else if(bg != color) // Jeśli tło nie jest takie samo jak kolor, rysujemy tło
 8001a8c:	2420      	movs	r4, #32
 8001a8e:	193b      	adds	r3, r7, r4
 8001a90:	0039      	movs	r1, r7
 8001a92:	881a      	ldrh	r2, [r3, #0]
 8001a94:	880b      	ldrh	r3, [r1, #0]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d050      	beq.n	8001b3c <GFX_draw_char+0x200>
            {
                if(size_x == 1 && size_y == 1)
 8001a9a:	2324      	movs	r3, #36	; 0x24
 8001a9c:	18fb      	adds	r3, r7, r3
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d11e      	bne.n	8001ae2 <GFX_draw_char+0x1a6>
 8001aa4:	2328      	movs	r3, #40	; 0x28
 8001aa6:	18fb      	adds	r3, r7, r3
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d119      	bne.n	8001ae2 <GFX_draw_char+0x1a6>
                {
                    SSD1306_draw_pixel(x + i, y + j, bg);
 8001aae:	230f      	movs	r3, #15
 8001ab0:	18fb      	adds	r3, r7, r3
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	b25b      	sxtb	r3, r3
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	1dbb      	adds	r3, r7, #6
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	18d3      	adds	r3, r2, r3
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	b218      	sxth	r0, r3
 8001ac2:	230e      	movs	r3, #14
 8001ac4:	18fb      	adds	r3, r7, r3
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	b25b      	sxtb	r3, r3
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	881b      	ldrh	r3, [r3, #0]
 8001ad0:	18d3      	adds	r3, r2, r3
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	b219      	sxth	r1, r3
 8001ad6:	193b      	adds	r3, r7, r4
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	001a      	movs	r2, r3
 8001adc:	f000 fa8a 	bl	8001ff4 <SSD1306_draw_pixel>
 8001ae0:	e02c      	b.n	8001b3c <GFX_draw_char+0x200>
                }
                else
                {
                    GFX_draw_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8001ae2:	230f      	movs	r3, #15
 8001ae4:	18fb      	adds	r3, r7, r3
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	b25b      	sxtb	r3, r3
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	2424      	movs	r4, #36	; 0x24
 8001aee:	193a      	adds	r2, r7, r4
 8001af0:	7812      	ldrb	r2, [r2, #0]
 8001af2:	b292      	uxth	r2, r2
 8001af4:	4353      	muls	r3, r2
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	1dbb      	adds	r3, r7, #6
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	18d3      	adds	r3, r2, r3
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	b218      	sxth	r0, r3
 8001b02:	230e      	movs	r3, #14
 8001b04:	18fb      	adds	r3, r7, r3
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	b25b      	sxtb	r3, r3
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	2528      	movs	r5, #40	; 0x28
 8001b0e:	197a      	adds	r2, r7, r5
 8001b10:	7812      	ldrb	r2, [r2, #0]
 8001b12:	b292      	uxth	r2, r2
 8001b14:	4353      	muls	r3, r2
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	18d3      	adds	r3, r2, r3
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	b219      	sxth	r1, r3
 8001b22:	193b      	adds	r3, r7, r4
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	b21a      	sxth	r2, r3
 8001b28:	197b      	adds	r3, r7, r5
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	b21c      	sxth	r4, r3
 8001b2e:	2320      	movs	r3, #32
 8001b30:	18fb      	adds	r3, r7, r3
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	0023      	movs	r3, r4
 8001b38:	f000 f8c5 	bl	8001cc6 <GFX_draw_fill_rect>
        for(j = 7; j >= 0; j--, line >>= 1) // Iteracja przez 8 pikseli w kolumnie
 8001b3c:	210e      	movs	r1, #14
 8001b3e:	187b      	adds	r3, r7, r1
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	b25b      	sxtb	r3, r3
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	3b01      	subs	r3, #1
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	187b      	adds	r3, r7, r1
 8001b4c:	701a      	strb	r2, [r3, #0]
 8001b4e:	220d      	movs	r2, #13
 8001b50:	18bb      	adds	r3, r7, r2
 8001b52:	18ba      	adds	r2, r7, r2
 8001b54:	7812      	ldrb	r2, [r2, #0]
 8001b56:	0852      	lsrs	r2, r2, #1
 8001b58:	701a      	strb	r2, [r3, #0]
 8001b5a:	230e      	movs	r3, #14
 8001b5c:	18fb      	adds	r3, r7, r3
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b7f      	cmp	r3, #127	; 0x7f
 8001b62:	d800      	bhi.n	8001b66 <GFX_draw_char+0x22a>
 8001b64:	e73b      	b.n	80019de <GFX_draw_char+0xa2>
    for(i = 0; i < 5; i++)
 8001b66:	210f      	movs	r1, #15
 8001b68:	187b      	adds	r3, r7, r1
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	b25b      	sxtb	r3, r3
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	3301      	adds	r3, #1
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	187b      	adds	r3, r7, r1
 8001b76:	701a      	strb	r2, [r3, #0]
 8001b78:	230f      	movs	r3, #15
 8001b7a:	18fb      	adds	r3, r7, r3
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	b25b      	sxtb	r3, r3
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	dc00      	bgt.n	8001b86 <GFX_draw_char+0x24a>
 8001b84:	e717      	b.n	80019b6 <GFX_draw_char+0x7a>
            }
        }
    }

    // Jeśli tło nie jest takie samo jak kolor, rysujemy pionową linię w ostatniej kolumnie
    if(bg != color)
 8001b86:	2420      	movs	r4, #32
 8001b88:	193b      	adds	r3, r7, r4
 8001b8a:	0039      	movs	r1, r7
 8001b8c:	881a      	ldrh	r2, [r3, #0]
 8001b8e:	880b      	ldrh	r3, [r1, #0]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d03b      	beq.n	8001c0c <GFX_draw_char+0x2d0>
    {
        if(size_x == 1 && size_y == 1)
 8001b94:	2324      	movs	r3, #36	; 0x24
 8001b96:	18fb      	adds	r3, r7, r3
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d113      	bne.n	8001bc6 <GFX_draw_char+0x28a>
 8001b9e:	2328      	movs	r3, #40	; 0x28
 8001ba0:	18fb      	adds	r3, r7, r3
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d10e      	bne.n	8001bc6 <GFX_draw_char+0x28a>
        {
            SSD1306_draw_fast_vline(x + 5, y, 8, bg);
 8001ba8:	1dbb      	adds	r3, r7, #6
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	3305      	adds	r3, #5
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	b218      	sxth	r0, r3
 8001bb2:	193b      	adds	r3, r7, r4
 8001bb4:	881a      	ldrh	r2, [r3, #0]
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	2100      	movs	r1, #0
 8001bba:	5e59      	ldrsh	r1, [r3, r1]
 8001bbc:	0013      	movs	r3, r2
 8001bbe:	2208      	movs	r2, #8
 8001bc0:	f000 fbea 	bl	8002398 <SSD1306_draw_fast_vline>
 8001bc4:	e022      	b.n	8001c0c <GFX_draw_char+0x2d0>
        }
        else
        {
            GFX_draw_fill_rect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 8001bc6:	2124      	movs	r1, #36	; 0x24
 8001bc8:	187b      	adds	r3, r7, r1
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	1c1a      	adds	r2, r3, #0
 8001bd0:	0092      	lsls	r2, r2, #2
 8001bd2:	18d3      	adds	r3, r2, r3
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	1dbb      	adds	r3, r7, #6
 8001bd8:	881b      	ldrh	r3, [r3, #0]
 8001bda:	18d3      	adds	r3, r2, r3
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	b218      	sxth	r0, r3
 8001be0:	187b      	adds	r3, r7, r1
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	b21a      	sxth	r2, r3
 8001be6:	2328      	movs	r3, #40	; 0x28
 8001be8:	18fb      	adds	r3, r7, r3
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	b21c      	sxth	r4, r3
 8001bf4:	1d3b      	adds	r3, r7, #4
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	5e59      	ldrsh	r1, [r3, r1]
 8001bfa:	2320      	movs	r3, #32
 8001bfc:	18fb      	adds	r3, r7, r3
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	0023      	movs	r3, r4
 8001c04:	f000 f85f 	bl	8001cc6 <GFX_draw_fill_rect>
 8001c08:	e000      	b.n	8001c0c <GFX_draw_char+0x2d0>
        return;
 8001c0a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	b004      	add	sp, #16
 8001c10:	bdb0      	pop	{r4, r5, r7, pc}
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	0800a154 	.word	0x0800a154

08001c18 <GFX_draw_string>:
    @param    size_x Powiększenie czcionki w osi X, 1 oznacza 'oryginalny' rozmiar
    @param    size_y Powiększenie czcionki w osi Y, 1 oznacza 'oryginalny' rozmiar
*/
/**************************************************************************/
void GFX_draw_string(int16_t x, int16_t y, unsigned char * c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y)
{
 8001c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c1a:	b08b      	sub	sp, #44	; 0x2c
 8001c1c:	af04      	add	r7, sp, #16
 8001c1e:	0004      	movs	r4, r0
 8001c20:	0008      	movs	r0, r1
 8001c22:	60ba      	str	r2, [r7, #8]
 8001c24:	0019      	movs	r1, r3
 8001c26:	230e      	movs	r3, #14
 8001c28:	18fb      	adds	r3, r7, r3
 8001c2a:	1c22      	adds	r2, r4, #0
 8001c2c:	801a      	strh	r2, [r3, #0]
 8001c2e:	230c      	movs	r3, #12
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	1c02      	adds	r2, r0, #0
 8001c34:	801a      	strh	r2, [r3, #0]
 8001c36:	1dbb      	adds	r3, r7, #6
 8001c38:	1c0a      	adds	r2, r1, #0
 8001c3a:	801a      	strh	r2, [r3, #0]
    uint8_t offset = 0;
 8001c3c:	2317      	movs	r3, #23
 8001c3e:	18fb      	adds	r3, r7, r3
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
    // Iteracja przez każdy znak w ciągu znaków
    while(*c)
 8001c44:	e036      	b.n	8001cb4 <GFX_draw_string+0x9c>
    {
        GFX_draw_char(x+offset, y, *c, color, bg, size_x, size_y); // Rysowanie pojedynczego znaku
 8001c46:	2517      	movs	r5, #23
 8001c48:	603d      	str	r5, [r7, #0]
 8001c4a:	197b      	adds	r3, r7, r5
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	230e      	movs	r3, #14
 8001c52:	18fb      	adds	r3, r7, r3
 8001c54:	881b      	ldrh	r3, [r3, #0]
 8001c56:	18d3      	adds	r3, r2, r3
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	b218      	sxth	r0, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	781a      	ldrb	r2, [r3, #0]
 8001c60:	1dbb      	adds	r3, r7, #6
 8001c62:	881c      	ldrh	r4, [r3, #0]
 8001c64:	230c      	movs	r3, #12
 8001c66:	18fb      	adds	r3, r7, r3
 8001c68:	2100      	movs	r1, #0
 8001c6a:	5e59      	ldrsh	r1, [r3, r1]
 8001c6c:	2330      	movs	r3, #48	; 0x30
 8001c6e:	2508      	movs	r5, #8
 8001c70:	195e      	adds	r6, r3, r5
 8001c72:	19f3      	adds	r3, r6, r7
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	9302      	str	r3, [sp, #8]
 8001c78:	262c      	movs	r6, #44	; 0x2c
 8001c7a:	1973      	adds	r3, r6, r5
 8001c7c:	19db      	adds	r3, r3, r7
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	9301      	str	r3, [sp, #4]
 8001c82:	2328      	movs	r3, #40	; 0x28
 8001c84:	195b      	adds	r3, r3, r5
 8001c86:	19db      	adds	r3, r3, r7
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	0023      	movs	r3, r4
 8001c8e:	f7ff fe55 	bl	800193c <GFX_draw_char>
        offset += (5 + 2) * size_x; // Przesunięcie do następnego znaku (5 pikseli na znak + 1 piksel odstępu)
 8001c92:	002b      	movs	r3, r5
 8001c94:	18f3      	adds	r3, r6, r3
 8001c96:	19db      	adds	r3, r3, r7
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	1c1a      	adds	r2, r3, #0
 8001c9c:	00d2      	lsls	r2, r2, #3
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	b2d9      	uxtb	r1, r3
 8001ca2:	683d      	ldr	r5, [r7, #0]
 8001ca4:	197b      	adds	r3, r7, r5
 8001ca6:	197a      	adds	r2, r7, r5
 8001ca8:	7812      	ldrb	r2, [r2, #0]
 8001caa:	188a      	adds	r2, r1, r2
 8001cac:	701a      	strb	r2, [r3, #0]
        c++;
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	60bb      	str	r3, [r7, #8]
    while(*c)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1c4      	bne.n	8001c46 <GFX_draw_string+0x2e>
    }
}
 8001cbc:	46c0      	nop			; (mov r8, r8)
 8001cbe:	46c0      	nop			; (mov r8, r8)
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	b007      	add	sp, #28
 8001cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cc6 <GFX_draw_fill_rect>:
    @param    h      Wysokość prostokąta w pikselach
    @param    color  16-bitowy kolor (5-6-5) do wypełnienia prostokąta
*/
/**************************************************************************/
void GFX_draw_fill_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8001cc6:	b5b0      	push	{r4, r5, r7, lr}
 8001cc8:	b084      	sub	sp, #16
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	0005      	movs	r5, r0
 8001cce:	000c      	movs	r4, r1
 8001cd0:	0010      	movs	r0, r2
 8001cd2:	0019      	movs	r1, r3
 8001cd4:	1dbb      	adds	r3, r7, #6
 8001cd6:	1c2a      	adds	r2, r5, #0
 8001cd8:	801a      	strh	r2, [r3, #0]
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	1c22      	adds	r2, r4, #0
 8001cde:	801a      	strh	r2, [r3, #0]
 8001ce0:	1cbb      	adds	r3, r7, #2
 8001ce2:	1c02      	adds	r2, r0, #0
 8001ce4:	801a      	strh	r2, [r3, #0]
 8001ce6:	003b      	movs	r3, r7
 8001ce8:	1c0a      	adds	r2, r1, #0
 8001cea:	801a      	strh	r2, [r3, #0]
    // Iteracja przez każdy piksel w szerokości prostokąta
    for(int16_t i = x; i < x + w; i++)
 8001cec:	230e      	movs	r3, #14
 8001cee:	18fb      	adds	r3, r7, r3
 8001cf0:	1dba      	adds	r2, r7, #6
 8001cf2:	8812      	ldrh	r2, [r2, #0]
 8001cf4:	801a      	strh	r2, [r3, #0]
 8001cf6:	e018      	b.n	8001d2a <GFX_draw_fill_rect+0x64>
    {
        SSD1306_draw_fast_vline(i, y, h, color); // Rysowanie pionowej linii o wysokości 'h' i kolorze 'color'
 8001cf8:	2320      	movs	r3, #32
 8001cfa:	18fb      	adds	r3, r7, r3
 8001cfc:	881c      	ldrh	r4, [r3, #0]
 8001cfe:	003b      	movs	r3, r7
 8001d00:	2200      	movs	r2, #0
 8001d02:	5e9a      	ldrsh	r2, [r3, r2]
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	2100      	movs	r1, #0
 8001d08:	5e59      	ldrsh	r1, [r3, r1]
 8001d0a:	250e      	movs	r5, #14
 8001d0c:	197b      	adds	r3, r7, r5
 8001d0e:	2000      	movs	r0, #0
 8001d10:	5e18      	ldrsh	r0, [r3, r0]
 8001d12:	0023      	movs	r3, r4
 8001d14:	f000 fb40 	bl	8002398 <SSD1306_draw_fast_vline>
    for(int16_t i = x; i < x + w; i++)
 8001d18:	0029      	movs	r1, r5
 8001d1a:	187b      	adds	r3, r7, r1
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	5e9b      	ldrsh	r3, [r3, r2]
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	3301      	adds	r3, #1
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	187b      	adds	r3, r7, r1
 8001d28:	801a      	strh	r2, [r3, #0]
 8001d2a:	230e      	movs	r3, #14
 8001d2c:	18fb      	adds	r3, r7, r3
 8001d2e:	2200      	movs	r2, #0
 8001d30:	5e9a      	ldrsh	r2, [r3, r2]
 8001d32:	1dbb      	adds	r3, r7, #6
 8001d34:	2100      	movs	r1, #0
 8001d36:	5e59      	ldrsh	r1, [r3, r1]
 8001d38:	1cbb      	adds	r3, r7, #2
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	5e1b      	ldrsh	r3, [r3, r0]
 8001d3e:	18cb      	adds	r3, r1, r3
 8001d40:	429a      	cmp	r2, r3
 8001d42:	dbd9      	blt.n	8001cf8 <GFX_draw_fill_rect+0x32>
    }
}
 8001d44:	46c0      	nop			; (mov r8, r8)
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	b004      	add	sp, #16
 8001d4c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001d50 <ManualSteering>:
// Dołączenie nagłówków plików nagłówkowych i pliku wykonującego ruchy serwomechanizmów.
#include "ManualSteering.h"
#include "ServoManager.h"

// Funkcja obsługująca sterowanie manualne na podstawie danych otrzymanych przez UART.
void ManualSteering(uint8_t rxData) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	0002      	movs	r2, r0
 8001d58:	1dfb      	adds	r3, r7, #7
 8001d5a:	701a      	strb	r2, [r3, #0]
    switch (rxData) {
 8001d5c:	1dfb      	adds	r3, r7, #7
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	3b41      	subs	r3, #65	; 0x41
 8001d62:	2b09      	cmp	r3, #9
 8001d64:	d851      	bhi.n	8001e0a <ManualSteering+0xba>
 8001d66:	009a      	lsls	r2, r3, #2
 8001d68:	4b2a      	ldr	r3, [pc, #168]	; (8001e14 <ManualSteering+0xc4>)
 8001d6a:	18d3      	adds	r3, r2, r3
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	469f      	mov	pc, r3
//        case 69: // Wartość ASCII litery 'E' to 69
//            setAngle(&htim3, TIM_CHANNEL_4, 1800, 0); // Ustawienie kąta na 180°
//            break;

    case 65: // Wartość ASCII litery 'A' to 65
        setAngle(&htim3, TIM_CHANNEL_4, 500, 0); // Ustawienie kąta na 0°
 8001d70:	23fa      	movs	r3, #250	; 0xfa
 8001d72:	005a      	lsls	r2, r3, #1
 8001d74:	4828      	ldr	r0, [pc, #160]	; (8001e18 <ManualSteering+0xc8>)
 8001d76:	2300      	movs	r3, #0
 8001d78:	210c      	movs	r1, #12
 8001d7a:	f000 fd49 	bl	8002810 <setAngle>
        break;
 8001d7e:	e045      	b.n	8001e0c <ManualSteering+0xbc>
    case 66: // Wartość ASCII litery 'B' to 66
        setAngle(&htim3, TIM_CHANNEL_4, 712, 0); // Ustawienie kąta na 45°
 8001d80:	23b2      	movs	r3, #178	; 0xb2
 8001d82:	009a      	lsls	r2, r3, #2
 8001d84:	4824      	ldr	r0, [pc, #144]	; (8001e18 <ManualSteering+0xc8>)
 8001d86:	2300      	movs	r3, #0
 8001d88:	210c      	movs	r1, #12
 8001d8a:	f000 fd41 	bl	8002810 <setAngle>
        break;
 8001d8e:	e03d      	b.n	8001e0c <ManualSteering+0xbc>
    case 67: // Wartość ASCII litery 'C' to 67
        setAngle(&htim3, TIM_CHANNEL_4, 924, 0); // Ustawienie kąta na 90°
 8001d90:	23e7      	movs	r3, #231	; 0xe7
 8001d92:	009a      	lsls	r2, r3, #2
 8001d94:	4820      	ldr	r0, [pc, #128]	; (8001e18 <ManualSteering+0xc8>)
 8001d96:	2300      	movs	r3, #0
 8001d98:	210c      	movs	r1, #12
 8001d9a:	f000 fd39 	bl	8002810 <setAngle>
        break;
 8001d9e:	e035      	b.n	8001e0c <ManualSteering+0xbc>
    case 68: // Wartość ASCII litery 'D' to 68
        setAngle(&htim3, TIM_CHANNEL_4, 1136, 0); // Ustawienie kąta na 135°
 8001da0:	238e      	movs	r3, #142	; 0x8e
 8001da2:	00da      	lsls	r2, r3, #3
 8001da4:	481c      	ldr	r0, [pc, #112]	; (8001e18 <ManualSteering+0xc8>)
 8001da6:	2300      	movs	r3, #0
 8001da8:	210c      	movs	r1, #12
 8001daa:	f000 fd31 	bl	8002810 <setAngle>
        break;
 8001dae:	e02d      	b.n	8001e0c <ManualSteering+0xbc>
    case 69: // Wartość ASCII litery 'E' to 69
        setAngle(&htim3, TIM_CHANNEL_4, 1350, 0); // Ustawienie kąta na 180°
 8001db0:	4a1a      	ldr	r2, [pc, #104]	; (8001e1c <ManualSteering+0xcc>)
 8001db2:	4819      	ldr	r0, [pc, #100]	; (8001e18 <ManualSteering+0xc8>)
 8001db4:	2300      	movs	r3, #0
 8001db6:	210c      	movs	r1, #12
 8001db8:	f000 fd2a 	bl	8002810 <setAngle>
        break;
 8001dbc:	e026      	b.n	8001e0c <ManualSteering+0xbc>

        // STEROWANE SERWEM NR. 2 - obracającym system w poziomie
        // Tutaj oprócz ograniczeń kątu obrotu serwa, dochodzi ograniczenie
        // mechaniczne - obudowa systemu, dlatego zakres jest mniejszy niż 0-180°
        case 70: // Wartość ASCII litery 'F' to 70
            setAngle(&htim3, TIM_CHANNEL_2, 1800, 0); // Ustawienie kąta na 0°
 8001dbe:	23e1      	movs	r3, #225	; 0xe1
 8001dc0:	00da      	lsls	r2, r3, #3
 8001dc2:	4815      	ldr	r0, [pc, #84]	; (8001e18 <ManualSteering+0xc8>)
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	2104      	movs	r1, #4
 8001dc8:	f000 fd22 	bl	8002810 <setAngle>
            break;
 8001dcc:	e01e      	b.n	8001e0c <ManualSteering+0xbc>
        case 71: // Wartość ASCII litery 'G' to 71
            setAngle(&htim3, TIM_CHANNEL_2, 1350, 0); // Ustawienie kąta na 45°
 8001dce:	4a13      	ldr	r2, [pc, #76]	; (8001e1c <ManualSteering+0xcc>)
 8001dd0:	4811      	ldr	r0, [pc, #68]	; (8001e18 <ManualSteering+0xc8>)
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	2104      	movs	r1, #4
 8001dd6:	f000 fd1b 	bl	8002810 <setAngle>
            break;
 8001dda:	e017      	b.n	8001e0c <ManualSteering+0xbc>
        case 72: // Wartość ASCII litery 'H' to 72
            setAngle(&htim3, TIM_CHANNEL_2, 900, 0); // Ustawienie kąta na 90°
 8001ddc:	23e1      	movs	r3, #225	; 0xe1
 8001dde:	009a      	lsls	r2, r3, #2
 8001de0:	480d      	ldr	r0, [pc, #52]	; (8001e18 <ManualSteering+0xc8>)
 8001de2:	2300      	movs	r3, #0
 8001de4:	2104      	movs	r1, #4
 8001de6:	f000 fd13 	bl	8002810 <setAngle>
            break;
 8001dea:	e00f      	b.n	8001e0c <ManualSteering+0xbc>
        case 73: // Wartość ASCII litery 'I' to 73
            setAngle(&htim3, TIM_CHANNEL_2, 450, 0); // Ustawienie kąta na 135°
 8001dec:	23e1      	movs	r3, #225	; 0xe1
 8001dee:	005a      	lsls	r2, r3, #1
 8001df0:	4809      	ldr	r0, [pc, #36]	; (8001e18 <ManualSteering+0xc8>)
 8001df2:	2300      	movs	r3, #0
 8001df4:	2104      	movs	r1, #4
 8001df6:	f000 fd0b 	bl	8002810 <setAngle>
            break;
 8001dfa:	e007      	b.n	8001e0c <ManualSteering+0xbc>
        case 74: // Wartość ASCII litery 'J' to 74
            setAngle(&htim3, TIM_CHANNEL_2, 0, 0); // Ustawienie kąta na 180°
 8001dfc:	4806      	ldr	r0, [pc, #24]	; (8001e18 <ManualSteering+0xc8>)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2200      	movs	r2, #0
 8001e02:	2104      	movs	r1, #4
 8001e04:	f000 fd04 	bl	8002810 <setAngle>
            break;
 8001e08:	e000      	b.n	8001e0c <ManualSteering+0xbc>

        default:
            // Nieznana komenda, można dodać obsługę błędów lub zignorować
            break;
 8001e0a:	46c0      	nop			; (mov r8, r8)
    }
}
 8001e0c:	46c0      	nop			; (mov r8, r8)
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	b002      	add	sp, #8
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	0800a654 	.word	0x0800a654
 8001e18:	20000234 	.word	0x20000234
 8001e1c:	00000546 	.word	0x00000546

08001e20 <platform_write>:

static uint8_t * buffer;
static uint8_t rotation;

static uint8_t platform_write(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af04      	add	r7, sp, #16
 8001e26:	6039      	str	r1, [r7, #0]
 8001e28:	0011      	movs	r1, r2
 8001e2a:	1dfb      	adds	r3, r7, #7
 8001e2c:	1c02      	adds	r2, r0, #0
 8001e2e:	701a      	strb	r2, [r3, #0]
 8001e30:	1d3b      	adds	r3, r7, #4
 8001e32:	1c0a      	adds	r2, r1, #0
 8001e34:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len, 100);
 8001e36:	1dfb      	adds	r3, r7, #7
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	4808      	ldr	r0, [pc, #32]	; (8001e60 <platform_write+0x40>)
 8001e3e:	2364      	movs	r3, #100	; 0x64
 8001e40:	9302      	str	r3, [sp, #8]
 8001e42:	1d3b      	adds	r3, r7, #4
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	9301      	str	r3, [sp, #4]
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	2178      	movs	r1, #120	; 0x78
 8001e50:	f002 fe80 	bl	8004b54 <HAL_I2C_Mem_Write>
	return 0;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	0018      	movs	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	b002      	add	sp, #8
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	20000124 	.word	0x20000124

08001e64 <platform_write_dma>:

static uint8_t platform_write_dma(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af02      	add	r7, sp, #8
 8001e6a:	6039      	str	r1, [r7, #0]
 8001e6c:	0011      	movs	r1, r2
 8001e6e:	1dfb      	adds	r3, r7, #7
 8001e70:	1c02      	adds	r2, r0, #0
 8001e72:	701a      	strb	r2, [r3, #0]
 8001e74:	1d3b      	adds	r3, r7, #4
 8001e76:	1c0a      	adds	r2, r1, #0
 8001e78:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len);
 8001e7a:	1dfb      	adds	r3, r7, #7
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	4807      	ldr	r0, [pc, #28]	; (8001ea0 <platform_write_dma+0x3c>)
 8001e82:	1d3b      	adds	r3, r7, #4
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	9301      	str	r3, [sp, #4]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	2178      	movs	r1, #120	; 0x78
 8001e90:	f002 ff8e 	bl	8004db0 <HAL_I2C_Mem_Write_DMA>
	return 0;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	0018      	movs	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	b002      	add	sp, #8
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	20000124 	.word	0x20000124

08001ea4 <SSD1306_send_com>:

static void SSD1306_send_com(uint8_t c)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	0002      	movs	r2, r0
 8001eac:	1dfb      	adds	r3, r7, #7
 8001eae:	701a      	strb	r2, [r3, #0]
	platform_write(0x00, &c, 1);
 8001eb0:	1dfb      	adds	r3, r7, #7
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	0019      	movs	r1, r3
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f7ff ffb2 	bl	8001e20 <platform_write>
}
 8001ebc:	46c0      	nop			; (mov r8, r8)
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	b002      	add	sp, #8
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <SSD1306_init>:

bool SSD1306_init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
  uint8_t comPins = 0x02, contrast = 0x8F, vccstate = SSD1306_SWITCHCAPVCC;
 8001eca:	1dfb      	adds	r3, r7, #7
 8001ecc:	2202      	movs	r2, #2
 8001ece:	701a      	strb	r2, [r3, #0]
 8001ed0:	1dbb      	adds	r3, r7, #6
 8001ed2:	228f      	movs	r2, #143	; 0x8f
 8001ed4:	701a      	strb	r2, [r3, #0]
 8001ed6:	1d7b      	adds	r3, r7, #5
 8001ed8:	2202      	movs	r2, #2
 8001eda:	701a      	strb	r2, [r3, #0]

  if ((!buffer) && !(buffer = (uint8_t *)malloc(SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8))))
 8001edc:	4b44      	ldr	r3, [pc, #272]	; (8001ff0 <SSD1306_init+0x12c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10e      	bne.n	8001f02 <SSD1306_init+0x3e>
 8001ee4:	2380      	movs	r3, #128	; 0x80
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f008 f805 	bl	8009ef8 <malloc>
 8001eee:	0003      	movs	r3, r0
 8001ef0:	001a      	movs	r2, r3
 8001ef2:	4b3f      	ldr	r3, [pc, #252]	; (8001ff0 <SSD1306_init+0x12c>)
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	4b3e      	ldr	r3, [pc, #248]	; (8001ff0 <SSD1306_init+0x12c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <SSD1306_init+0x3e>
  {
    return false;
 8001efe:	2300      	movs	r3, #0
 8001f00:	e071      	b.n	8001fe6 <SSD1306_init+0x122>
  }

  SSD1306_display_clear();
 8001f02:	f000 f983 	bl	800220c <SSD1306_display_clear>

  // Init sequence
  SSD1306_send_com(SSD1306_DISPLAYOFF);
 8001f06:	20ae      	movs	r0, #174	; 0xae
 8001f08:	f7ff ffcc 	bl	8001ea4 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETDISPLAYCLOCKDIV);
 8001f0c:	20d5      	movs	r0, #213	; 0xd5
 8001f0e:	f7ff ffc9 	bl	8001ea4 <SSD1306_send_com>
  SSD1306_send_com(0xE0);
 8001f12:	20e0      	movs	r0, #224	; 0xe0
 8001f14:	f7ff ffc6 	bl	8001ea4 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETMULTIPLEX);
 8001f18:	20a8      	movs	r0, #168	; 0xa8
 8001f1a:	f7ff ffc3 	bl	8001ea4 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_HEIGHT - 1);
 8001f1e:	203f      	movs	r0, #63	; 0x3f
 8001f20:	f7ff ffc0 	bl	8001ea4 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETDISPLAYOFFSET);
 8001f24:	20d3      	movs	r0, #211	; 0xd3
 8001f26:	f7ff ffbd 	bl	8001ea4 <SSD1306_send_com>
  SSD1306_send_com(0x00);
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	f7ff ffba 	bl	8001ea4 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETSTARTLINE | 0x00);
 8001f30:	2040      	movs	r0, #64	; 0x40
 8001f32:	f7ff ffb7 	bl	8001ea4 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_CHARGEPUMP);
 8001f36:	208d      	movs	r0, #141	; 0x8d
 8001f38:	f7ff ffb4 	bl	8001ea4 <SSD1306_send_com>

  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
 8001f3c:	1d7b      	adds	r3, r7, #5
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d101      	bne.n	8001f48 <SSD1306_init+0x84>
 8001f44:	2310      	movs	r3, #16
 8001f46:	e000      	b.n	8001f4a <SSD1306_init+0x86>
 8001f48:	2314      	movs	r3, #20
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	f7ff ffaa 	bl	8001ea4 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_MEMORYMODE);
 8001f50:	2020      	movs	r0, #32
 8001f52:	f7ff ffa7 	bl	8001ea4 <SSD1306_send_com>
  SSD1306_send_com(0x00);
 8001f56:	2000      	movs	r0, #0
 8001f58:	f7ff ffa4 	bl	8001ea4 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SEGREMAP | 0x10);
 8001f5c:	20b0      	movs	r0, #176	; 0xb0
 8001f5e:	f7ff ffa1 	bl	8001ea4 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_COMSCANDEC);
 8001f62:	20c8      	movs	r0, #200	; 0xc8
 8001f64:	f7ff ff9e 	bl	8001ea4 <SSD1306_send_com>
    comPins = 0x02;
    contrast = 0x8F;
  }
  else if ((SSD1306_WIDTH == 128) && (SSD1306_HEIGHT == 64))
  {
    comPins = 0x12;
 8001f68:	1dfb      	adds	r3, r7, #7
 8001f6a:	2212      	movs	r2, #18
 8001f6c:	701a      	strb	r2, [r3, #0]
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
 8001f6e:	1d7b      	adds	r3, r7, #5
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d101      	bne.n	8001f7a <SSD1306_init+0xb6>
 8001f76:	229f      	movs	r2, #159	; 0x9f
 8001f78:	e000      	b.n	8001f7c <SSD1306_init+0xb8>
 8001f7a:	22cf      	movs	r2, #207	; 0xcf
 8001f7c:	1dbb      	adds	r3, r7, #6
 8001f7e:	701a      	strb	r2, [r3, #0]
  {
    comPins = 0x2; // ada x12
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
  }

  SSD1306_send_com(SSD1306_SETCOMPINS);
 8001f80:	20da      	movs	r0, #218	; 0xda
 8001f82:	f7ff ff8f 	bl	8001ea4 <SSD1306_send_com>
  SSD1306_send_com(comPins);
 8001f86:	1dfb      	adds	r3, r7, #7
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	f7ff ff8a 	bl	8001ea4 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETCONTRAST);
 8001f90:	2081      	movs	r0, #129	; 0x81
 8001f92:	f7ff ff87 	bl	8001ea4 <SSD1306_send_com>
  SSD1306_send_com(contrast);
 8001f96:	1dbb      	adds	r3, r7, #6
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f7ff ff82 	bl	8001ea4 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETPRECHARGE);
 8001fa0:	20d9      	movs	r0, #217	; 0xd9
 8001fa2:	f7ff ff7f 	bl	8001ea4 <SSD1306_send_com>
  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
 8001fa6:	1d7b      	adds	r3, r7, #5
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d101      	bne.n	8001fb2 <SSD1306_init+0xee>
 8001fae:	2322      	movs	r3, #34	; 0x22
 8001fb0:	e000      	b.n	8001fb4 <SSD1306_init+0xf0>
 8001fb2:	23f1      	movs	r3, #241	; 0xf1
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	f7ff ff75 	bl	8001ea4 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETVCOMDETECT);
 8001fba:	20db      	movs	r0, #219	; 0xdb
 8001fbc:	f7ff ff72 	bl	8001ea4 <SSD1306_send_com>
  SSD1306_send_com(0x40);
 8001fc0:	2040      	movs	r0, #64	; 0x40
 8001fc2:	f7ff ff6f 	bl	8001ea4 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYALLON_RESUME);
 8001fc6:	20a4      	movs	r0, #164	; 0xa4
 8001fc8:	f7ff ff6c 	bl	8001ea4 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_NORMALDISPLAY);
 8001fcc:	20a6      	movs	r0, #166	; 0xa6
 8001fce:	f7ff ff69 	bl	8001ea4 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DEACTIVATE_SCROLL);
 8001fd2:	202e      	movs	r0, #46	; 0x2e
 8001fd4:	f7ff ff66 	bl	8001ea4 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYON);
 8001fd8:	20af      	movs	r0, #175	; 0xaf
 8001fda:	f7ff ff63 	bl	8001ea4 <SSD1306_send_com>

  SSD1306_set_rotation(SSD1306_HORIZONTAL_MODE2);
 8001fde:	2002      	movs	r0, #2
 8001fe0:	f000 fbfc 	bl	80027dc <SSD1306_set_rotation>
  return true;
 8001fe4:	2301      	movs	r3, #1
}
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	b002      	add	sp, #8
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	46c0      	nop			; (mov r8, r8)
 8001ff0:	20000078 	.word	0x20000078

08001ff4 <SSD1306_draw_pixel>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_pixel(int16_t x, int16_t y, uint16_t color)
{
 8001ff4:	b590      	push	{r4, r7, lr}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	0004      	movs	r4, r0
 8001ffc:	0008      	movs	r0, r1
 8001ffe:	0011      	movs	r1, r2
 8002000:	1dbb      	adds	r3, r7, #6
 8002002:	1c22      	adds	r2, r4, #0
 8002004:	801a      	strh	r2, [r3, #0]
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	1c02      	adds	r2, r0, #0
 800200a:	801a      	strh	r2, [r3, #0]
 800200c:	1cbb      	adds	r3, r7, #2
 800200e:	1c0a      	adds	r2, r1, #0
 8002010:	801a      	strh	r2, [r3, #0]
	if ((x >= 0) && (x < SSD1306_WIDTH) && (y >= 0) && (y < SSD1306_HEIGHT))
 8002012:	1dbb      	adds	r3, r7, #6
 8002014:	2200      	movs	r2, #0
 8002016:	5e9b      	ldrsh	r3, [r3, r2]
 8002018:	2b00      	cmp	r3, #0
 800201a:	da00      	bge.n	800201e <SSD1306_draw_pixel+0x2a>
 800201c:	e0f0      	b.n	8002200 <SSD1306_draw_pixel+0x20c>
 800201e:	1dbb      	adds	r3, r7, #6
 8002020:	2200      	movs	r2, #0
 8002022:	5e9b      	ldrsh	r3, [r3, r2]
 8002024:	2b7f      	cmp	r3, #127	; 0x7f
 8002026:	dd00      	ble.n	800202a <SSD1306_draw_pixel+0x36>
 8002028:	e0ea      	b.n	8002200 <SSD1306_draw_pixel+0x20c>
 800202a:	1d3b      	adds	r3, r7, #4
 800202c:	2200      	movs	r2, #0
 800202e:	5e9b      	ldrsh	r3, [r3, r2]
 8002030:	2b00      	cmp	r3, #0
 8002032:	da00      	bge.n	8002036 <SSD1306_draw_pixel+0x42>
 8002034:	e0e4      	b.n	8002200 <SSD1306_draw_pixel+0x20c>
 8002036:	1d3b      	adds	r3, r7, #4
 8002038:	2200      	movs	r2, #0
 800203a:	5e9b      	ldrsh	r3, [r3, r2]
 800203c:	2b3f      	cmp	r3, #63	; 0x3f
 800203e:	dd00      	ble.n	8002042 <SSD1306_draw_pixel+0x4e>
 8002040:	e0de      	b.n	8002200 <SSD1306_draw_pixel+0x20c>
	{
		/* Pixel is in-bounds. Rotate coordinates if needed. */
		switch (SSD1306_get_rotation())
 8002042:	f000 fbdb 	bl	80027fc <SSD1306_get_rotation>
 8002046:	0003      	movs	r3, r0
 8002048:	2b03      	cmp	r3, #3
 800204a:	d031      	beq.n	80020b0 <SSD1306_draw_pixel+0xbc>
 800204c:	dc4d      	bgt.n	80020ea <SSD1306_draw_pixel+0xf6>
 800204e:	2b01      	cmp	r3, #1
 8002050:	d002      	beq.n	8002058 <SSD1306_draw_pixel+0x64>
 8002052:	2b02      	cmp	r3, #2
 8002054:	d01d      	beq.n	8002092 <SSD1306_draw_pixel+0x9e>
 8002056:	e048      	b.n	80020ea <SSD1306_draw_pixel+0xf6>
		{
			case 1:
				ssd1306_swap(x, y);
 8002058:	1dbb      	adds	r3, r7, #6
 800205a:	1db9      	adds	r1, r7, #6
 800205c:	1d3a      	adds	r2, r7, #4
 800205e:	8809      	ldrh	r1, [r1, #0]
 8002060:	8812      	ldrh	r2, [r2, #0]
 8002062:	404a      	eors	r2, r1
 8002064:	801a      	strh	r2, [r3, #0]
 8002066:	1d3b      	adds	r3, r7, #4
 8002068:	1d39      	adds	r1, r7, #4
 800206a:	1dba      	adds	r2, r7, #6
 800206c:	8809      	ldrh	r1, [r1, #0]
 800206e:	8812      	ldrh	r2, [r2, #0]
 8002070:	404a      	eors	r2, r1
 8002072:	801a      	strh	r2, [r3, #0]
 8002074:	1dbb      	adds	r3, r7, #6
 8002076:	1db9      	adds	r1, r7, #6
 8002078:	1d3a      	adds	r2, r7, #4
 800207a:	8809      	ldrh	r1, [r1, #0]
 800207c:	8812      	ldrh	r2, [r2, #0]
 800207e:	404a      	eors	r2, r1
 8002080:	801a      	strh	r2, [r3, #0]
				x = SSD1306_WIDTH - x - 1;
 8002082:	1dbb      	adds	r3, r7, #6
 8002084:	881b      	ldrh	r3, [r3, #0]
 8002086:	227f      	movs	r2, #127	; 0x7f
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	b29a      	uxth	r2, r3
 800208c:	1dbb      	adds	r3, r7, #6
 800208e:	801a      	strh	r2, [r3, #0]
				break;
 8002090:	e02b      	b.n	80020ea <SSD1306_draw_pixel+0xf6>
			case 2:
				x = SSD1306_WIDTH - x - 1;
 8002092:	1dbb      	adds	r3, r7, #6
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	227f      	movs	r2, #127	; 0x7f
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	b29a      	uxth	r2, r3
 800209c:	1dbb      	adds	r3, r7, #6
 800209e:	801a      	strh	r2, [r3, #0]
				y = SSD1306_HEIGHT - y - 1;
 80020a0:	1d3b      	adds	r3, r7, #4
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	223f      	movs	r2, #63	; 0x3f
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	1d3b      	adds	r3, r7, #4
 80020ac:	801a      	strh	r2, [r3, #0]
				break;
 80020ae:	e01c      	b.n	80020ea <SSD1306_draw_pixel+0xf6>
			case 3:
				ssd1306_swap(x, y);
 80020b0:	1dbb      	adds	r3, r7, #6
 80020b2:	1db9      	adds	r1, r7, #6
 80020b4:	1d3a      	adds	r2, r7, #4
 80020b6:	8809      	ldrh	r1, [r1, #0]
 80020b8:	8812      	ldrh	r2, [r2, #0]
 80020ba:	404a      	eors	r2, r1
 80020bc:	801a      	strh	r2, [r3, #0]
 80020be:	1d3b      	adds	r3, r7, #4
 80020c0:	1d39      	adds	r1, r7, #4
 80020c2:	1dba      	adds	r2, r7, #6
 80020c4:	8809      	ldrh	r1, [r1, #0]
 80020c6:	8812      	ldrh	r2, [r2, #0]
 80020c8:	404a      	eors	r2, r1
 80020ca:	801a      	strh	r2, [r3, #0]
 80020cc:	1dbb      	adds	r3, r7, #6
 80020ce:	1db9      	adds	r1, r7, #6
 80020d0:	1d3a      	adds	r2, r7, #4
 80020d2:	8809      	ldrh	r1, [r1, #0]
 80020d4:	8812      	ldrh	r2, [r2, #0]
 80020d6:	404a      	eors	r2, r1
 80020d8:	801a      	strh	r2, [r3, #0]
				y = SSD1306_HEIGHT - y - 1;
 80020da:	1d3b      	adds	r3, r7, #4
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	223f      	movs	r2, #63	; 0x3f
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	1d3b      	adds	r3, r7, #4
 80020e6:	801a      	strh	r2, [r3, #0]
				break;
 80020e8:	46c0      	nop			; (mov r8, r8)
		}

		switch (color)
 80020ea:	1cbb      	adds	r3, r7, #2
 80020ec:	881b      	ldrh	r3, [r3, #0]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d05c      	beq.n	80021ac <SSD1306_draw_pixel+0x1b8>
 80020f2:	dd00      	ble.n	80020f6 <SSD1306_draw_pixel+0x102>
 80020f4:	e084      	b.n	8002200 <SSD1306_draw_pixel+0x20c>
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d02c      	beq.n	8002154 <SSD1306_draw_pixel+0x160>
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d000      	beq.n	8002100 <SSD1306_draw_pixel+0x10c>
 80020fe:	e07f      	b.n	8002200 <SSD1306_draw_pixel+0x20c>
		{
			case SSD1306_WHITE:
				buffer[x + (y / 8) * SSD1306_WIDTH] |= (1 << (y & 7));
 8002100:	4b41      	ldr	r3, [pc, #260]	; (8002208 <SSD1306_draw_pixel+0x214>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	1dbb      	adds	r3, r7, #6
 8002106:	2100      	movs	r1, #0
 8002108:	5e59      	ldrsh	r1, [r3, r1]
 800210a:	1d3b      	adds	r3, r7, #4
 800210c:	2000      	movs	r0, #0
 800210e:	5e1b      	ldrsh	r3, [r3, r0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	da00      	bge.n	8002116 <SSD1306_draw_pixel+0x122>
 8002114:	3307      	adds	r3, #7
 8002116:	10db      	asrs	r3, r3, #3
 8002118:	b218      	sxth	r0, r3
 800211a:	0003      	movs	r3, r0
 800211c:	01db      	lsls	r3, r3, #7
 800211e:	18cb      	adds	r3, r1, r3
 8002120:	18d3      	adds	r3, r2, r3
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	b25a      	sxtb	r2, r3
 8002126:	1d3b      	adds	r3, r7, #4
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	0019      	movs	r1, r3
 800212c:	2307      	movs	r3, #7
 800212e:	400b      	ands	r3, r1
 8002130:	2101      	movs	r1, #1
 8002132:	4099      	lsls	r1, r3
 8002134:	000b      	movs	r3, r1
 8002136:	b25b      	sxtb	r3, r3
 8002138:	4313      	orrs	r3, r2
 800213a:	b25c      	sxtb	r4, r3
 800213c:	4b32      	ldr	r3, [pc, #200]	; (8002208 <SSD1306_draw_pixel+0x214>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	1dba      	adds	r2, r7, #6
 8002142:	2100      	movs	r1, #0
 8002144:	5e51      	ldrsh	r1, [r2, r1]
 8002146:	0002      	movs	r2, r0
 8002148:	01d2      	lsls	r2, r2, #7
 800214a:	188a      	adds	r2, r1, r2
 800214c:	189b      	adds	r3, r3, r2
 800214e:	b2e2      	uxtb	r2, r4
 8002150:	701a      	strb	r2, [r3, #0]
				break;
 8002152:	e055      	b.n	8002200 <SSD1306_draw_pixel+0x20c>
			case SSD1306_BLACK:
				buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y & 7));
 8002154:	4b2c      	ldr	r3, [pc, #176]	; (8002208 <SSD1306_draw_pixel+0x214>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	1dbb      	adds	r3, r7, #6
 800215a:	2100      	movs	r1, #0
 800215c:	5e59      	ldrsh	r1, [r3, r1]
 800215e:	1d3b      	adds	r3, r7, #4
 8002160:	2000      	movs	r0, #0
 8002162:	5e1b      	ldrsh	r3, [r3, r0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	da00      	bge.n	800216a <SSD1306_draw_pixel+0x176>
 8002168:	3307      	adds	r3, #7
 800216a:	10db      	asrs	r3, r3, #3
 800216c:	b218      	sxth	r0, r3
 800216e:	0003      	movs	r3, r0
 8002170:	01db      	lsls	r3, r3, #7
 8002172:	18cb      	adds	r3, r1, r3
 8002174:	18d3      	adds	r3, r2, r3
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	b25b      	sxtb	r3, r3
 800217a:	1d3a      	adds	r2, r7, #4
 800217c:	8812      	ldrh	r2, [r2, #0]
 800217e:	0011      	movs	r1, r2
 8002180:	2207      	movs	r2, #7
 8002182:	400a      	ands	r2, r1
 8002184:	2101      	movs	r1, #1
 8002186:	4091      	lsls	r1, r2
 8002188:	000a      	movs	r2, r1
 800218a:	b252      	sxtb	r2, r2
 800218c:	43d2      	mvns	r2, r2
 800218e:	b252      	sxtb	r2, r2
 8002190:	4013      	ands	r3, r2
 8002192:	b25c      	sxtb	r4, r3
 8002194:	4b1c      	ldr	r3, [pc, #112]	; (8002208 <SSD1306_draw_pixel+0x214>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	1dba      	adds	r2, r7, #6
 800219a:	2100      	movs	r1, #0
 800219c:	5e51      	ldrsh	r1, [r2, r1]
 800219e:	0002      	movs	r2, r0
 80021a0:	01d2      	lsls	r2, r2, #7
 80021a2:	188a      	adds	r2, r1, r2
 80021a4:	189b      	adds	r3, r3, r2
 80021a6:	b2e2      	uxtb	r2, r4
 80021a8:	701a      	strb	r2, [r3, #0]
				break;
 80021aa:	e029      	b.n	8002200 <SSD1306_draw_pixel+0x20c>
			case SSD1306_INVERSE:
				buffer[x + (y / 8) * SSD1306_WIDTH] ^= (1 << (y & 7));
 80021ac:	4b16      	ldr	r3, [pc, #88]	; (8002208 <SSD1306_draw_pixel+0x214>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	1dbb      	adds	r3, r7, #6
 80021b2:	2100      	movs	r1, #0
 80021b4:	5e59      	ldrsh	r1, [r3, r1]
 80021b6:	1d3b      	adds	r3, r7, #4
 80021b8:	2000      	movs	r0, #0
 80021ba:	5e1b      	ldrsh	r3, [r3, r0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	da00      	bge.n	80021c2 <SSD1306_draw_pixel+0x1ce>
 80021c0:	3307      	adds	r3, #7
 80021c2:	10db      	asrs	r3, r3, #3
 80021c4:	b218      	sxth	r0, r3
 80021c6:	0003      	movs	r3, r0
 80021c8:	01db      	lsls	r3, r3, #7
 80021ca:	18cb      	adds	r3, r1, r3
 80021cc:	18d3      	adds	r3, r2, r3
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	b25a      	sxtb	r2, r3
 80021d2:	1d3b      	adds	r3, r7, #4
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	0019      	movs	r1, r3
 80021d8:	2307      	movs	r3, #7
 80021da:	400b      	ands	r3, r1
 80021dc:	2101      	movs	r1, #1
 80021de:	4099      	lsls	r1, r3
 80021e0:	000b      	movs	r3, r1
 80021e2:	b25b      	sxtb	r3, r3
 80021e4:	4053      	eors	r3, r2
 80021e6:	b25c      	sxtb	r4, r3
 80021e8:	4b07      	ldr	r3, [pc, #28]	; (8002208 <SSD1306_draw_pixel+0x214>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	1dba      	adds	r2, r7, #6
 80021ee:	2100      	movs	r1, #0
 80021f0:	5e51      	ldrsh	r1, [r2, r1]
 80021f2:	0002      	movs	r2, r0
 80021f4:	01d2      	lsls	r2, r2, #7
 80021f6:	188a      	adds	r2, r1, r2
 80021f8:	189b      	adds	r3, r3, r2
 80021fa:	b2e2      	uxtb	r2, r4
 80021fc:	701a      	strb	r2, [r3, #0]
				break;
 80021fe:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8002200:	46c0      	nop			; (mov r8, r8)
 8002202:	46bd      	mov	sp, r7
 8002204:	b003      	add	sp, #12
 8002206:	bd90      	pop	{r4, r7, pc}
 8002208:	20000078 	.word	0x20000078

0800220c <SSD1306_display_clear>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_display_clear(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
	memset(buffer, 0, SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8));
 8002210:	4b05      	ldr	r3, [pc, #20]	; (8002228 <SSD1306_display_clear+0x1c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2280      	movs	r2, #128	; 0x80
 8002216:	00d2      	lsls	r2, r2, #3
 8002218:	2100      	movs	r1, #0
 800221a:	0018      	movs	r0, r3
 800221c:	f007 ff2a 	bl	800a074 <memset>
}
 8002220:	46c0      	nop			; (mov r8, r8)
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	20000078 	.word	0x20000078

0800222c <SSD1306_draw_fast_hline_internal>:
		SSD1306_draw_fast_hline_internal(x, y, w, color);
	}
}

void SSD1306_draw_fast_hline_internal(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 800222c:	b5b0      	push	{r4, r5, r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	0005      	movs	r5, r0
 8002234:	000c      	movs	r4, r1
 8002236:	0010      	movs	r0, r2
 8002238:	0019      	movs	r1, r3
 800223a:	1dbb      	adds	r3, r7, #6
 800223c:	1c2a      	adds	r2, r5, #0
 800223e:	801a      	strh	r2, [r3, #0]
 8002240:	1d3b      	adds	r3, r7, #4
 8002242:	1c22      	adds	r2, r4, #0
 8002244:	801a      	strh	r2, [r3, #0]
 8002246:	1cbb      	adds	r3, r7, #2
 8002248:	1c02      	adds	r2, r0, #0
 800224a:	801a      	strh	r2, [r3, #0]
 800224c:	003b      	movs	r3, r7
 800224e:	1c0a      	adds	r2, r1, #0
 8002250:	801a      	strh	r2, [r3, #0]
	if ((y >= 0) && (y < SSD1306_HEIGHT))
 8002252:	1d3b      	adds	r3, r7, #4
 8002254:	2200      	movs	r2, #0
 8002256:	5e9b      	ldrsh	r3, [r3, r2]
 8002258:	2b00      	cmp	r3, #0
 800225a:	da00      	bge.n	800225e <SSD1306_draw_fast_hline_internal+0x32>
 800225c:	e096      	b.n	800238c <SSD1306_draw_fast_hline_internal+0x160>
 800225e:	1d3b      	adds	r3, r7, #4
 8002260:	2200      	movs	r2, #0
 8002262:	5e9b      	ldrsh	r3, [r3, r2]
 8002264:	2b3f      	cmp	r3, #63	; 0x3f
 8002266:	dd00      	ble.n	800226a <SSD1306_draw_fast_hline_internal+0x3e>
 8002268:	e090      	b.n	800238c <SSD1306_draw_fast_hline_internal+0x160>
	{
		// Y coord in bounds?
		if (x < 0)
 800226a:	1dbb      	adds	r3, r7, #6
 800226c:	2200      	movs	r2, #0
 800226e:	5e9b      	ldrsh	r3, [r3, r2]
 8002270:	2b00      	cmp	r3, #0
 8002272:	da0a      	bge.n	800228a <SSD1306_draw_fast_hline_internal+0x5e>
		{
			// Clip left
			w += x;
 8002274:	1cbb      	adds	r3, r7, #2
 8002276:	881a      	ldrh	r2, [r3, #0]
 8002278:	1dbb      	adds	r3, r7, #6
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	18d3      	adds	r3, r2, r3
 800227e:	b29a      	uxth	r2, r3
 8002280:	1cbb      	adds	r3, r7, #2
 8002282:	801a      	strh	r2, [r3, #0]
			x = 0;
 8002284:	1dbb      	adds	r3, r7, #6
 8002286:	2200      	movs	r2, #0
 8002288:	801a      	strh	r2, [r3, #0]
		}
		if ((x + w) > SSD1306_WIDTH)
 800228a:	1dbb      	adds	r3, r7, #6
 800228c:	2200      	movs	r2, #0
 800228e:	5e9a      	ldrsh	r2, [r3, r2]
 8002290:	1cbb      	adds	r3, r7, #2
 8002292:	2100      	movs	r1, #0
 8002294:	5e5b      	ldrsh	r3, [r3, r1]
 8002296:	18d3      	adds	r3, r2, r3
 8002298:	2b80      	cmp	r3, #128	; 0x80
 800229a:	dd06      	ble.n	80022aa <SSD1306_draw_fast_hline_internal+0x7e>
		{
			// Clip right
			w = (SSD1306_WIDTH - x);
 800229c:	1dbb      	adds	r3, r7, #6
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	2280      	movs	r2, #128	; 0x80
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	1cbb      	adds	r3, r7, #2
 80022a8:	801a      	strh	r2, [r3, #0]
		}
		if (w > 0)
 80022aa:	1cbb      	adds	r3, r7, #2
 80022ac:	2200      	movs	r2, #0
 80022ae:	5e9b      	ldrsh	r3, [r3, r2]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	dc00      	bgt.n	80022b6 <SSD1306_draw_fast_hline_internal+0x8a>
 80022b4:	e06a      	b.n	800238c <SSD1306_draw_fast_hline_internal+0x160>
		{
			// Proceed only if width is positive
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x], mask = 1 << (y & 7);
 80022b6:	4b37      	ldr	r3, [pc, #220]	; (8002394 <SSD1306_draw_fast_hline_internal+0x168>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	1d3b      	adds	r3, r7, #4
 80022bc:	2100      	movs	r1, #0
 80022be:	5e5b      	ldrsh	r3, [r3, r1]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	da00      	bge.n	80022c6 <SSD1306_draw_fast_hline_internal+0x9a>
 80022c4:	3307      	adds	r3, #7
 80022c6:	10db      	asrs	r3, r3, #3
 80022c8:	b21b      	sxth	r3, r3
 80022ca:	01d9      	lsls	r1, r3, #7
 80022cc:	1dbb      	adds	r3, r7, #6
 80022ce:	2000      	movs	r0, #0
 80022d0:	5e1b      	ldrsh	r3, [r3, r0]
 80022d2:	18cb      	adds	r3, r1, r3
 80022d4:	18d3      	adds	r3, r2, r3
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	1d3b      	adds	r3, r7, #4
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	001a      	movs	r2, r3
 80022de:	2307      	movs	r3, #7
 80022e0:	4013      	ands	r3, r2
 80022e2:	2201      	movs	r2, #1
 80022e4:	409a      	lsls	r2, r3
 80022e6:	230b      	movs	r3, #11
 80022e8:	18fb      	adds	r3, r7, r3
 80022ea:	701a      	strb	r2, [r3, #0]
			switch (color)
 80022ec:	003b      	movs	r3, r7
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d040      	beq.n	8002376 <SSD1306_draw_fast_hline_internal+0x14a>
 80022f4:	dc4a      	bgt.n	800238c <SSD1306_draw_fast_hline_internal+0x160>
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d017      	beq.n	800232a <SSD1306_draw_fast_hline_internal+0xfe>
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d146      	bne.n	800238c <SSD1306_draw_fast_hline_internal+0x160>
			{
				case SSD1306_WHITE:
					while (w--)
 80022fe:	e009      	b.n	8002314 <SSD1306_draw_fast_hline_internal+0xe8>
					{
						*pBuf++ |= mask;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	60fa      	str	r2, [r7, #12]
 8002306:	7819      	ldrb	r1, [r3, #0]
 8002308:	220b      	movs	r2, #11
 800230a:	18ba      	adds	r2, r7, r2
 800230c:	7812      	ldrb	r2, [r2, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	b2d2      	uxtb	r2, r2
 8002312:	701a      	strb	r2, [r3, #0]
					while (w--)
 8002314:	1cbb      	adds	r3, r7, #2
 8002316:	2200      	movs	r2, #0
 8002318:	5e9b      	ldrsh	r3, [r3, r2]
 800231a:	b29a      	uxth	r2, r3
 800231c:	3a01      	subs	r2, #1
 800231e:	b291      	uxth	r1, r2
 8002320:	1cba      	adds	r2, r7, #2
 8002322:	8011      	strh	r1, [r2, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1eb      	bne.n	8002300 <SSD1306_draw_fast_hline_internal+0xd4>
					};
					break;
 8002328:	e030      	b.n	800238c <SSD1306_draw_fast_hline_internal+0x160>
				case SSD1306_BLACK:
					mask = ~mask;
 800232a:	220b      	movs	r2, #11
 800232c:	18bb      	adds	r3, r7, r2
 800232e:	18ba      	adds	r2, r7, r2
 8002330:	7812      	ldrb	r2, [r2, #0]
 8002332:	43d2      	mvns	r2, r2
 8002334:	701a      	strb	r2, [r3, #0]
					while (w--)
 8002336:	e009      	b.n	800234c <SSD1306_draw_fast_hline_internal+0x120>
					{
						*pBuf++ &= mask;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	60fa      	str	r2, [r7, #12]
 800233e:	781a      	ldrb	r2, [r3, #0]
 8002340:	210b      	movs	r1, #11
 8002342:	1879      	adds	r1, r7, r1
 8002344:	7809      	ldrb	r1, [r1, #0]
 8002346:	400a      	ands	r2, r1
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	701a      	strb	r2, [r3, #0]
					while (w--)
 800234c:	1cbb      	adds	r3, r7, #2
 800234e:	2200      	movs	r2, #0
 8002350:	5e9b      	ldrsh	r3, [r3, r2]
 8002352:	b29a      	uxth	r2, r3
 8002354:	3a01      	subs	r2, #1
 8002356:	b291      	uxth	r1, r2
 8002358:	1cba      	adds	r2, r7, #2
 800235a:	8011      	strh	r1, [r2, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1eb      	bne.n	8002338 <SSD1306_draw_fast_hline_internal+0x10c>
					};
					break;
 8002360:	e014      	b.n	800238c <SSD1306_draw_fast_hline_internal+0x160>
				case SSD1306_INVERSE:
					while (w--)
					{
						*pBuf++ ^= mask;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	60fa      	str	r2, [r7, #12]
 8002368:	7819      	ldrb	r1, [r3, #0]
 800236a:	220b      	movs	r2, #11
 800236c:	18ba      	adds	r2, r7, r2
 800236e:	7812      	ldrb	r2, [r2, #0]
 8002370:	404a      	eors	r2, r1
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	701a      	strb	r2, [r3, #0]
					while (w--)
 8002376:	1cbb      	adds	r3, r7, #2
 8002378:	2200      	movs	r2, #0
 800237a:	5e9b      	ldrsh	r3, [r3, r2]
 800237c:	b29a      	uxth	r2, r3
 800237e:	3a01      	subs	r2, #1
 8002380:	b291      	uxth	r1, r2
 8002382:	1cba      	adds	r2, r7, #2
 8002384:	8011      	strh	r1, [r2, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1eb      	bne.n	8002362 <SSD1306_draw_fast_hline_internal+0x136>
					};
					break;
 800238a:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
}
 800238c:	46c0      	nop			; (mov r8, r8)
 800238e:	46bd      	mov	sp, r7
 8002390:	b004      	add	sp, #16
 8002392:	bdb0      	pop	{r4, r5, r7, pc}
 8002394:	20000078 	.word	0x20000078

08002398 <SSD1306_draw_fast_vline>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_fast_vline(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8002398:	b5b0      	push	{r4, r5, r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	0005      	movs	r5, r0
 80023a0:	000c      	movs	r4, r1
 80023a2:	0010      	movs	r0, r2
 80023a4:	0019      	movs	r1, r3
 80023a6:	1dbb      	adds	r3, r7, #6
 80023a8:	1c2a      	adds	r2, r5, #0
 80023aa:	801a      	strh	r2, [r3, #0]
 80023ac:	1d3b      	adds	r3, r7, #4
 80023ae:	1c22      	adds	r2, r4, #0
 80023b0:	801a      	strh	r2, [r3, #0]
 80023b2:	1cbb      	adds	r3, r7, #2
 80023b4:	1c02      	adds	r2, r0, #0
 80023b6:	801a      	strh	r2, [r3, #0]
 80023b8:	003b      	movs	r3, r7
 80023ba:	1c0a      	adds	r2, r1, #0
 80023bc:	801a      	strh	r2, [r3, #0]
	bool bSwap = false;
 80023be:	230f      	movs	r3, #15
 80023c0:	18fb      	adds	r3, r7, r3
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]
	switch (SSD1306_get_rotation())
 80023c6:	f000 fa19 	bl	80027fc <SSD1306_get_rotation>
 80023ca:	0003      	movs	r3, r0
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d04a      	beq.n	8002466 <SSD1306_draw_fast_vline+0xce>
 80023d0:	dd00      	ble.n	80023d4 <SSD1306_draw_fast_vline+0x3c>
 80023d2:	e069      	b.n	80024a8 <SSD1306_draw_fast_vline+0x110>
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d002      	beq.n	80023de <SSD1306_draw_fast_vline+0x46>
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d02b      	beq.n	8002434 <SSD1306_draw_fast_vline+0x9c>
 80023dc:	e064      	b.n	80024a8 <SSD1306_draw_fast_vline+0x110>
	{
		case 1:
			// 90 degree rotation, swap x & y for rotation,
			// then invert x and adjust x for h (now to become w)
			bSwap = true;
 80023de:	230f      	movs	r3, #15
 80023e0:	18fb      	adds	r3, r7, r3
 80023e2:	2201      	movs	r2, #1
 80023e4:	701a      	strb	r2, [r3, #0]
  			ssd1306_swap(x, y);
 80023e6:	1dbb      	adds	r3, r7, #6
 80023e8:	1db9      	adds	r1, r7, #6
 80023ea:	1d3a      	adds	r2, r7, #4
 80023ec:	8809      	ldrh	r1, [r1, #0]
 80023ee:	8812      	ldrh	r2, [r2, #0]
 80023f0:	404a      	eors	r2, r1
 80023f2:	801a      	strh	r2, [r3, #0]
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	1d39      	adds	r1, r7, #4
 80023f8:	1dba      	adds	r2, r7, #6
 80023fa:	8809      	ldrh	r1, [r1, #0]
 80023fc:	8812      	ldrh	r2, [r2, #0]
 80023fe:	404a      	eors	r2, r1
 8002400:	801a      	strh	r2, [r3, #0]
 8002402:	1dbb      	adds	r3, r7, #6
 8002404:	1db9      	adds	r1, r7, #6
 8002406:	1d3a      	adds	r2, r7, #4
 8002408:	8809      	ldrh	r1, [r1, #0]
 800240a:	8812      	ldrh	r2, [r2, #0]
 800240c:	404a      	eors	r2, r1
 800240e:	801a      	strh	r2, [r3, #0]
  			x = SSD1306_WIDTH - x - 1;
 8002410:	1dbb      	adds	r3, r7, #6
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	227f      	movs	r2, #127	; 0x7f
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	b29a      	uxth	r2, r3
 800241a:	1dbb      	adds	r3, r7, #6
 800241c:	801a      	strh	r2, [r3, #0]
  			x -= (h - 1);
 800241e:	1dbb      	adds	r3, r7, #6
 8002420:	881a      	ldrh	r2, [r3, #0]
 8002422:	1cbb      	adds	r3, r7, #2
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	b29b      	uxth	r3, r3
 800242a:	3301      	adds	r3, #1
 800242c:	b29a      	uxth	r2, r3
 800242e:	1dbb      	adds	r3, r7, #6
 8002430:	801a      	strh	r2, [r3, #0]
  			break;
 8002432:	e039      	b.n	80024a8 <SSD1306_draw_fast_vline+0x110>
  	    case 2:
  	    	// 180 degree rotation, invert x and y, then shift y around for height.
  	    	x = SSD1306_WIDTH - x - 1;
 8002434:	1dbb      	adds	r3, r7, #6
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	227f      	movs	r2, #127	; 0x7f
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	b29a      	uxth	r2, r3
 800243e:	1dbb      	adds	r3, r7, #6
 8002440:	801a      	strh	r2, [r3, #0]
  	    	y = SSD1306_HEIGHT - y - 1;
 8002442:	1d3b      	adds	r3, r7, #4
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	223f      	movs	r2, #63	; 0x3f
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	b29a      	uxth	r2, r3
 800244c:	1d3b      	adds	r3, r7, #4
 800244e:	801a      	strh	r2, [r3, #0]
  	    	y -= (h - 1);
 8002450:	1d3b      	adds	r3, r7, #4
 8002452:	881a      	ldrh	r2, [r3, #0]
 8002454:	1cbb      	adds	r3, r7, #2
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	b29b      	uxth	r3, r3
 800245c:	3301      	adds	r3, #1
 800245e:	b29a      	uxth	r2, r3
 8002460:	1d3b      	adds	r3, r7, #4
 8002462:	801a      	strh	r2, [r3, #0]
  	    	break;
 8002464:	e020      	b.n	80024a8 <SSD1306_draw_fast_vline+0x110>
  	    case 3:
  	    	// 270 degree rotation, swap x & y for rotation, then invert y
  	    	bSwap = true;
 8002466:	230f      	movs	r3, #15
 8002468:	18fb      	adds	r3, r7, r3
 800246a:	2201      	movs	r2, #1
 800246c:	701a      	strb	r2, [r3, #0]
  	    	ssd1306_swap(x, y);
 800246e:	1dbb      	adds	r3, r7, #6
 8002470:	1db9      	adds	r1, r7, #6
 8002472:	1d3a      	adds	r2, r7, #4
 8002474:	8809      	ldrh	r1, [r1, #0]
 8002476:	8812      	ldrh	r2, [r2, #0]
 8002478:	404a      	eors	r2, r1
 800247a:	801a      	strh	r2, [r3, #0]
 800247c:	1d3b      	adds	r3, r7, #4
 800247e:	1d39      	adds	r1, r7, #4
 8002480:	1dba      	adds	r2, r7, #6
 8002482:	8809      	ldrh	r1, [r1, #0]
 8002484:	8812      	ldrh	r2, [r2, #0]
 8002486:	404a      	eors	r2, r1
 8002488:	801a      	strh	r2, [r3, #0]
 800248a:	1dbb      	adds	r3, r7, #6
 800248c:	1db9      	adds	r1, r7, #6
 800248e:	1d3a      	adds	r2, r7, #4
 8002490:	8809      	ldrh	r1, [r1, #0]
 8002492:	8812      	ldrh	r2, [r2, #0]
 8002494:	404a      	eors	r2, r1
 8002496:	801a      	strh	r2, [r3, #0]
  	    	y = SSD1306_HEIGHT - y - 1;
 8002498:	1d3b      	adds	r3, r7, #4
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	223f      	movs	r2, #63	; 0x3f
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	1d3b      	adds	r3, r7, #4
 80024a4:	801a      	strh	r2, [r3, #0]
  	    	break;
 80024a6:	46c0      	nop			; (mov r8, r8)
	}

	if (bSwap)
 80024a8:	230f      	movs	r3, #15
 80024aa:	18fb      	adds	r3, r7, r3
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00e      	beq.n	80024d0 <SSD1306_draw_fast_vline+0x138>
	{
		SSD1306_draw_fast_hline_internal(x, y, h, color);
 80024b2:	003b      	movs	r3, r7
 80024b4:	881c      	ldrh	r4, [r3, #0]
 80024b6:	1cbb      	adds	r3, r7, #2
 80024b8:	2200      	movs	r2, #0
 80024ba:	5e9a      	ldrsh	r2, [r3, r2]
 80024bc:	1d3b      	adds	r3, r7, #4
 80024be:	2100      	movs	r1, #0
 80024c0:	5e59      	ldrsh	r1, [r3, r1]
 80024c2:	1dbb      	adds	r3, r7, #6
 80024c4:	2000      	movs	r0, #0
 80024c6:	5e18      	ldrsh	r0, [r3, r0]
 80024c8:	0023      	movs	r3, r4
 80024ca:	f7ff feaf 	bl	800222c <SSD1306_draw_fast_hline_internal>
	}
	else
	{
		SSD1306_draw_fast_vline_internal(x, y, h, color);
	}
}
 80024ce:	e00d      	b.n	80024ec <SSD1306_draw_fast_vline+0x154>
		SSD1306_draw_fast_vline_internal(x, y, h, color);
 80024d0:	003b      	movs	r3, r7
 80024d2:	881c      	ldrh	r4, [r3, #0]
 80024d4:	1cbb      	adds	r3, r7, #2
 80024d6:	2200      	movs	r2, #0
 80024d8:	5e9a      	ldrsh	r2, [r3, r2]
 80024da:	1d3b      	adds	r3, r7, #4
 80024dc:	2100      	movs	r1, #0
 80024de:	5e59      	ldrsh	r1, [r3, r1]
 80024e0:	1dbb      	adds	r3, r7, #6
 80024e2:	2000      	movs	r0, #0
 80024e4:	5e18      	ldrsh	r0, [r3, r0]
 80024e6:	0023      	movs	r3, r4
 80024e8:	f000 f804 	bl	80024f4 <SSD1306_draw_fast_vline_internal>
}
 80024ec:	46c0      	nop			; (mov r8, r8)
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b004      	add	sp, #16
 80024f2:	bdb0      	pop	{r4, r5, r7, pc}

080024f4 <SSD1306_draw_fast_vline_internal>:

void SSD1306_draw_fast_vline_internal(int16_t x, int16_t __y, int16_t __h, uint16_t color)
{
 80024f4:	b5b0      	push	{r4, r5, r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	0005      	movs	r5, r0
 80024fc:	000c      	movs	r4, r1
 80024fe:	0010      	movs	r0, r2
 8002500:	0019      	movs	r1, r3
 8002502:	1dbb      	adds	r3, r7, #6
 8002504:	1c2a      	adds	r2, r5, #0
 8002506:	801a      	strh	r2, [r3, #0]
 8002508:	1d3b      	adds	r3, r7, #4
 800250a:	1c22      	adds	r2, r4, #0
 800250c:	801a      	strh	r2, [r3, #0]
 800250e:	1cbb      	adds	r3, r7, #2
 8002510:	1c02      	adds	r2, r0, #0
 8002512:	801a      	strh	r2, [r3, #0]
 8002514:	003b      	movs	r3, r7
 8002516:	1c0a      	adds	r2, r1, #0
 8002518:	801a      	strh	r2, [r3, #0]
	if ((x >= 0) && (x < SSD1306_WIDTH))
 800251a:	1dbb      	adds	r3, r7, #6
 800251c:	2200      	movs	r2, #0
 800251e:	5e9b      	ldrsh	r3, [r3, r2]
 8002520:	2b00      	cmp	r3, #0
 8002522:	da00      	bge.n	8002526 <SSD1306_draw_fast_vline_internal+0x32>
 8002524:	e128      	b.n	8002778 <SSD1306_draw_fast_vline_internal+0x284>
 8002526:	1dbb      	adds	r3, r7, #6
 8002528:	2200      	movs	r2, #0
 800252a:	5e9b      	ldrsh	r3, [r3, r2]
 800252c:	2b7f      	cmp	r3, #127	; 0x7f
 800252e:	dd00      	ble.n	8002532 <SSD1306_draw_fast_vline_internal+0x3e>
 8002530:	e122      	b.n	8002778 <SSD1306_draw_fast_vline_internal+0x284>
	{
		// X coord in bounds?
		if (__y < 0)
 8002532:	1d3b      	adds	r3, r7, #4
 8002534:	2200      	movs	r2, #0
 8002536:	5e9b      	ldrsh	r3, [r3, r2]
 8002538:	2b00      	cmp	r3, #0
 800253a:	da0a      	bge.n	8002552 <SSD1306_draw_fast_vline_internal+0x5e>
		{
			// Clip top
			__h += __y;
 800253c:	1cbb      	adds	r3, r7, #2
 800253e:	881a      	ldrh	r2, [r3, #0]
 8002540:	1d3b      	adds	r3, r7, #4
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	18d3      	adds	r3, r2, r3
 8002546:	b29a      	uxth	r2, r3
 8002548:	1cbb      	adds	r3, r7, #2
 800254a:	801a      	strh	r2, [r3, #0]
			__y = 0;
 800254c:	1d3b      	adds	r3, r7, #4
 800254e:	2200      	movs	r2, #0
 8002550:	801a      	strh	r2, [r3, #0]
		}
		if ((__y + __h) > SSD1306_HEIGHT)
 8002552:	1d3b      	adds	r3, r7, #4
 8002554:	2200      	movs	r2, #0
 8002556:	5e9a      	ldrsh	r2, [r3, r2]
 8002558:	1cbb      	adds	r3, r7, #2
 800255a:	2100      	movs	r1, #0
 800255c:	5e5b      	ldrsh	r3, [r3, r1]
 800255e:	18d3      	adds	r3, r2, r3
 8002560:	2b40      	cmp	r3, #64	; 0x40
 8002562:	dd06      	ble.n	8002572 <SSD1306_draw_fast_vline_internal+0x7e>
		{
			// Clip bottom
			__h = (SSD1306_HEIGHT - __y);
 8002564:	1d3b      	adds	r3, r7, #4
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	2240      	movs	r2, #64	; 0x40
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	b29a      	uxth	r2, r3
 800256e:	1cbb      	adds	r3, r7, #2
 8002570:	801a      	strh	r2, [r3, #0]
		}
		if (__h > 0)
 8002572:	1cbb      	adds	r3, r7, #2
 8002574:	2200      	movs	r2, #0
 8002576:	5e9b      	ldrsh	r3, [r3, r2]
 8002578:	2b00      	cmp	r3, #0
 800257a:	dc00      	bgt.n	800257e <SSD1306_draw_fast_vline_internal+0x8a>
 800257c:	e0fc      	b.n	8002778 <SSD1306_draw_fast_vline_internal+0x284>
		{
			// Proceed only if height is now positive
			// this display doesn't need ints for coordinates,
			// use local byte registers for faster juggling
			uint8_t y = __y, h = __h;
 800257e:	240d      	movs	r4, #13
 8002580:	193b      	adds	r3, r7, r4
 8002582:	1d3a      	adds	r2, r7, #4
 8002584:	8812      	ldrh	r2, [r2, #0]
 8002586:	701a      	strb	r2, [r3, #0]
 8002588:	2517      	movs	r5, #23
 800258a:	197b      	adds	r3, r7, r5
 800258c:	1cba      	adds	r2, r7, #2
 800258e:	8812      	ldrh	r2, [r2, #0]
 8002590:	701a      	strb	r2, [r3, #0]
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x];
 8002592:	4b7b      	ldr	r3, [pc, #492]	; (8002780 <SSD1306_draw_fast_vline_internal+0x28c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	193a      	adds	r2, r7, r4
 8002598:	7812      	ldrb	r2, [r2, #0]
 800259a:	08d2      	lsrs	r2, r2, #3
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	01d1      	lsls	r1, r2, #7
 80025a0:	1dba      	adds	r2, r7, #6
 80025a2:	2000      	movs	r0, #0
 80025a4:	5e12      	ldrsh	r2, [r2, r0]
 80025a6:	188a      	adds	r2, r1, r2
 80025a8:	189b      	adds	r3, r3, r2
 80025aa:	613b      	str	r3, [r7, #16]

			// do the first partial byte, if necessary - this requires some masking
			uint8_t mod = (y & 7);
 80025ac:	200f      	movs	r0, #15
 80025ae:	183b      	adds	r3, r7, r0
 80025b0:	193a      	adds	r2, r7, r4
 80025b2:	7812      	ldrb	r2, [r2, #0]
 80025b4:	2107      	movs	r1, #7
 80025b6:	400a      	ands	r2, r1
 80025b8:	701a      	strb	r2, [r3, #0]
			if (mod)
 80025ba:	183b      	adds	r3, r7, r0
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d053      	beq.n	800266a <SSD1306_draw_fast_vline_internal+0x176>
			{
				// mask off the high n bits we want to set
				mod = 8 - mod;
 80025c2:	183b      	adds	r3, r7, r0
 80025c4:	183a      	adds	r2, r7, r0
 80025c6:	7812      	ldrb	r2, [r2, #0]
 80025c8:	2108      	movs	r1, #8
 80025ca:	1a8a      	subs	r2, r1, r2
 80025cc:	701a      	strb	r2, [r3, #0]
				// note - lookup table results in a nearly 10% performance
				// improvement in fill* functions
				// uint8_t mask = ~(0xFF >> mod);
				static const uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE};
				uint8_t mask = (*(const unsigned char *)(&premask[mod]));
 80025ce:	0001      	movs	r1, r0
 80025d0:	187b      	adds	r3, r7, r1
 80025d2:	781a      	ldrb	r2, [r3, #0]
 80025d4:	4b6b      	ldr	r3, [pc, #428]	; (8002784 <SSD1306_draw_fast_vline_internal+0x290>)
 80025d6:	18d2      	adds	r2, r2, r3
 80025d8:	200e      	movs	r0, #14
 80025da:	183b      	adds	r3, r7, r0
 80025dc:	7812      	ldrb	r2, [r2, #0]
 80025de:	701a      	strb	r2, [r3, #0]
				// adjust the mask if we're not going to reach the end of this byte
				if (h < mod)
 80025e0:	197a      	adds	r2, r7, r5
 80025e2:	187b      	adds	r3, r7, r1
 80025e4:	7812      	ldrb	r2, [r2, #0]
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d20f      	bcs.n	800260c <SSD1306_draw_fast_vline_internal+0x118>
				{
					mask &= (0XFF >> (mod - h));
 80025ec:	187b      	adds	r3, r7, r1
 80025ee:	781a      	ldrb	r2, [r3, #0]
 80025f0:	197b      	adds	r3, r7, r5
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	22ff      	movs	r2, #255	; 0xff
 80025f8:	411a      	asrs	r2, r3
 80025fa:	0013      	movs	r3, r2
 80025fc:	b25b      	sxtb	r3, r3
 80025fe:	183a      	adds	r2, r7, r0
 8002600:	7812      	ldrb	r2, [r2, #0]
 8002602:	b252      	sxtb	r2, r2
 8002604:	4013      	ands	r3, r2
 8002606:	b25a      	sxtb	r2, r3
 8002608:	183b      	adds	r3, r7, r0
 800260a:	701a      	strb	r2, [r3, #0]
				}

				switch (color)
 800260c:	003b      	movs	r3, r7
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	2b02      	cmp	r3, #2
 8002612:	d01d      	beq.n	8002650 <SSD1306_draw_fast_vline_internal+0x15c>
 8002614:	dc26      	bgt.n	8002664 <SSD1306_draw_fast_vline_internal+0x170>
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00b      	beq.n	8002632 <SSD1306_draw_fast_vline_internal+0x13e>
 800261a:	2b01      	cmp	r3, #1
 800261c:	d122      	bne.n	8002664 <SSD1306_draw_fast_vline_internal+0x170>
				{
					case SSD1306_WHITE:
						*pBuf |= mask;
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	781a      	ldrb	r2, [r3, #0]
 8002622:	230e      	movs	r3, #14
 8002624:	18fb      	adds	r3, r7, r3
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	4313      	orrs	r3, r2
 800262a:	b2da      	uxtb	r2, r3
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	701a      	strb	r2, [r3, #0]
						break;
 8002630:	e018      	b.n	8002664 <SSD1306_draw_fast_vline_internal+0x170>
					case SSD1306_BLACK:
						*pBuf &= ~mask;
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	b25b      	sxtb	r3, r3
 8002638:	220e      	movs	r2, #14
 800263a:	18ba      	adds	r2, r7, r2
 800263c:	7812      	ldrb	r2, [r2, #0]
 800263e:	b252      	sxtb	r2, r2
 8002640:	43d2      	mvns	r2, r2
 8002642:	b252      	sxtb	r2, r2
 8002644:	4013      	ands	r3, r2
 8002646:	b25b      	sxtb	r3, r3
 8002648:	b2da      	uxtb	r2, r3
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	701a      	strb	r2, [r3, #0]
						break;
 800264e:	e009      	b.n	8002664 <SSD1306_draw_fast_vline_internal+0x170>
					case SSD1306_INVERSE:
						*pBuf ^= mask;
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	781a      	ldrb	r2, [r3, #0]
 8002654:	230e      	movs	r3, #14
 8002656:	18fb      	adds	r3, r7, r3
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	4053      	eors	r3, r2
 800265c:	b2da      	uxtb	r2, r3
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	701a      	strb	r2, [r3, #0]
						break;
 8002662:	46c0      	nop			; (mov r8, r8)
				}
				pBuf += SSD1306_WIDTH;
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	3380      	adds	r3, #128	; 0x80
 8002668:	613b      	str	r3, [r7, #16]
			}

			if (h >= mod)
 800266a:	2017      	movs	r0, #23
 800266c:	183a      	adds	r2, r7, r0
 800266e:	240f      	movs	r4, #15
 8002670:	193b      	adds	r3, r7, r4
 8002672:	7812      	ldrb	r2, [r2, #0]
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d200      	bcs.n	800267c <SSD1306_draw_fast_vline_internal+0x188>
 800267a:	e07d      	b.n	8002778 <SSD1306_draw_fast_vline_internal+0x284>
			{
				// More to go?
				h -= mod;
 800267c:	183b      	adds	r3, r7, r0
 800267e:	1839      	adds	r1, r7, r0
 8002680:	193a      	adds	r2, r7, r4
 8002682:	7809      	ldrb	r1, [r1, #0]
 8002684:	7812      	ldrb	r2, [r2, #0]
 8002686:	1a8a      	subs	r2, r1, r2
 8002688:	701a      	strb	r2, [r3, #0]
				// Write solid bytes while we can - effectively 8 rows at a time
				if (h >= 8)
 800268a:	183b      	adds	r3, r7, r0
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b07      	cmp	r3, #7
 8002690:	d933      	bls.n	80026fa <SSD1306_draw_fast_vline_internal+0x206>
				{
					if (color == SSD1306_INVERSE)
 8002692:	003b      	movs	r3, r7
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	2b02      	cmp	r3, #2
 8002698:	d113      	bne.n	80026c2 <SSD1306_draw_fast_vline_internal+0x1ce>
					{
						// separate copy of the code so we don't impact performance of
						// black/white write version with an extra comparison per loop
						do
						{
							*pBuf ^= 0xFF; // Invert byte
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	43db      	mvns	r3, r3
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	3380      	adds	r3, #128	; 0x80
 80026aa:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 80026ac:	2117      	movs	r1, #23
 80026ae:	187b      	adds	r3, r7, r1
 80026b0:	187a      	adds	r2, r7, r1
 80026b2:	7812      	ldrb	r2, [r2, #0]
 80026b4:	3a08      	subs	r2, #8
 80026b6:	701a      	strb	r2, [r3, #0]
						} while (h >= 8);
 80026b8:	187b      	adds	r3, r7, r1
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b07      	cmp	r3, #7
 80026be:	d8ec      	bhi.n	800269a <SSD1306_draw_fast_vline_internal+0x1a6>
 80026c0:	e01b      	b.n	80026fa <SSD1306_draw_fast_vline_internal+0x206>
					}
					else
					{
						// store a local value to work with
						uint8_t val = (color != SSD1306_BLACK) ? 255 : 0;
 80026c2:	003b      	movs	r3, r7
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <SSD1306_draw_fast_vline_internal+0x1da>
 80026ca:	22ff      	movs	r2, #255	; 0xff
 80026cc:	e000      	b.n	80026d0 <SSD1306_draw_fast_vline_internal+0x1dc>
 80026ce:	2200      	movs	r2, #0
 80026d0:	230c      	movs	r3, #12
 80026d2:	18fb      	adds	r3, r7, r3
 80026d4:	701a      	strb	r2, [r3, #0]
						do
						{
							*pBuf = val;   // Set byte
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	220c      	movs	r2, #12
 80026da:	18ba      	adds	r2, r7, r2
 80026dc:	7812      	ldrb	r2, [r2, #0]
 80026de:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	3380      	adds	r3, #128	; 0x80
 80026e4:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 80026e6:	2117      	movs	r1, #23
 80026e8:	187b      	adds	r3, r7, r1
 80026ea:	187a      	adds	r2, r7, r1
 80026ec:	7812      	ldrb	r2, [r2, #0]
 80026ee:	3a08      	subs	r2, #8
 80026f0:	701a      	strb	r2, [r3, #0]
						} while (h >= 8);
 80026f2:	187b      	adds	r3, r7, r1
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b07      	cmp	r3, #7
 80026f8:	d8ed      	bhi.n	80026d6 <SSD1306_draw_fast_vline_internal+0x1e2>
					}
				}

				if (h)
 80026fa:	2217      	movs	r2, #23
 80026fc:	18bb      	adds	r3, r7, r2
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d039      	beq.n	8002778 <SSD1306_draw_fast_vline_internal+0x284>
				{
					// Do the final partial byte, if necessary
					mod = h & 7;
 8002704:	200f      	movs	r0, #15
 8002706:	183b      	adds	r3, r7, r0
 8002708:	18ba      	adds	r2, r7, r2
 800270a:	7812      	ldrb	r2, [r2, #0]
 800270c:	2107      	movs	r1, #7
 800270e:	400a      	ands	r2, r1
 8002710:	701a      	strb	r2, [r3, #0]
					// uint8_t mask = (1 << mod) - 1;
					// note - lookup table results in a nearly 10% performance
					// improvement in fill* functions
					static const uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07,
                                                      0x0F, 0x1F, 0x3F, 0x7F};
					uint8_t mask = (*(const unsigned char *)(&postmask[mod]));
 8002712:	183b      	adds	r3, r7, r0
 8002714:	781a      	ldrb	r2, [r3, #0]
 8002716:	4b1c      	ldr	r3, [pc, #112]	; (8002788 <SSD1306_draw_fast_vline_internal+0x294>)
 8002718:	18d2      	adds	r2, r2, r3
 800271a:	210b      	movs	r1, #11
 800271c:	187b      	adds	r3, r7, r1
 800271e:	7812      	ldrb	r2, [r2, #0]
 8002720:	701a      	strb	r2, [r3, #0]
					switch (color)
 8002722:	003b      	movs	r3, r7
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d01c      	beq.n	8002764 <SSD1306_draw_fast_vline_internal+0x270>
 800272a:	dc25      	bgt.n	8002778 <SSD1306_draw_fast_vline_internal+0x284>
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00a      	beq.n	8002746 <SSD1306_draw_fast_vline_internal+0x252>
 8002730:	2b01      	cmp	r3, #1
 8002732:	d121      	bne.n	8002778 <SSD1306_draw_fast_vline_internal+0x284>
					{
						case SSD1306_WHITE:
							*pBuf |= mask;
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	781a      	ldrb	r2, [r3, #0]
 8002738:	187b      	adds	r3, r7, r1
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	4313      	orrs	r3, r2
 800273e:	b2da      	uxtb	r2, r3
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	701a      	strb	r2, [r3, #0]
							break;
 8002744:	e018      	b.n	8002778 <SSD1306_draw_fast_vline_internal+0x284>
						case SSD1306_BLACK:
							*pBuf &= ~mask;
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	b25b      	sxtb	r3, r3
 800274c:	220b      	movs	r2, #11
 800274e:	18ba      	adds	r2, r7, r2
 8002750:	7812      	ldrb	r2, [r2, #0]
 8002752:	b252      	sxtb	r2, r2
 8002754:	43d2      	mvns	r2, r2
 8002756:	b252      	sxtb	r2, r2
 8002758:	4013      	ands	r3, r2
 800275a:	b25b      	sxtb	r3, r3
 800275c:	b2da      	uxtb	r2, r3
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	701a      	strb	r2, [r3, #0]
							break;
 8002762:	e009      	b.n	8002778 <SSD1306_draw_fast_vline_internal+0x284>
						case SSD1306_INVERSE:
							*pBuf ^= mask;
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	781a      	ldrb	r2, [r3, #0]
 8002768:	230b      	movs	r3, #11
 800276a:	18fb      	adds	r3, r7, r3
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	4053      	eors	r3, r2
 8002770:	b2da      	uxtb	r2, r3
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	701a      	strb	r2, [r3, #0]
							break;
 8002776:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
		} // endif positive height
	}   // endif x in bounds
}
 8002778:	46c0      	nop			; (mov r8, r8)
 800277a:	46bd      	mov	sp, r7
 800277c:	b006      	add	sp, #24
 800277e:	bdb0      	pop	{r4, r5, r7, pc}
 8002780:	20000078 	.word	0x20000078
 8002784:	0800a67c 	.word	0x0800a67c
 8002788:	0800a684 	.word	0x0800a684

0800278c <SSD1306_display_repaint>:
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void SSD1306_display_repaint(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
	uint16_t buf_len = SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8);
 8002792:	1dbb      	adds	r3, r7, #6
 8002794:	2280      	movs	r2, #128	; 0x80
 8002796:	00d2      	lsls	r2, r2, #3
 8002798:	801a      	strh	r2, [r3, #0]

	SSD1306_send_com(SSD1306_PAGEADDR);
 800279a:	2022      	movs	r0, #34	; 0x22
 800279c:	f7ff fb82 	bl	8001ea4 <SSD1306_send_com>
	SSD1306_send_com(0x00);
 80027a0:	2000      	movs	r0, #0
 80027a2:	f7ff fb7f 	bl	8001ea4 <SSD1306_send_com>
	SSD1306_send_com(0xFF);
 80027a6:	20ff      	movs	r0, #255	; 0xff
 80027a8:	f7ff fb7c 	bl	8001ea4 <SSD1306_send_com>
	SSD1306_send_com(SSD1306_COLUMNADDR);
 80027ac:	2021      	movs	r0, #33	; 0x21
 80027ae:	f7ff fb79 	bl	8001ea4 <SSD1306_send_com>
	SSD1306_send_com(0x00);
 80027b2:	2000      	movs	r0, #0
 80027b4:	f7ff fb76 	bl	8001ea4 <SSD1306_send_com>

	SSD1306_send_com(SSD1306_WIDTH - 1); // Column end address
 80027b8:	207f      	movs	r0, #127	; 0x7f
 80027ba:	f7ff fb73 	bl	8001ea4 <SSD1306_send_com>

	platform_write_dma(SSD1306_SETSTARTLINE, buffer, buf_len);
 80027be:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <SSD1306_display_repaint+0x4c>)
 80027c0:	6819      	ldr	r1, [r3, #0]
 80027c2:	1dbb      	adds	r3, r7, #6
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	001a      	movs	r2, r3
 80027c8:	2040      	movs	r0, #64	; 0x40
 80027ca:	f7ff fb4b 	bl	8001e64 <platform_write_dma>
}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	46bd      	mov	sp, r7
 80027d2:	b002      	add	sp, #8
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	20000078 	.word	0x20000078

080027dc <SSD1306_set_rotation>:
    SSD1306_send_com(SSD1306_SETCONTRAST);
    SSD1306_send_com(contrast);
}

void SSD1306_set_rotation(uint8_t rot)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	0002      	movs	r2, r0
 80027e4:	1dfb      	adds	r3, r7, #7
 80027e6:	701a      	strb	r2, [r3, #0]
	rotation = rot;
 80027e8:	4b03      	ldr	r3, [pc, #12]	; (80027f8 <SSD1306_set_rotation+0x1c>)
 80027ea:	1dfa      	adds	r2, r7, #7
 80027ec:	7812      	ldrb	r2, [r2, #0]
 80027ee:	701a      	strb	r2, [r3, #0]
}
 80027f0:	46c0      	nop			; (mov r8, r8)
 80027f2:	46bd      	mov	sp, r7
 80027f4:	b002      	add	sp, #8
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	2000007c 	.word	0x2000007c

080027fc <SSD1306_get_rotation>:

uint8_t SSD1306_get_rotation(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
	return rotation;
 8002800:	4b02      	ldr	r3, [pc, #8]	; (800280c <SSD1306_get_rotation+0x10>)
 8002802:	781b      	ldrb	r3, [r3, #0]
}
 8002804:	0018      	movs	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	2000007c 	.word	0x2000007c

08002810 <setAngle>:

#include <ServoManager.h> // Dołączenie nagłówka dla zarządzania serwomechanizmem.
#include "tim.h"          // Dołączenie nagłówka dla obsługi timerów.

void setAngle(TIM_HandleTypeDef *tim, uint8_t channNum, uint16_t ang, uint8_t mode)
{
 8002810:	b590      	push	{r4, r7, lr}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	000c      	movs	r4, r1
 800281a:	0010      	movs	r0, r2
 800281c:	0019      	movs	r1, r3
 800281e:	1cfb      	adds	r3, r7, #3
 8002820:	1c22      	adds	r2, r4, #0
 8002822:	701a      	strb	r2, [r3, #0]
 8002824:	003b      	movs	r3, r7
 8002826:	1c02      	adds	r2, r0, #0
 8002828:	801a      	strh	r2, [r3, #0]
 800282a:	1cbb      	adds	r3, r7, #2
 800282c:	1c0a      	adds	r2, r1, #0
 800282e:	701a      	strb	r2, [r3, #0]
    uint16_t setValue; // Zmienna przechowująca wartość PWM do ustawienia.

    // Sprawdzenie, czy podany kąt mieści się w zakresie.
    // Jeżeli nie, to ograniczenie wartości do maksymalnego lub minimalnego kąta.
    if (ang > ANGLE_MAX)
 8002830:	003b      	movs	r3, r7
 8002832:	881a      	ldrh	r2, [r3, #0]
 8002834:	23e1      	movs	r3, #225	; 0xe1
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	429a      	cmp	r2, r3
 800283a:	d903      	bls.n	8002844 <setAngle+0x34>
    {
        ang = ANGLE_MAX; // Ograniczenie kąta do wartości maksymalnej.
 800283c:	003b      	movs	r3, r7
 800283e:	22e1      	movs	r2, #225	; 0xe1
 8002840:	00d2      	lsls	r2, r2, #3
 8002842:	801a      	strh	r2, [r3, #0]
    {
        ang = ANGLE_MIN; // Ograniczenie kąta do wartości minimalnej.
    }

    // Obliczenie wartości PWM na podstawie kąta i trybu obrotu.
    if (mode)
 8002844:	1cbb      	adds	r3, r7, #2
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d014      	beq.n	8002876 <setAngle+0x66>
    {
        // Tryb zgodny ze wskazówkami zegara.
        // Przeliczenie kąta na wartość PWM przy użyciu wzoru: PWM_MIN + ((ang - ANGLE_MIN) * STEP) / 1000
    	setValue = PWM_MIN + ((ang - ANGLE_MIN) * STEP) / 1000;
 800284c:	003b      	movs	r3, r7
 800284e:	881a      	ldrh	r2, [r3, #0]
 8002850:	0013      	movs	r3, r2
 8002852:	015b      	lsls	r3, r3, #5
 8002854:	189b      	adds	r3, r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	189b      	adds	r3, r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	189b      	adds	r3, r3, r2
 800285e:	22fa      	movs	r2, #250	; 0xfa
 8002860:	0091      	lsls	r1, r2, #2
 8002862:	0018      	movs	r0, r3
 8002864:	f7fd fcda 	bl	800021c <__divsi3>
 8002868:	0003      	movs	r3, r0
 800286a:	b29a      	uxth	r2, r3
 800286c:	230e      	movs	r3, #14
 800286e:	18fb      	adds	r3, r7, r3
 8002870:	32f0      	adds	r2, #240	; 0xf0
 8002872:	801a      	strh	r2, [r3, #0]
 8002874:	e015      	b.n	80028a2 <setAngle+0x92>
    }
    else
    {
        // Tryb przeciwny do wskazówek zegara.
        // Przeliczenie kąta na wartość PWM przy użyciu wzoru: PWM_MAX - ((ang - ANGLE_MIN) * STEP) / 1000
    	setValue = PWM_MAX - ((ang - ANGLE_MIN) * STEP) / 1000;
 8002876:	003b      	movs	r3, r7
 8002878:	881a      	ldrh	r2, [r3, #0]
 800287a:	0013      	movs	r3, r2
 800287c:	015b      	lsls	r3, r3, #5
 800287e:	189b      	adds	r3, r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	189b      	adds	r3, r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	189b      	adds	r3, r3, r2
 8002888:	491b      	ldr	r1, [pc, #108]	; (80028f8 <setAngle+0xe8>)
 800288a:	0018      	movs	r0, r3
 800288c:	f7fd fcc6 	bl	800021c <__divsi3>
 8002890:	0003      	movs	r3, r0
 8002892:	b29b      	uxth	r3, r3
 8002894:	220e      	movs	r2, #14
 8002896:	18ba      	adds	r2, r7, r2
 8002898:	2196      	movs	r1, #150	; 0x96
 800289a:	00c9      	lsls	r1, r1, #3
 800289c:	468c      	mov	ip, r1
 800289e:	4463      	add	r3, ip
 80028a0:	8013      	strh	r3, [r2, #0]
    }

    // Ustawienie wartości PWM dla odpowiedniego kanału timera.
    __HAL_TIM_SET_COMPARE(tim, channNum, setValue);
 80028a2:	1cfb      	adds	r3, r7, #3
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d106      	bne.n	80028b8 <setAngle+0xa8>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	220e      	movs	r2, #14
 80028b0:	18ba      	adds	r2, r7, r2
 80028b2:	8812      	ldrh	r2, [r2, #0]
 80028b4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80028b6:	e01b      	b.n	80028f0 <setAngle+0xe0>
    __HAL_TIM_SET_COMPARE(tim, channNum, setValue);
 80028b8:	1cfb      	adds	r3, r7, #3
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d106      	bne.n	80028ce <setAngle+0xbe>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	230e      	movs	r3, #14
 80028c6:	18fb      	adds	r3, r7, r3
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	6393      	str	r3, [r2, #56]	; 0x38
}
 80028cc:	e010      	b.n	80028f0 <setAngle+0xe0>
    __HAL_TIM_SET_COMPARE(tim, channNum, setValue);
 80028ce:	1cfb      	adds	r3, r7, #3
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d106      	bne.n	80028e4 <setAngle+0xd4>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	230e      	movs	r3, #14
 80028dc:	18fb      	adds	r3, r7, r3
 80028de:	881b      	ldrh	r3, [r3, #0]
 80028e0:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80028e2:	e005      	b.n	80028f0 <setAngle+0xe0>
    __HAL_TIM_SET_COMPARE(tim, channNum, setValue);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	230e      	movs	r3, #14
 80028ea:	18fb      	adds	r3, r7, r3
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	6413      	str	r3, [r2, #64]	; 0x40
}
 80028f0:	46c0      	nop			; (mov r8, r8)
 80028f2:	46bd      	mov	sp, r7
 80028f4:	b005      	add	sp, #20
 80028f6:	bd90      	pop	{r4, r7, pc}
 80028f8:	fffffc18 	.word	0xfffffc18

080028fc <setDefault>:

// funjkcja setDefault, która ustawia defaultowe ustawienia systemu
void setDefault(){
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0

    setAngle(&htim3, TIM_CHANNEL_2 , 900, 0);
 8002900:	23e1      	movs	r3, #225	; 0xe1
 8002902:	009a      	lsls	r2, r3, #2
 8002904:	4807      	ldr	r0, [pc, #28]	; (8002924 <setDefault+0x28>)
 8002906:	2300      	movs	r3, #0
 8002908:	2104      	movs	r1, #4
 800290a:	f7ff ff81 	bl	8002810 <setAngle>
    setAngle(&htim3, TIM_CHANNEL_4 , 900, 0);
 800290e:	23e1      	movs	r3, #225	; 0xe1
 8002910:	009a      	lsls	r2, r3, #2
 8002912:	4804      	ldr	r0, [pc, #16]	; (8002924 <setDefault+0x28>)
 8002914:	2300      	movs	r3, #0
 8002916:	210c      	movs	r1, #12
 8002918:	f7ff ff7a 	bl	8002810 <setAngle>

}
 800291c:	46c0      	nop			; (mov r8, r8)
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	20000234 	.word	0x20000234

08002928 <roundToHundred>:

#include <stdint.h> // Dołączenie nagłówka dla typów całkowitych o ustalonej szerokości (np. uint8_t, uint32_t).
#include <SolarPositioningAlgorithm.h> // Dołączenie nagłówka dla algorytmu pozycjonowania słonecznego.

// Funkcja zaokrąglająca wartość do najbliższej setki za pomocą operatora modulo.
uint16_t roundToHundred(uint16_t value) {
 8002928:	b5b0      	push	{r4, r5, r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	0002      	movs	r2, r0
 8002930:	1dbb      	adds	r3, r7, #6
 8002932:	801a      	strh	r2, [r3, #0]
    uint16_t remainder = value % 100;
 8002934:	250e      	movs	r5, #14
 8002936:	197c      	adds	r4, r7, r5
 8002938:	1dbb      	adds	r3, r7, #6
 800293a:	881b      	ldrh	r3, [r3, #0]
 800293c:	2164      	movs	r1, #100	; 0x64
 800293e:	0018      	movs	r0, r3
 8002940:	f7fd fc68 	bl	8000214 <__aeabi_uidivmod>
 8002944:	000b      	movs	r3, r1
 8002946:	8023      	strh	r3, [r4, #0]
    if (remainder < 50) {
 8002948:	197b      	adds	r3, r7, r5
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	2b31      	cmp	r3, #49	; 0x31
 800294e:	d806      	bhi.n	800295e <roundToHundred+0x36>
        return value - remainder; // Zaokrąglanie w dół
 8002950:	1dba      	adds	r2, r7, #6
 8002952:	197b      	adds	r3, r7, r5
 8002954:	8812      	ldrh	r2, [r2, #0]
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	b29b      	uxth	r3, r3
 800295c:	e008      	b.n	8002970 <roundToHundred+0x48>
    } else {
        return value + (100 - remainder); // Zaokrąglanie w górę
 800295e:	1dba      	adds	r2, r7, #6
 8002960:	230e      	movs	r3, #14
 8002962:	18fb      	adds	r3, r7, r3
 8002964:	8812      	ldrh	r2, [r2, #0]
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	b29b      	uxth	r3, r3
 800296c:	3364      	adds	r3, #100	; 0x64
 800296e:	b29b      	uxth	r3, r3
    }
}
 8002970:	0018      	movs	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	b004      	add	sp, #16
 8002976:	bdb0      	pop	{r4, r5, r7, pc}

08002978 <compareAndSetHorizontalAngles>:
// Funkcja porównująca wartości z czterech czujników i ustawiająca odpowiedni kąt poziomy.
int compareAndSetHorizontalAngles(uint16_t A, uint16_t B, uint16_t C, uint16_t D) {
 8002978:	b5b0      	push	{r4, r5, r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	0005      	movs	r5, r0
 8002980:	000c      	movs	r4, r1
 8002982:	0010      	movs	r0, r2
 8002984:	0019      	movs	r1, r3
 8002986:	1dbb      	adds	r3, r7, #6
 8002988:	1c2a      	adds	r2, r5, #0
 800298a:	801a      	strh	r2, [r3, #0]
 800298c:	1d3b      	adds	r3, r7, #4
 800298e:	1c22      	adds	r2, r4, #0
 8002990:	801a      	strh	r2, [r3, #0]
 8002992:	1cbb      	adds	r3, r7, #2
 8002994:	1c02      	adds	r2, r0, #0
 8002996:	801a      	strh	r2, [r3, #0]
 8002998:	003b      	movs	r3, r7
 800299a:	1c0a      	adds	r2, r1, #0
 800299c:	801a      	strh	r2, [r3, #0]
    int horizontalAngle = 0;
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]

    A = roundToHundred(A);
 80029a2:	1dbc      	adds	r4, r7, #6
 80029a4:	1dbb      	adds	r3, r7, #6
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	0018      	movs	r0, r3
 80029aa:	f7ff ffbd 	bl	8002928 <roundToHundred>
 80029ae:	0003      	movs	r3, r0
 80029b0:	8023      	strh	r3, [r4, #0]
    B = roundToHundred(B);
 80029b2:	1d3c      	adds	r4, r7, #4
 80029b4:	1d3b      	adds	r3, r7, #4
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	0018      	movs	r0, r3
 80029ba:	f7ff ffb5 	bl	8002928 <roundToHundred>
 80029be:	0003      	movs	r3, r0
 80029c0:	8023      	strh	r3, [r4, #0]
    C = roundToHundred(C);
 80029c2:	1cbc      	adds	r4, r7, #2
 80029c4:	1cbb      	adds	r3, r7, #2
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	0018      	movs	r0, r3
 80029ca:	f7ff ffad 	bl	8002928 <roundToHundred>
 80029ce:	0003      	movs	r3, r0
 80029d0:	8023      	strh	r3, [r4, #0]
    D = roundToHundred(D);
 80029d2:	003c      	movs	r4, r7
 80029d4:	003b      	movs	r3, r7
 80029d6:	881b      	ldrh	r3, [r3, #0]
 80029d8:	0018      	movs	r0, r3
 80029da:	f7ff ffa5 	bl	8002928 <roundToHundred>
 80029de:	0003      	movs	r3, r0
 80029e0:	8023      	strh	r3, [r4, #0]

    // Porównanie wartości z czujników A, B, C i D w celu ustawienia kąta poziomego.
    if (A > B && C > D) {
 80029e2:	1dba      	adds	r2, r7, #6
 80029e4:	1d3b      	adds	r3, r7, #4
 80029e6:	8812      	ldrh	r2, [r2, #0]
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d908      	bls.n	8002a00 <compareAndSetHorizontalAngles+0x88>
 80029ee:	1cba      	adds	r2, r7, #2
 80029f0:	003b      	movs	r3, r7
 80029f2:	8812      	ldrh	r2, [r2, #0]
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d902      	bls.n	8002a00 <compareAndSetHorizontalAngles+0x88>
        horizontalAngle = 100;
 80029fa:	2364      	movs	r3, #100	; 0x64
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	e011      	b.n	8002a24 <compareAndSetHorizontalAngles+0xac>
    } else if (A < B && C < D){
 8002a00:	1dba      	adds	r2, r7, #6
 8002a02:	1d3b      	adds	r3, r7, #4
 8002a04:	8812      	ldrh	r2, [r2, #0]
 8002a06:	881b      	ldrh	r3, [r3, #0]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d209      	bcs.n	8002a20 <compareAndSetHorizontalAngles+0xa8>
 8002a0c:	1cba      	adds	r2, r7, #2
 8002a0e:	003b      	movs	r3, r7
 8002a10:	8812      	ldrh	r2, [r2, #0]
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d203      	bcs.n	8002a20 <compareAndSetHorizontalAngles+0xa8>
        horizontalAngle = -100;
 8002a18:	2364      	movs	r3, #100	; 0x64
 8002a1a:	425b      	negs	r3, r3
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	e001      	b.n	8002a24 <compareAndSetHorizontalAngles+0xac>
    } else {
        horizontalAngle = 0;
 8002a20:	2300      	movs	r3, #0
 8002a22:	60fb      	str	r3, [r7, #12]
    }

    return horizontalAngle; // Zwrócenie kąta poziomego.
 8002a24:	68fb      	ldr	r3, [r7, #12]
}
 8002a26:	0018      	movs	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	b004      	add	sp, #16
 8002a2c:	bdb0      	pop	{r4, r5, r7, pc}

08002a2e <compareAndSetVerticalAngles>:

// Funkcja porównująca wartości z czterech czujników i ustawiająca odpowiedni kąt pionowy.
int compareAndSetVerticalAngles(uint16_t A, uint16_t B, uint16_t C, uint16_t D) {
 8002a2e:	b5b0      	push	{r4, r5, r7, lr}
 8002a30:	b084      	sub	sp, #16
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	0005      	movs	r5, r0
 8002a36:	000c      	movs	r4, r1
 8002a38:	0010      	movs	r0, r2
 8002a3a:	0019      	movs	r1, r3
 8002a3c:	1dbb      	adds	r3, r7, #6
 8002a3e:	1c2a      	adds	r2, r5, #0
 8002a40:	801a      	strh	r2, [r3, #0]
 8002a42:	1d3b      	adds	r3, r7, #4
 8002a44:	1c22      	adds	r2, r4, #0
 8002a46:	801a      	strh	r2, [r3, #0]
 8002a48:	1cbb      	adds	r3, r7, #2
 8002a4a:	1c02      	adds	r2, r0, #0
 8002a4c:	801a      	strh	r2, [r3, #0]
 8002a4e:	003b      	movs	r3, r7
 8002a50:	1c0a      	adds	r2, r1, #0
 8002a52:	801a      	strh	r2, [r3, #0]
    int verticalAngle = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	60fb      	str	r3, [r7, #12]

    A = roundToHundred(A);
 8002a58:	1dbc      	adds	r4, r7, #6
 8002a5a:	1dbb      	adds	r3, r7, #6
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f7ff ff62 	bl	8002928 <roundToHundred>
 8002a64:	0003      	movs	r3, r0
 8002a66:	8023      	strh	r3, [r4, #0]
    B = roundToHundred(B);
 8002a68:	1d3c      	adds	r4, r7, #4
 8002a6a:	1d3b      	adds	r3, r7, #4
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f7ff ff5a 	bl	8002928 <roundToHundred>
 8002a74:	0003      	movs	r3, r0
 8002a76:	8023      	strh	r3, [r4, #0]
    C = roundToHundred(C);
 8002a78:	1cbc      	adds	r4, r7, #2
 8002a7a:	1cbb      	adds	r3, r7, #2
 8002a7c:	881b      	ldrh	r3, [r3, #0]
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f7ff ff52 	bl	8002928 <roundToHundred>
 8002a84:	0003      	movs	r3, r0
 8002a86:	8023      	strh	r3, [r4, #0]
    D = roundToHundred(D);
 8002a88:	003c      	movs	r4, r7
 8002a8a:	003b      	movs	r3, r7
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f7ff ff4a 	bl	8002928 <roundToHundred>
 8002a94:	0003      	movs	r3, r0
 8002a96:	8023      	strh	r3, [r4, #0]

    // Porównanie wartości z czujników A, B, C i D w celu ustawienia kąta pionowego.
    if (A > C && B > D) {
 8002a98:	1dba      	adds	r2, r7, #6
 8002a9a:	1cbb      	adds	r3, r7, #2
 8002a9c:	8812      	ldrh	r2, [r2, #0]
 8002a9e:	881b      	ldrh	r3, [r3, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d909      	bls.n	8002ab8 <compareAndSetVerticalAngles+0x8a>
 8002aa4:	1d3a      	adds	r2, r7, #4
 8002aa6:	003b      	movs	r3, r7
 8002aa8:	8812      	ldrh	r2, [r2, #0]
 8002aaa:	881b      	ldrh	r3, [r3, #0]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d903      	bls.n	8002ab8 <compareAndSetVerticalAngles+0x8a>
        verticalAngle = -100;
 8002ab0:	2364      	movs	r3, #100	; 0x64
 8002ab2:	425b      	negs	r3, r3
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	e010      	b.n	8002ada <compareAndSetVerticalAngles+0xac>
    } else if (A < C && B < D){
 8002ab8:	1dba      	adds	r2, r7, #6
 8002aba:	1cbb      	adds	r3, r7, #2
 8002abc:	8812      	ldrh	r2, [r2, #0]
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d208      	bcs.n	8002ad6 <compareAndSetVerticalAngles+0xa8>
 8002ac4:	1d3a      	adds	r2, r7, #4
 8002ac6:	003b      	movs	r3, r7
 8002ac8:	8812      	ldrh	r2, [r2, #0]
 8002aca:	881b      	ldrh	r3, [r3, #0]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d202      	bcs.n	8002ad6 <compareAndSetVerticalAngles+0xa8>
        verticalAngle = 100;
 8002ad0:	2364      	movs	r3, #100	; 0x64
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	e001      	b.n	8002ada <compareAndSetVerticalAngles+0xac>
    } else {
        verticalAngle = 0;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
    }

    return verticalAngle; // Zwrócenie kąta pionowego.
 8002ada:	68fb      	ldr	r3, [r7, #12]
}
 8002adc:	0018      	movs	r0, r3
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	b004      	add	sp, #16
 8002ae2:	bdb0      	pop	{r4, r5, r7, pc}

08002ae4 <checkHorizontalAngleBounds>:

// Funkcja sprawdzająca i korygująca kąt poziomy, aby mieścił się w dopuszczalnym zakresie.
int checkHorizontalAngleBounds(int horizontalAngle){
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
    // Sprawdzenie, czy kąt poziomy przekracza dopuszczalne granice.
    if(horizontalAngle < 0){
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	da01      	bge.n	8002af6 <checkHorizontalAngleBounds+0x12>
        horizontalAngle = 0; // Korekta kąta na minimalną wartość.
 8002af2:	2300      	movs	r3, #0
 8002af4:	607b      	str	r3, [r7, #4]
    }
    if(horizontalAngle > 1800){
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	23e1      	movs	r3, #225	; 0xe1
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	429a      	cmp	r2, r3
 8002afe:	dd02      	ble.n	8002b06 <checkHorizontalAngleBounds+0x22>
        horizontalAngle = 1800; // Korekta kąta na maksymalną wartość.
 8002b00:	23e1      	movs	r3, #225	; 0xe1
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	607b      	str	r3, [r7, #4]
    }

    return horizontalAngle; // Zwrócenie skorygowanego kąta poziomego.
 8002b06:	687b      	ldr	r3, [r7, #4]
}
 8002b08:	0018      	movs	r0, r3
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	b002      	add	sp, #8
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <checkVerticalAngleBounds>:

// Funkcja sprawdzająca i korygująca kąt pionowy, aby mieścił się w dopuszczalnym zakresie.
int checkVerticalAngleBounds(int verticalAngle){
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
    // Sprawdzenie, czy kąt pionowy przekracza dopuszczalne granice.
    if(verticalAngle < 500){
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	23fa      	movs	r3, #250	; 0xfa
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	da02      	bge.n	8002b28 <checkVerticalAngleBounds+0x18>
        verticalAngle = 500; // Korekta kąta na minimalną wartość.
 8002b22:	23fa      	movs	r3, #250	; 0xfa
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	607b      	str	r3, [r7, #4]
    }
    if(verticalAngle > 1350){
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a05      	ldr	r2, [pc, #20]	; (8002b40 <checkVerticalAngleBounds+0x30>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	dd01      	ble.n	8002b34 <checkVerticalAngleBounds+0x24>
        verticalAngle = 1350; // Korekta kąta na maksymalną wartość.
 8002b30:	4b03      	ldr	r3, [pc, #12]	; (8002b40 <checkVerticalAngleBounds+0x30>)
 8002b32:	607b      	str	r3, [r7, #4]
    }

    return verticalAngle; // Zwrócenie skorygowanego kąta pionowego.
 8002b34:	687b      	ldr	r3, [r7, #4]
}
 8002b36:	0018      	movs	r0, r3
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	b002      	add	sp, #8
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	00000546 	.word	0x00000546

08002b44 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b4a:	003b      	movs	r3, r7
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	2308      	movs	r3, #8
 8002b50:	001a      	movs	r2, r3
 8002b52:	2100      	movs	r1, #0
 8002b54:	f007 fa8e 	bl	800a074 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002b58:	4b3d      	ldr	r3, [pc, #244]	; (8002c50 <MX_ADC_Init+0x10c>)
 8002b5a:	4a3e      	ldr	r2, [pc, #248]	; (8002c54 <MX_ADC_Init+0x110>)
 8002b5c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8002b5e:	4b3c      	ldr	r3, [pc, #240]	; (8002c50 <MX_ADC_Init+0x10c>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002b64:	4b3a      	ldr	r3, [pc, #232]	; (8002c50 <MX_ADC_Init+0x10c>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002b6a:	4b39      	ldr	r3, [pc, #228]	; (8002c50 <MX_ADC_Init+0x10c>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8002b70:	4b37      	ldr	r3, [pc, #220]	; (8002c50 <MX_ADC_Init+0x10c>)
 8002b72:	2204      	movs	r2, #4
 8002b74:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002b76:	4b36      	ldr	r3, [pc, #216]	; (8002c50 <MX_ADC_Init+0x10c>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b7c:	4b34      	ldr	r3, [pc, #208]	; (8002c50 <MX_ADC_Init+0x10c>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002b82:	4b33      	ldr	r3, [pc, #204]	; (8002c50 <MX_ADC_Init+0x10c>)
 8002b84:	2220      	movs	r2, #32
 8002b86:	2100      	movs	r1, #0
 8002b88:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002b8a:	4b31      	ldr	r3, [pc, #196]	; (8002c50 <MX_ADC_Init+0x10c>)
 8002b8c:	2221      	movs	r2, #33	; 0x21
 8002b8e:	2100      	movs	r1, #0
 8002b90:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002b92:	4b2f      	ldr	r3, [pc, #188]	; (8002c50 <MX_ADC_Init+0x10c>)
 8002b94:	2280      	movs	r2, #128	; 0x80
 8002b96:	00d2      	lsls	r2, r2, #3
 8002b98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8002b9a:	4b2d      	ldr	r3, [pc, #180]	; (8002c50 <MX_ADC_Init+0x10c>)
 8002b9c:	2280      	movs	r2, #128	; 0x80
 8002b9e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 8002ba0:	4b2b      	ldr	r3, [pc, #172]	; (8002c50 <MX_ADC_Init+0x10c>)
 8002ba2:	222c      	movs	r2, #44	; 0x2c
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ba8:	4b29      	ldr	r3, [pc, #164]	; (8002c50 <MX_ADC_Init+0x10c>)
 8002baa:	2204      	movs	r2, #4
 8002bac:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002bae:	4b28      	ldr	r3, [pc, #160]	; (8002c50 <MX_ADC_Init+0x10c>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002bb4:	4b26      	ldr	r3, [pc, #152]	; (8002c50 <MX_ADC_Init+0x10c>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8002bba:	4b25      	ldr	r3, [pc, #148]	; (8002c50 <MX_ADC_Init+0x10c>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002bc0:	4b23      	ldr	r3, [pc, #140]	; (8002c50 <MX_ADC_Init+0x10c>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002bc6:	4b22      	ldr	r3, [pc, #136]	; (8002c50 <MX_ADC_Init+0x10c>)
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f000 feab 	bl	8003924 <HAL_ADC_Init>
 8002bce:	1e03      	subs	r3, r0, #0
 8002bd0:	d001      	beq.n	8002bd6 <MX_ADC_Init+0x92>
  {
    Error_Handler();
 8002bd2:	f000 fb85 	bl	80032e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002bd6:	003b      	movs	r3, r7
 8002bd8:	2201      	movs	r2, #1
 8002bda:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002bdc:	003b      	movs	r3, r7
 8002bde:	2280      	movs	r2, #128	; 0x80
 8002be0:	0152      	lsls	r2, r2, #5
 8002be2:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002be4:	003a      	movs	r2, r7
 8002be6:	4b1a      	ldr	r3, [pc, #104]	; (8002c50 <MX_ADC_Init+0x10c>)
 8002be8:	0011      	movs	r1, r2
 8002bea:	0018      	movs	r0, r3
 8002bec:	f001 f8a8 	bl	8003d40 <HAL_ADC_ConfigChannel>
 8002bf0:	1e03      	subs	r3, r0, #0
 8002bf2:	d001      	beq.n	8002bf8 <MX_ADC_Init+0xb4>
  {
    Error_Handler();
 8002bf4:	f000 fb74 	bl	80032e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002bf8:	003b      	movs	r3, r7
 8002bfa:	4a17      	ldr	r2, [pc, #92]	; (8002c58 <MX_ADC_Init+0x114>)
 8002bfc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002bfe:	003a      	movs	r2, r7
 8002c00:	4b13      	ldr	r3, [pc, #76]	; (8002c50 <MX_ADC_Init+0x10c>)
 8002c02:	0011      	movs	r1, r2
 8002c04:	0018      	movs	r0, r3
 8002c06:	f001 f89b 	bl	8003d40 <HAL_ADC_ConfigChannel>
 8002c0a:	1e03      	subs	r3, r0, #0
 8002c0c:	d001      	beq.n	8002c12 <MX_ADC_Init+0xce>
  {
    Error_Handler();
 8002c0e:	f000 fb67 	bl	80032e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002c12:	003b      	movs	r3, r7
 8002c14:	4a11      	ldr	r2, [pc, #68]	; (8002c5c <MX_ADC_Init+0x118>)
 8002c16:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002c18:	003a      	movs	r2, r7
 8002c1a:	4b0d      	ldr	r3, [pc, #52]	; (8002c50 <MX_ADC_Init+0x10c>)
 8002c1c:	0011      	movs	r1, r2
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f001 f88e 	bl	8003d40 <HAL_ADC_ConfigChannel>
 8002c24:	1e03      	subs	r3, r0, #0
 8002c26:	d001      	beq.n	8002c2c <MX_ADC_Init+0xe8>
  {
    Error_Handler();
 8002c28:	f000 fb5a 	bl	80032e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002c2c:	003b      	movs	r3, r7
 8002c2e:	4a0c      	ldr	r2, [pc, #48]	; (8002c60 <MX_ADC_Init+0x11c>)
 8002c30:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002c32:	003a      	movs	r2, r7
 8002c34:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <MX_ADC_Init+0x10c>)
 8002c36:	0011      	movs	r1, r2
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f001 f881 	bl	8003d40 <HAL_ADC_ConfigChannel>
 8002c3e:	1e03      	subs	r3, r0, #0
 8002c40:	d001      	beq.n	8002c46 <MX_ADC_Init+0x102>
  {
    Error_Handler();
 8002c42:	f000 fb4d 	bl	80032e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	b002      	add	sp, #8
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	20000080 	.word	0x20000080
 8002c54:	40012400 	.word	0x40012400
 8002c58:	14000020 	.word	0x14000020
 8002c5c:	18000040 	.word	0x18000040
 8002c60:	20000100 	.word	0x20000100

08002c64 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002c64:	b590      	push	{r4, r7, lr}
 8002c66:	b08b      	sub	sp, #44	; 0x2c
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c6c:	2414      	movs	r4, #20
 8002c6e:	193b      	adds	r3, r7, r4
 8002c70:	0018      	movs	r0, r3
 8002c72:	2314      	movs	r3, #20
 8002c74:	001a      	movs	r2, r3
 8002c76:	2100      	movs	r1, #0
 8002c78:	f007 f9fc 	bl	800a074 <memset>
  if(adcHandle->Instance==ADC1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a37      	ldr	r2, [pc, #220]	; (8002d60 <HAL_ADC_MspInit+0xfc>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d168      	bne.n	8002d58 <HAL_ADC_MspInit+0xf4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c86:	4b37      	ldr	r3, [pc, #220]	; (8002d64 <HAL_ADC_MspInit+0x100>)
 8002c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c8a:	4b36      	ldr	r3, [pc, #216]	; (8002d64 <HAL_ADC_MspInit+0x100>)
 8002c8c:	2180      	movs	r1, #128	; 0x80
 8002c8e:	0089      	lsls	r1, r1, #2
 8002c90:	430a      	orrs	r2, r1
 8002c92:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c94:	4b33      	ldr	r3, [pc, #204]	; (8002d64 <HAL_ADC_MspInit+0x100>)
 8002c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c98:	4b32      	ldr	r3, [pc, #200]	; (8002d64 <HAL_ADC_MspInit+0x100>)
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ca0:	4b30      	ldr	r3, [pc, #192]	; (8002d64 <HAL_ADC_MspInit+0x100>)
 8002ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]
 8002caa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cac:	4b2d      	ldr	r3, [pc, #180]	; (8002d64 <HAL_ADC_MspInit+0x100>)
 8002cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb0:	4b2c      	ldr	r3, [pc, #176]	; (8002d64 <HAL_ADC_MspInit+0x100>)
 8002cb2:	2102      	movs	r1, #2
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cb8:	4b2a      	ldr	r3, [pc, #168]	; (8002d64 <HAL_ADC_MspInit+0x100>)
 8002cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC_IN0
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6;
 8002cc4:	193b      	adds	r3, r7, r4
 8002cc6:	2261      	movs	r2, #97	; 0x61
 8002cc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cca:	193b      	adds	r3, r7, r4
 8002ccc:	2203      	movs	r2, #3
 8002cce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd0:	193b      	adds	r3, r7, r4
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd6:	193a      	adds	r2, r7, r4
 8002cd8:	23a0      	movs	r3, #160	; 0xa0
 8002cda:	05db      	lsls	r3, r3, #23
 8002cdc:	0011      	movs	r1, r2
 8002cde:	0018      	movs	r0, r3
 8002ce0:	f001 fd06 	bl	80046f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ce4:	193b      	adds	r3, r7, r4
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cea:	193b      	adds	r3, r7, r4
 8002cec:	2203      	movs	r2, #3
 8002cee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf0:	193b      	adds	r3, r7, r4
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cf6:	193b      	adds	r3, r7, r4
 8002cf8:	4a1b      	ldr	r2, [pc, #108]	; (8002d68 <HAL_ADC_MspInit+0x104>)
 8002cfa:	0019      	movs	r1, r3
 8002cfc:	0010      	movs	r0, r2
 8002cfe:	f001 fcf7 	bl	80046f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8002d02:	4b1a      	ldr	r3, [pc, #104]	; (8002d6c <HAL_ADC_MspInit+0x108>)
 8002d04:	4a1a      	ldr	r2, [pc, #104]	; (8002d70 <HAL_ADC_MspInit+0x10c>)
 8002d06:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8002d08:	4b18      	ldr	r3, [pc, #96]	; (8002d6c <HAL_ADC_MspInit+0x108>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d0e:	4b17      	ldr	r3, [pc, #92]	; (8002d6c <HAL_ADC_MspInit+0x108>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d14:	4b15      	ldr	r3, [pc, #84]	; (8002d6c <HAL_ADC_MspInit+0x108>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002d1a:	4b14      	ldr	r3, [pc, #80]	; (8002d6c <HAL_ADC_MspInit+0x108>)
 8002d1c:	2280      	movs	r2, #128	; 0x80
 8002d1e:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d20:	4b12      	ldr	r3, [pc, #72]	; (8002d6c <HAL_ADC_MspInit+0x108>)
 8002d22:	2280      	movs	r2, #128	; 0x80
 8002d24:	0052      	lsls	r2, r2, #1
 8002d26:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d28:	4b10      	ldr	r3, [pc, #64]	; (8002d6c <HAL_ADC_MspInit+0x108>)
 8002d2a:	2280      	movs	r2, #128	; 0x80
 8002d2c:	00d2      	lsls	r2, r2, #3
 8002d2e:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002d30:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <HAL_ADC_MspInit+0x108>)
 8002d32:	2220      	movs	r2, #32
 8002d34:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002d36:	4b0d      	ldr	r3, [pc, #52]	; (8002d6c <HAL_ADC_MspInit+0x108>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002d3c:	4b0b      	ldr	r3, [pc, #44]	; (8002d6c <HAL_ADC_MspInit+0x108>)
 8002d3e:	0018      	movs	r0, r3
 8002d40:	f001 fa88 	bl	8004254 <HAL_DMA_Init>
 8002d44:	1e03      	subs	r3, r0, #0
 8002d46:	d001      	beq.n	8002d4c <HAL_ADC_MspInit+0xe8>
    {
      Error_Handler();
 8002d48:	f000 faca 	bl	80032e0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a07      	ldr	r2, [pc, #28]	; (8002d6c <HAL_ADC_MspInit+0x108>)
 8002d50:	64da      	str	r2, [r3, #76]	; 0x4c
 8002d52:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <HAL_ADC_MspInit+0x108>)
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002d58:	46c0      	nop			; (mov r8, r8)
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b00b      	add	sp, #44	; 0x2c
 8002d5e:	bd90      	pop	{r4, r7, pc}
 8002d60:	40012400 	.word	0x40012400
 8002d64:	40021000 	.word	0x40021000
 8002d68:	50000400 	.word	0x50000400
 8002d6c:	200000dc 	.word	0x200000dc
 8002d70:	40020008 	.word	0x40020008

08002d74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d7a:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <MX_DMA_Init+0x48>)
 8002d7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d7e:	4b0f      	ldr	r3, [pc, #60]	; (8002dbc <MX_DMA_Init+0x48>)
 8002d80:	2101      	movs	r1, #1
 8002d82:	430a      	orrs	r2, r1
 8002d84:	631a      	str	r2, [r3, #48]	; 0x30
 8002d86:	4b0d      	ldr	r3, [pc, #52]	; (8002dbc <MX_DMA_Init+0x48>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	607b      	str	r3, [r7, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002d92:	2200      	movs	r2, #0
 8002d94:	2100      	movs	r1, #0
 8002d96:	2009      	movs	r0, #9
 8002d98:	f001 fa2a 	bl	80041f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002d9c:	2009      	movs	r0, #9
 8002d9e:	f001 fa3c 	bl	800421a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8002da2:	2200      	movs	r2, #0
 8002da4:	2100      	movs	r1, #0
 8002da6:	200b      	movs	r0, #11
 8002da8:	f001 fa22 	bl	80041f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8002dac:	200b      	movs	r0, #11
 8002dae:	f001 fa34 	bl	800421a <HAL_NVIC_EnableIRQ>

}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	46bd      	mov	sp, r7
 8002db6:	b002      	add	sp, #8
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	46c0      	nop			; (mov r8, r8)
 8002dbc:	40021000 	.word	0x40021000

08002dc0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002dc0:	b590      	push	{r4, r7, lr}
 8002dc2:	b08b      	sub	sp, #44	; 0x2c
 8002dc4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc6:	2414      	movs	r4, #20
 8002dc8:	193b      	adds	r3, r7, r4
 8002dca:	0018      	movs	r0, r3
 8002dcc:	2314      	movs	r3, #20
 8002dce:	001a      	movs	r2, r3
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	f007 f94f 	bl	800a074 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dd6:	4b2a      	ldr	r3, [pc, #168]	; (8002e80 <MX_GPIO_Init+0xc0>)
 8002dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dda:	4b29      	ldr	r3, [pc, #164]	; (8002e80 <MX_GPIO_Init+0xc0>)
 8002ddc:	2104      	movs	r1, #4
 8002dde:	430a      	orrs	r2, r1
 8002de0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002de2:	4b27      	ldr	r3, [pc, #156]	; (8002e80 <MX_GPIO_Init+0xc0>)
 8002de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de6:	2204      	movs	r2, #4
 8002de8:	4013      	ands	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
 8002dec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002dee:	4b24      	ldr	r3, [pc, #144]	; (8002e80 <MX_GPIO_Init+0xc0>)
 8002df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df2:	4b23      	ldr	r3, [pc, #140]	; (8002e80 <MX_GPIO_Init+0xc0>)
 8002df4:	2180      	movs	r1, #128	; 0x80
 8002df6:	430a      	orrs	r2, r1
 8002df8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dfa:	4b21      	ldr	r3, [pc, #132]	; (8002e80 <MX_GPIO_Init+0xc0>)
 8002dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfe:	2280      	movs	r2, #128	; 0x80
 8002e00:	4013      	ands	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e06:	4b1e      	ldr	r3, [pc, #120]	; (8002e80 <MX_GPIO_Init+0xc0>)
 8002e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e0a:	4b1d      	ldr	r3, [pc, #116]	; (8002e80 <MX_GPIO_Init+0xc0>)
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e12:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <MX_GPIO_Init+0xc0>)
 8002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e16:	2201      	movs	r2, #1
 8002e18:	4013      	ands	r3, r2
 8002e1a:	60bb      	str	r3, [r7, #8]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e1e:	4b18      	ldr	r3, [pc, #96]	; (8002e80 <MX_GPIO_Init+0xc0>)
 8002e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e22:	4b17      	ldr	r3, [pc, #92]	; (8002e80 <MX_GPIO_Init+0xc0>)
 8002e24:	2102      	movs	r1, #2
 8002e26:	430a      	orrs	r2, r1
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e2a:	4b15      	ldr	r3, [pc, #84]	; (8002e80 <MX_GPIO_Init+0xc0>)
 8002e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2e:	2202      	movs	r2, #2
 8002e30:	4013      	ands	r3, r2
 8002e32:	607b      	str	r3, [r7, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8002e36:	193b      	adds	r3, r7, r4
 8002e38:	2280      	movs	r2, #128	; 0x80
 8002e3a:	0192      	lsls	r2, r2, #6
 8002e3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e3e:	193b      	adds	r3, r7, r4
 8002e40:	2200      	movs	r2, #0
 8002e42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e44:	193b      	adds	r3, r7, r4
 8002e46:	2200      	movs	r2, #0
 8002e48:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002e4a:	193b      	adds	r3, r7, r4
 8002e4c:	4a0d      	ldr	r2, [pc, #52]	; (8002e84 <MX_GPIO_Init+0xc4>)
 8002e4e:	0019      	movs	r1, r3
 8002e50:	0010      	movs	r0, r2
 8002e52:	f001 fc4d 	bl	80046f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON2_Pin;
 8002e56:	0021      	movs	r1, r4
 8002e58:	187b      	adds	r3, r7, r1
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e5e:	187b      	adds	r3, r7, r1
 8002e60:	2200      	movs	r2, #0
 8002e62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e64:	187b      	adds	r3, r7, r1
 8002e66:	2200      	movs	r2, #0
 8002e68:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BUTTON2_GPIO_Port, &GPIO_InitStruct);
 8002e6a:	187b      	adds	r3, r7, r1
 8002e6c:	4a06      	ldr	r2, [pc, #24]	; (8002e88 <MX_GPIO_Init+0xc8>)
 8002e6e:	0019      	movs	r1, r3
 8002e70:	0010      	movs	r0, r2
 8002e72:	f001 fc3d 	bl	80046f0 <HAL_GPIO_Init>

}
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	b00b      	add	sp, #44	; 0x2c
 8002e7c:	bd90      	pop	{r4, r7, pc}
 8002e7e:	46c0      	nop			; (mov r8, r8)
 8002e80:	40021000 	.word	0x40021000
 8002e84:	50000800 	.word	0x50000800
 8002e88:	50000400 	.word	0x50000400

08002e8c <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002e90:	4b1b      	ldr	r3, [pc, #108]	; (8002f00 <MX_I2C2_Init+0x74>)
 8002e92:	4a1c      	ldr	r2, [pc, #112]	; (8002f04 <MX_I2C2_Init+0x78>)
 8002e94:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0010061A;
 8002e96:	4b1a      	ldr	r3, [pc, #104]	; (8002f00 <MX_I2C2_Init+0x74>)
 8002e98:	4a1b      	ldr	r2, [pc, #108]	; (8002f08 <MX_I2C2_Init+0x7c>)
 8002e9a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002e9c:	4b18      	ldr	r3, [pc, #96]	; (8002f00 <MX_I2C2_Init+0x74>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ea2:	4b17      	ldr	r3, [pc, #92]	; (8002f00 <MX_I2C2_Init+0x74>)
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ea8:	4b15      	ldr	r3, [pc, #84]	; (8002f00 <MX_I2C2_Init+0x74>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002eae:	4b14      	ldr	r3, [pc, #80]	; (8002f00 <MX_I2C2_Init+0x74>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002eb4:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <MX_I2C2_Init+0x74>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002eba:	4b11      	ldr	r3, [pc, #68]	; (8002f00 <MX_I2C2_Init+0x74>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ec0:	4b0f      	ldr	r3, [pc, #60]	; (8002f00 <MX_I2C2_Init+0x74>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002ec6:	4b0e      	ldr	r3, [pc, #56]	; (8002f00 <MX_I2C2_Init+0x74>)
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f001 fdad 	bl	8004a28 <HAL_I2C_Init>
 8002ece:	1e03      	subs	r3, r0, #0
 8002ed0:	d001      	beq.n	8002ed6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002ed2:	f000 fa05 	bl	80032e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002ed6:	4b0a      	ldr	r3, [pc, #40]	; (8002f00 <MX_I2C2_Init+0x74>)
 8002ed8:	2100      	movs	r1, #0
 8002eda:	0018      	movs	r0, r3
 8002edc:	f003 fe02 	bl	8006ae4 <HAL_I2CEx_ConfigAnalogFilter>
 8002ee0:	1e03      	subs	r3, r0, #0
 8002ee2:	d001      	beq.n	8002ee8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002ee4:	f000 f9fc 	bl	80032e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002ee8:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <MX_I2C2_Init+0x74>)
 8002eea:	2100      	movs	r1, #0
 8002eec:	0018      	movs	r0, r3
 8002eee:	f003 fe45 	bl	8006b7c <HAL_I2CEx_ConfigDigitalFilter>
 8002ef2:	1e03      	subs	r3, r0, #0
 8002ef4:	d001      	beq.n	8002efa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002ef6:	f000 f9f3 	bl	80032e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	20000124 	.word	0x20000124
 8002f04:	40005800 	.word	0x40005800
 8002f08:	0010061a 	.word	0x0010061a

08002f0c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002f0c:	b590      	push	{r4, r7, lr}
 8002f0e:	b089      	sub	sp, #36	; 0x24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f14:	240c      	movs	r4, #12
 8002f16:	193b      	adds	r3, r7, r4
 8002f18:	0018      	movs	r0, r3
 8002f1a:	2314      	movs	r3, #20
 8002f1c:	001a      	movs	r2, r3
 8002f1e:	2100      	movs	r1, #0
 8002f20:	f007 f8a8 	bl	800a074 <memset>
  if(i2cHandle->Instance==I2C2)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a31      	ldr	r2, [pc, #196]	; (8002ff0 <HAL_I2C_MspInit+0xe4>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d15b      	bne.n	8002fe6 <HAL_I2C_MspInit+0xda>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f2e:	4b31      	ldr	r3, [pc, #196]	; (8002ff4 <HAL_I2C_MspInit+0xe8>)
 8002f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f32:	4b30      	ldr	r3, [pc, #192]	; (8002ff4 <HAL_I2C_MspInit+0xe8>)
 8002f34:	2102      	movs	r1, #2
 8002f36:	430a      	orrs	r2, r1
 8002f38:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f3a:	4b2e      	ldr	r3, [pc, #184]	; (8002ff4 <HAL_I2C_MspInit+0xe8>)
 8002f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3e:	2202      	movs	r2, #2
 8002f40:	4013      	ands	r3, r2
 8002f42:	60bb      	str	r3, [r7, #8]
 8002f44:	68bb      	ldr	r3, [r7, #8]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002f46:	193b      	adds	r3, r7, r4
 8002f48:	22c0      	movs	r2, #192	; 0xc0
 8002f4a:	0112      	lsls	r2, r2, #4
 8002f4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f4e:	0021      	movs	r1, r4
 8002f50:	187b      	adds	r3, r7, r1
 8002f52:	2212      	movs	r2, #18
 8002f54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f56:	187b      	adds	r3, r7, r1
 8002f58:	2200      	movs	r2, #0
 8002f5a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f5c:	187b      	adds	r3, r7, r1
 8002f5e:	2203      	movs	r2, #3
 8002f60:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8002f62:	187b      	adds	r3, r7, r1
 8002f64:	2206      	movs	r2, #6
 8002f66:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f68:	187b      	adds	r3, r7, r1
 8002f6a:	4a23      	ldr	r2, [pc, #140]	; (8002ff8 <HAL_I2C_MspInit+0xec>)
 8002f6c:	0019      	movs	r1, r3
 8002f6e:	0010      	movs	r0, r2
 8002f70:	f001 fbbe 	bl	80046f0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002f74:	4b1f      	ldr	r3, [pc, #124]	; (8002ff4 <HAL_I2C_MspInit+0xe8>)
 8002f76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f78:	4b1e      	ldr	r3, [pc, #120]	; (8002ff4 <HAL_I2C_MspInit+0xe8>)
 8002f7a:	2180      	movs	r1, #128	; 0x80
 8002f7c:	03c9      	lsls	r1, r1, #15
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	639a      	str	r2, [r3, #56]	; 0x38

    /* I2C2 DMA Init */
    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 8002f82:	4b1e      	ldr	r3, [pc, #120]	; (8002ffc <HAL_I2C_MspInit+0xf0>)
 8002f84:	4a1e      	ldr	r2, [pc, #120]	; (8003000 <HAL_I2C_MspInit+0xf4>)
 8002f86:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_7;
 8002f88:	4b1c      	ldr	r3, [pc, #112]	; (8002ffc <HAL_I2C_MspInit+0xf0>)
 8002f8a:	2207      	movs	r2, #7
 8002f8c:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f8e:	4b1b      	ldr	r3, [pc, #108]	; (8002ffc <HAL_I2C_MspInit+0xf0>)
 8002f90:	2210      	movs	r2, #16
 8002f92:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f94:	4b19      	ldr	r3, [pc, #100]	; (8002ffc <HAL_I2C_MspInit+0xf0>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f9a:	4b18      	ldr	r3, [pc, #96]	; (8002ffc <HAL_I2C_MspInit+0xf0>)
 8002f9c:	2280      	movs	r2, #128	; 0x80
 8002f9e:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fa0:	4b16      	ldr	r3, [pc, #88]	; (8002ffc <HAL_I2C_MspInit+0xf0>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fa6:	4b15      	ldr	r3, [pc, #84]	; (8002ffc <HAL_I2C_MspInit+0xf0>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8002fac:	4b13      	ldr	r3, [pc, #76]	; (8002ffc <HAL_I2C_MspInit+0xf0>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002fb2:	4b12      	ldr	r3, [pc, #72]	; (8002ffc <HAL_I2C_MspInit+0xf0>)
 8002fb4:	22c0      	movs	r2, #192	; 0xc0
 8002fb6:	0192      	lsls	r2, r2, #6
 8002fb8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8002fba:	4b10      	ldr	r3, [pc, #64]	; (8002ffc <HAL_I2C_MspInit+0xf0>)
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f001 f949 	bl	8004254 <HAL_DMA_Init>
 8002fc2:	1e03      	subs	r3, r0, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_I2C_MspInit+0xbe>
    {
      Error_Handler();
 8002fc6:	f000 f98b 	bl	80032e0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a0b      	ldr	r2, [pc, #44]	; (8002ffc <HAL_I2C_MspInit+0xf0>)
 8002fce:	639a      	str	r2, [r3, #56]	; 0x38
 8002fd0:	4b0a      	ldr	r3, [pc, #40]	; (8002ffc <HAL_I2C_MspInit+0xf0>)
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	2100      	movs	r1, #0
 8002fda:	2018      	movs	r0, #24
 8002fdc:	f001 f908 	bl	80041f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 8002fe0:	2018      	movs	r0, #24
 8002fe2:	f001 f91a 	bl	800421a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	b009      	add	sp, #36	; 0x24
 8002fec:	bd90      	pop	{r4, r7, pc}
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	40005800 	.word	0x40005800
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	50000400 	.word	0x50000400
 8002ffc:	20000178 	.word	0x20000178
 8003000:	40020044 	.word	0x40020044

08003004 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003004:	b5b0      	push	{r4, r5, r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800300a:	f000 fc1b 	bl	8003844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800300e:	f000 f8e1 	bl	80031d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003012:	f7ff fed5 	bl	8002dc0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003016:	f7ff fead 	bl	8002d74 <MX_DMA_Init>
  MX_TIM2_Init();
 800301a:	f000 fa17 	bl	800344c <MX_TIM2_Init>
  MX_TIM3_Init();
 800301e:	f000 fa69 	bl	80034f4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8003022:	f000 fb69 	bl	80036f8 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8003026:	f7ff ff31 	bl	8002e8c <MX_I2C2_Init>
  MX_ADC_Init();
 800302a:	f7ff fd8b 	bl	8002b44 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  // INICIALIZACJA ZASOBOW PERYFERYJNYCH
  	  // Inicjalizacja ekranu OLED
  	  SSD1306_init();
 800302e:	f7fe ff49 	bl	8001ec4 <SSD1306_init>
  	  // Inicjalizacja timerow pod wysylanie sygnalow PWM do serwomechanizmow
  	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003032:	4b5c      	ldr	r3, [pc, #368]	; (80031a4 <main+0x1a0>)
 8003034:	2104      	movs	r1, #4
 8003036:	0018      	movs	r0, r3
 8003038:	f004 fe54 	bl	8007ce4 <HAL_TIM_PWM_Start>
  	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800303c:	4b59      	ldr	r3, [pc, #356]	; (80031a4 <main+0x1a0>)
 800303e:	210c      	movs	r1, #12
 8003040:	0018      	movs	r0, r3
 8003042:	f004 fe4f 	bl	8007ce4 <HAL_TIM_PWM_Start>
  	  // Inicjalizacja UARTa pod odbieranie sygnalow z modulu bluetooth HC-06
  	  HAL_UART_Receive_IT(&huart1, &rxData,1);
 8003046:	4958      	ldr	r1, [pc, #352]	; (80031a8 <main+0x1a4>)
 8003048:	4b58      	ldr	r3, [pc, #352]	; (80031ac <main+0x1a8>)
 800304a:	2201      	movs	r2, #1
 800304c:	0018      	movs	r0, r3
 800304e:	f005 fc57 	bl	8008900 <HAL_UART_Receive_IT>

  // INICJALIZACJA ZMIENNYCH
  	  // Stany odbierania sygnalow - dyktuje czy urzadzenie moze odbierac sygnaly
  	  // i wobec nich sie pozycjonowac (1) lub je ignotowac (0)
  	  systemState.receivingState = '0';
 8003052:	4b57      	ldr	r3, [pc, #348]	; (80031b0 <main+0x1ac>)
 8003054:	2230      	movs	r2, #48	; 0x30
 8003056:	701a      	strb	r2, [r3, #0]
  	  // Stan pozycjonowania - alboo sterowanie swiatlem (1) albo sterownanie manualne - z telefonu
  	  systemState.positioningState = '1';
 8003058:	4b55      	ldr	r3, [pc, #340]	; (80031b0 <main+0x1ac>)
 800305a:	2231      	movs	r2, #49	; 0x31
 800305c:	705a      	strb	r2, [r3, #1]
  	  // Zmienne katow pozycjonowania serwomechnizmow
  	  servoAngles.horizontalAngle = 900;
 800305e:	4b55      	ldr	r3, [pc, #340]	; (80031b4 <main+0x1b0>)
 8003060:	22e1      	movs	r2, #225	; 0xe1
 8003062:	0092      	lsls	r2, r2, #2
 8003064:	601a      	str	r2, [r3, #0]
  	  servoAngles.verticalAngle = 924;
 8003066:	4b53      	ldr	r3, [pc, #332]	; (80031b4 <main+0x1b0>)
 8003068:	22e7      	movs	r2, #231	; 0xe7
 800306a:	0092      	lsls	r2, r2, #2
 800306c:	605a      	str	r2, [r3, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Start Timera do zbierania sygnalow z ADC
  HAL_TIM_Base_Start_IT(&htim2);
 800306e:	4b52      	ldr	r3, [pc, #328]	; (80031b8 <main+0x1b4>)
 8003070:	0018      	movs	r0, r3
 8003072:	f004 fda5 	bl	8007bc0 <HAL_TIM_Base_Start_IT>
  // Start DMA pod zbieranie sygnalow z ADC
  //HAL_ADC_Start_DMA(&hadc, (uint32_t *)AdcResults, 4);
  HAL_ADC_Start_DMA(&hadc, (uint32_t *)AdcResultsArray, 4);
 8003076:	4951      	ldr	r1, [pc, #324]	; (80031bc <main+0x1b8>)
 8003078:	4b51      	ldr	r3, [pc, #324]	; (80031c0 <main+0x1bc>)
 800307a:	2204      	movs	r2, #4
 800307c:	0018      	movs	r0, r3
 800307e:	f000 fdc5 	bl	8003c0c <HAL_ADC_Start_DMA>
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */

	  	 // Zmiana stanu urzadzenia po wcisnieciu przycisku
	  	 if (HAL_GPIO_ReadPin(USER_BUTTON2_GPIO_Port, USER_BUTTON2_Pin) != GPIO_PIN_RESET) {
 8003082:	4b50      	ldr	r3, [pc, #320]	; (80031c4 <main+0x1c0>)
 8003084:	2120      	movs	r1, #32
 8003086:	0018      	movs	r0, r3
 8003088:	f001 fcb0 	bl	80049ec <HAL_GPIO_ReadPin>
 800308c:	1e03      	subs	r3, r0, #0
 800308e:	d003      	beq.n	8003098 <main+0x94>
	  	         togglePositioningState(systemState.stateMemory);
 8003090:	4b4d      	ldr	r3, [pc, #308]	; (80031c8 <main+0x1c4>)
 8003092:	0018      	movs	r0, r3
 8003094:	f7fe fc31 	bl	80018fa <togglePositioningState>
	  	 }

	  	 // Zmiana stanu urzadzenia
	  	 systemState.positioningState = displayState(systemState.stateMemory);
 8003098:	4b4b      	ldr	r3, [pc, #300]	; (80031c8 <main+0x1c4>)
 800309a:	0018      	movs	r0, r3
 800309c:	f7fe fc10 	bl	80018c0 <displayState>
 80030a0:	0003      	movs	r3, r0
 80030a2:	001a      	movs	r2, r3
 80030a4:	4b42      	ldr	r3, [pc, #264]	; (80031b0 <main+0x1ac>)
 80030a6:	705a      	strb	r2, [r3, #1]
	  	 // Wyswietlenie stanu urzadzenia
	  	 displayParameters(systemState.positioningState, systemState.receivingState, 1, 1);
 80030a8:	4b41      	ldr	r3, [pc, #260]	; (80031b0 <main+0x1ac>)
 80030aa:	785b      	ldrb	r3, [r3, #1]
 80030ac:	b21c      	sxth	r4, r3
 80030ae:	4b40      	ldr	r3, [pc, #256]	; (80031b0 <main+0x1ac>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	b21d      	sxth	r5, r3
 80030b4:	2000      	movs	r0, #0
 80030b6:	4945      	ldr	r1, [pc, #276]	; (80031cc <main+0x1c8>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	4b44      	ldr	r3, [pc, #272]	; (80031cc <main+0x1c8>)
 80030bc:	9200      	str	r2, [sp, #0]
 80030be:	9301      	str	r3, [sp, #4]
 80030c0:	0002      	movs	r2, r0
 80030c2:	000b      	movs	r3, r1
 80030c4:	0029      	movs	r1, r5
 80030c6:	0020      	movs	r0, r4
 80030c8:	f7fe fb58 	bl	800177c <displayParameters>

	     // Glowny switch case programu
	     switch (systemState.positioningState)
 80030cc:	4b38      	ldr	r3, [pc, #224]	; (80031b0 <main+0x1ac>)
 80030ce:	785b      	ldrb	r3, [r3, #1]
 80030d0:	2b31      	cmp	r3, #49	; 0x31
 80030d2:	d002      	beq.n	80030da <main+0xd6>
 80030d4:	2b32      	cmp	r3, #50	; 0x32
 80030d6:	d05c      	beq.n	8003192 <main+0x18e>
 80030d8:	e05f      	b.n	800319a <main+0x196>
	     {
	         case '1':
	             // SolarAlgorithm - pozycjonowanie wobec swiatla

	        	 // zmiana stanu "odbierania" sygnalow z telefonu
	             systemState.receivingState = '0';
 80030da:	4b35      	ldr	r3, [pc, #212]	; (80031b0 <main+0x1ac>)
 80030dc:	2230      	movs	r2, #48	; 0x30
 80030de:	701a      	strb	r2, [r3, #0]

	        	 // przypisanie zczytanych z ADC wartosci do zmiennych okreslajacyh natezenie swiatla
	             adcResults.lux = (uint32_t)AdcResultsArray[0];
 80030e0:	4b36      	ldr	r3, [pc, #216]	; (80031bc <main+0x1b8>)
 80030e2:	881a      	ldrh	r2, [r3, #0]
 80030e4:	4b3a      	ldr	r3, [pc, #232]	; (80031d0 <main+0x1cc>)
 80030e6:	801a      	strh	r2, [r3, #0]
	             adcResults.lux1 = (uint32_t)AdcResultsArray[1];
 80030e8:	4b34      	ldr	r3, [pc, #208]	; (80031bc <main+0x1b8>)
 80030ea:	885a      	ldrh	r2, [r3, #2]
 80030ec:	4b38      	ldr	r3, [pc, #224]	; (80031d0 <main+0x1cc>)
 80030ee:	805a      	strh	r2, [r3, #2]
	             adcResults.lux2 = (uint32_t)AdcResultsArray[2];
 80030f0:	4b32      	ldr	r3, [pc, #200]	; (80031bc <main+0x1b8>)
 80030f2:	889a      	ldrh	r2, [r3, #4]
 80030f4:	4b36      	ldr	r3, [pc, #216]	; (80031d0 <main+0x1cc>)
 80030f6:	809a      	strh	r2, [r3, #4]
	             adcResults.lux3 = (uint32_t)AdcResultsArray[3];
 80030f8:	4b30      	ldr	r3, [pc, #192]	; (80031bc <main+0x1b8>)
 80030fa:	88da      	ldrh	r2, [r3, #6]
 80030fc:	4b34      	ldr	r3, [pc, #208]	; (80031d0 <main+0x1cc>)
 80030fe:	80da      	strh	r2, [r3, #6]

	             // zwiekszenie lub zmniejszenie wartosci kata poziomego
	             servoAngles.horizontalAngle += compareAndSetHorizontalAngles(adcResults.lux, adcResults.lux1, adcResults.lux2, adcResults.lux3);
 8003100:	4b33      	ldr	r3, [pc, #204]	; (80031d0 <main+0x1cc>)
 8003102:	881b      	ldrh	r3, [r3, #0]
 8003104:	b298      	uxth	r0, r3
 8003106:	4b32      	ldr	r3, [pc, #200]	; (80031d0 <main+0x1cc>)
 8003108:	885b      	ldrh	r3, [r3, #2]
 800310a:	b299      	uxth	r1, r3
 800310c:	4b30      	ldr	r3, [pc, #192]	; (80031d0 <main+0x1cc>)
 800310e:	889b      	ldrh	r3, [r3, #4]
 8003110:	b29a      	uxth	r2, r3
 8003112:	4b2f      	ldr	r3, [pc, #188]	; (80031d0 <main+0x1cc>)
 8003114:	88db      	ldrh	r3, [r3, #6]
 8003116:	b29b      	uxth	r3, r3
 8003118:	f7ff fc2e 	bl	8002978 <compareAndSetHorizontalAngles>
 800311c:	0002      	movs	r2, r0
 800311e:	4b25      	ldr	r3, [pc, #148]	; (80031b4 <main+0x1b0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	18d2      	adds	r2, r2, r3
 8003124:	4b23      	ldr	r3, [pc, #140]	; (80031b4 <main+0x1b0>)
 8003126:	601a      	str	r2, [r3, #0]
	             // sprawdzenie czy kat poziomy nie wykracza poza mechaniczny zakres
	             servoAngles.horizontalAngle = checkHorizontalAngleBounds(servoAngles.horizontalAngle);
 8003128:	4b22      	ldr	r3, [pc, #136]	; (80031b4 <main+0x1b0>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	0018      	movs	r0, r3
 800312e:	f7ff fcd9 	bl	8002ae4 <checkHorizontalAngleBounds>
 8003132:	0002      	movs	r2, r0
 8003134:	4b1f      	ldr	r3, [pc, #124]	; (80031b4 <main+0x1b0>)
 8003136:	601a      	str	r2, [r3, #0]
	             // ustawienie serwomechanizmu na odpowiedni kat poziomy
	             setAngle(&htim3, TIM_CHANNEL_2 , servoAngles.horizontalAngle, 0);
 8003138:	4b1e      	ldr	r3, [pc, #120]	; (80031b4 <main+0x1b0>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	b29a      	uxth	r2, r3
 800313e:	4819      	ldr	r0, [pc, #100]	; (80031a4 <main+0x1a0>)
 8003140:	2300      	movs	r3, #0
 8003142:	2104      	movs	r1, #4
 8003144:	f7ff fb64 	bl	8002810 <setAngle>

	             // zwiekszenie lub zmniejszenie wartosci kata pionowego
	             servoAngles.verticalAngle += compareAndSetVerticalAngles(adcResults.lux, adcResults.lux1, adcResults.lux2, adcResults.lux3);
 8003148:	4b21      	ldr	r3, [pc, #132]	; (80031d0 <main+0x1cc>)
 800314a:	881b      	ldrh	r3, [r3, #0]
 800314c:	b298      	uxth	r0, r3
 800314e:	4b20      	ldr	r3, [pc, #128]	; (80031d0 <main+0x1cc>)
 8003150:	885b      	ldrh	r3, [r3, #2]
 8003152:	b299      	uxth	r1, r3
 8003154:	4b1e      	ldr	r3, [pc, #120]	; (80031d0 <main+0x1cc>)
 8003156:	889b      	ldrh	r3, [r3, #4]
 8003158:	b29a      	uxth	r2, r3
 800315a:	4b1d      	ldr	r3, [pc, #116]	; (80031d0 <main+0x1cc>)
 800315c:	88db      	ldrh	r3, [r3, #6]
 800315e:	b29b      	uxth	r3, r3
 8003160:	f7ff fc65 	bl	8002a2e <compareAndSetVerticalAngles>
 8003164:	0002      	movs	r2, r0
 8003166:	4b13      	ldr	r3, [pc, #76]	; (80031b4 <main+0x1b0>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	18d2      	adds	r2, r2, r3
 800316c:	4b11      	ldr	r3, [pc, #68]	; (80031b4 <main+0x1b0>)
 800316e:	605a      	str	r2, [r3, #4]
	             // sprawdzenie czy kat pionowy nie wykracza poza mechaniczny zakress
	             servoAngles.verticalAngle = checkVerticalAngleBounds(servoAngles.verticalAngle);
 8003170:	4b10      	ldr	r3, [pc, #64]	; (80031b4 <main+0x1b0>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	0018      	movs	r0, r3
 8003176:	f7ff fccb 	bl	8002b10 <checkVerticalAngleBounds>
 800317a:	0002      	movs	r2, r0
 800317c:	4b0d      	ldr	r3, [pc, #52]	; (80031b4 <main+0x1b0>)
 800317e:	605a      	str	r2, [r3, #4]
	             // ustawienie serwomechanizmu na odpowiedni kat pionowy
	             setAngle(&htim3, TIM_CHANNEL_4 , servoAngles.verticalAngle, 0);
 8003180:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <main+0x1b0>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	b29a      	uxth	r2, r3
 8003186:	4807      	ldr	r0, [pc, #28]	; (80031a4 <main+0x1a0>)
 8003188:	2300      	movs	r3, #0
 800318a:	210c      	movs	r1, #12
 800318c:	f7ff fb40 	bl	8002810 <setAngle>

	             break;
 8003190:	e006      	b.n	80031a0 <main+0x19c>

	         case '2':
	             // ManualSteering - pozycjonowanie wobec sygnalow z telefonu

	        	 // zmiana stanu "odbierania" sygnalow
	             systemState.receivingState = '1';
 8003192:	4b07      	ldr	r3, [pc, #28]	; (80031b0 <main+0x1ac>)
 8003194:	2231      	movs	r2, #49	; 0x31
 8003196:	701a      	strb	r2, [r3, #0]

	             break;
 8003198:	e002      	b.n	80031a0 <main+0x19c>

	         default:
	        	 // Default by uniknac "niekontrolowanych" zmian stanu

	        	 // wywolanie funkcji przywracajacej stan poczatkowy - Agnles: 900; 900.
	        	 setDefault();
 800319a:	f7ff fbaf 	bl	80028fc <setDefault>

	        	 break;
 800319e:	46c0      	nop			; (mov r8, r8)
	  	 if (HAL_GPIO_ReadPin(USER_BUTTON2_GPIO_Port, USER_BUTTON2_Pin) != GPIO_PIN_RESET) {
 80031a0:	e76f      	b.n	8003082 <main+0x7e>
 80031a2:	46c0      	nop			; (mov r8, r8)
 80031a4:	20000234 	.word	0x20000234
 80031a8:	200001ec 	.word	0x200001ec
 80031ac:	20000274 	.word	0x20000274
 80031b0:	200001d8 	.word	0x200001d8
 80031b4:	200001d0 	.word	0x200001d0
 80031b8:	200001f4 	.word	0x200001f4
 80031bc:	200001c0 	.word	0x200001c0
 80031c0:	20000080 	.word	0x20000080
 80031c4:	50000400 	.word	0x50000400
 80031c8:	200001dc 	.word	0x200001dc
 80031cc:	3ff00000 	.word	0x3ff00000
 80031d0:	200001c8 	.word	0x200001c8

080031d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031d4:	b590      	push	{r4, r7, lr}
 80031d6:	b09f      	sub	sp, #124	; 0x7c
 80031d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031da:	2440      	movs	r4, #64	; 0x40
 80031dc:	193b      	adds	r3, r7, r4
 80031de:	0018      	movs	r0, r3
 80031e0:	2338      	movs	r3, #56	; 0x38
 80031e2:	001a      	movs	r2, r3
 80031e4:	2100      	movs	r1, #0
 80031e6:	f006 ff45 	bl	800a074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031ea:	232c      	movs	r3, #44	; 0x2c
 80031ec:	18fb      	adds	r3, r7, r3
 80031ee:	0018      	movs	r0, r3
 80031f0:	2314      	movs	r3, #20
 80031f2:	001a      	movs	r2, r3
 80031f4:	2100      	movs	r1, #0
 80031f6:	f006 ff3d 	bl	800a074 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031fa:	1d3b      	adds	r3, r7, #4
 80031fc:	0018      	movs	r0, r3
 80031fe:	2328      	movs	r3, #40	; 0x28
 8003200:	001a      	movs	r2, r3
 8003202:	2100      	movs	r1, #0
 8003204:	f006 ff36 	bl	800a074 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003208:	4b24      	ldr	r3, [pc, #144]	; (800329c <SystemClock_Config+0xc8>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a24      	ldr	r2, [pc, #144]	; (80032a0 <SystemClock_Config+0xcc>)
 800320e:	401a      	ands	r2, r3
 8003210:	4b22      	ldr	r3, [pc, #136]	; (800329c <SystemClock_Config+0xc8>)
 8003212:	2180      	movs	r1, #128	; 0x80
 8003214:	0109      	lsls	r1, r1, #4
 8003216:	430a      	orrs	r2, r1
 8003218:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800321a:	0021      	movs	r1, r4
 800321c:	187b      	adds	r3, r7, r1
 800321e:	2202      	movs	r2, #2
 8003220:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003222:	187b      	adds	r3, r7, r1
 8003224:	2201      	movs	r2, #1
 8003226:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003228:	187b      	adds	r3, r7, r1
 800322a:	2210      	movs	r2, #16
 800322c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800322e:	187b      	adds	r3, r7, r1
 8003230:	2200      	movs	r2, #0
 8003232:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003234:	187b      	adds	r3, r7, r1
 8003236:	0018      	movs	r0, r3
 8003238:	f003 fcec 	bl	8006c14 <HAL_RCC_OscConfig>
 800323c:	1e03      	subs	r3, r0, #0
 800323e:	d001      	beq.n	8003244 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8003240:	f000 f84e 	bl	80032e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003244:	212c      	movs	r1, #44	; 0x2c
 8003246:	187b      	adds	r3, r7, r1
 8003248:	220f      	movs	r2, #15
 800324a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800324c:	187b      	adds	r3, r7, r1
 800324e:	2201      	movs	r2, #1
 8003250:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003252:	187b      	adds	r3, r7, r1
 8003254:	2200      	movs	r2, #0
 8003256:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003258:	187b      	adds	r3, r7, r1
 800325a:	2200      	movs	r2, #0
 800325c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800325e:	187b      	adds	r3, r7, r1
 8003260:	2200      	movs	r2, #0
 8003262:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003264:	187b      	adds	r3, r7, r1
 8003266:	2100      	movs	r1, #0
 8003268:	0018      	movs	r0, r3
 800326a:	f004 f8a7 	bl	80073bc <HAL_RCC_ClockConfig>
 800326e:	1e03      	subs	r3, r0, #0
 8003270:	d001      	beq.n	8003276 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8003272:	f000 f835 	bl	80032e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003276:	1d3b      	adds	r3, r7, #4
 8003278:	2201      	movs	r2, #1
 800327a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800327c:	1d3b      	adds	r3, r7, #4
 800327e:	2200      	movs	r2, #0
 8003280:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003282:	1d3b      	adds	r3, r7, #4
 8003284:	0018      	movs	r0, r3
 8003286:	f004 fabd 	bl	8007804 <HAL_RCCEx_PeriphCLKConfig>
 800328a:	1e03      	subs	r3, r0, #0
 800328c:	d001      	beq.n	8003292 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800328e:	f000 f827 	bl	80032e0 <Error_Handler>
  }
}
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	46bd      	mov	sp, r7
 8003296:	b01f      	add	sp, #124	; 0x7c
 8003298:	bd90      	pop	{r4, r7, pc}
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	40007000 	.word	0x40007000
 80032a0:	ffffe7ff 	.word	0xffffe7ff

080032a4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a08      	ldr	r2, [pc, #32]	; (80032d4 <HAL_UART_RxCpltCallback+0x30>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d10a      	bne.n	80032cc <HAL_UART_RxCpltCallback+0x28>
    	ManualSteering(rxData);
 80032b6:	4b08      	ldr	r3, [pc, #32]	; (80032d8 <HAL_UART_RxCpltCallback+0x34>)
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	0018      	movs	r0, r3
 80032bc:	f7fe fd48 	bl	8001d50 <ManualSteering>
        HAL_UART_Receive_IT(&huart1, &rxData, 1); // Enable interrupt receive again
 80032c0:	4905      	ldr	r1, [pc, #20]	; (80032d8 <HAL_UART_RxCpltCallback+0x34>)
 80032c2:	4b06      	ldr	r3, [pc, #24]	; (80032dc <HAL_UART_RxCpltCallback+0x38>)
 80032c4:	2201      	movs	r2, #1
 80032c6:	0018      	movs	r0, r3
 80032c8:	f005 fb1a 	bl	8008900 <HAL_UART_Receive_IT>
    }
}
 80032cc:	46c0      	nop			; (mov r8, r8)
 80032ce:	46bd      	mov	sp, r7
 80032d0:	b002      	add	sp, #8
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40013800 	.word	0x40013800
 80032d8:	200001ec 	.word	0x200001ec
 80032dc:	20000274 	.word	0x20000274

080032e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032e4:	b672      	cpsid	i
}
 80032e6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032e8:	e7fe      	b.n	80032e8 <Error_Handler+0x8>
	...

080032ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032f0:	4b07      	ldr	r3, [pc, #28]	; (8003310 <HAL_MspInit+0x24>)
 80032f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032f4:	4b06      	ldr	r3, [pc, #24]	; (8003310 <HAL_MspInit+0x24>)
 80032f6:	2101      	movs	r1, #1
 80032f8:	430a      	orrs	r2, r1
 80032fa:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80032fc:	4b04      	ldr	r3, [pc, #16]	; (8003310 <HAL_MspInit+0x24>)
 80032fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003300:	4b03      	ldr	r3, [pc, #12]	; (8003310 <HAL_MspInit+0x24>)
 8003302:	2180      	movs	r1, #128	; 0x80
 8003304:	0549      	lsls	r1, r1, #21
 8003306:	430a      	orrs	r2, r1
 8003308:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800330a:	46c0      	nop			; (mov r8, r8)
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40021000 	.word	0x40021000

08003314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003318:	e7fe      	b.n	8003318 <NMI_Handler+0x4>

0800331a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800331e:	e7fe      	b.n	800331e <HardFault_Handler+0x4>

08003320 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003324:	46c0      	nop			; (mov r8, r8)
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800332e:	46c0      	nop			; (mov r8, r8)
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003338:	f000 fad8 	bl	80038ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800333c:	46c0      	nop			; (mov r8, r8)
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
	...

08003344 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8003348:	4b03      	ldr	r3, [pc, #12]	; (8003358 <DMA1_Channel1_IRQHandler+0x14>)
 800334a:	0018      	movs	r0, r3
 800334c:	f001 f8e7 	bl	800451e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003350:	46c0      	nop			; (mov r8, r8)
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	200000dc 	.word	0x200000dc

0800335c <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8003360:	4b03      	ldr	r3, [pc, #12]	; (8003370 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8003362:	0018      	movs	r0, r3
 8003364:	f001 f8db 	bl	800451e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8003368:	46c0      	nop			; (mov r8, r8)
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	46c0      	nop			; (mov r8, r8)
 8003370:	20000178 	.word	0x20000178

08003374 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003378:	4b03      	ldr	r3, [pc, #12]	; (8003388 <TIM2_IRQHandler+0x14>)
 800337a:	0018      	movs	r0, r3
 800337c:	f004 fd44 	bl	8007e08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003380:	46c0      	nop			; (mov r8, r8)
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	200001f4 	.word	0x200001f4

0800338c <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 global interrupt.
  */
void I2C2_IRQHandler(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8003390:	4b09      	ldr	r3, [pc, #36]	; (80033b8 <I2C2_IRQHandler+0x2c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	699a      	ldr	r2, [r3, #24]
 8003396:	23e0      	movs	r3, #224	; 0xe0
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	4013      	ands	r3, r2
 800339c:	d004      	beq.n	80033a8 <I2C2_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 800339e:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <I2C2_IRQHandler+0x2c>)
 80033a0:	0018      	movs	r0, r3
 80033a2:	f001 fe21 	bl	8004fe8 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 80033a6:	e003      	b.n	80033b0 <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 80033a8:	4b03      	ldr	r3, [pc, #12]	; (80033b8 <I2C2_IRQHandler+0x2c>)
 80033aa:	0018      	movs	r0, r3
 80033ac:	f001 fe02 	bl	8004fb4 <HAL_I2C_EV_IRQHandler>
}
 80033b0:	46c0      	nop			; (mov r8, r8)
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	20000124 	.word	0x20000124

080033bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80033c0:	4b03      	ldr	r3, [pc, #12]	; (80033d0 <USART1_IRQHandler+0x14>)
 80033c2:	0018      	movs	r0, r3
 80033c4:	f005 fafa 	bl	80089bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80033c8:	46c0      	nop			; (mov r8, r8)
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	46c0      	nop			; (mov r8, r8)
 80033d0:	20000274 	.word	0x20000274

080033d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033dc:	4a14      	ldr	r2, [pc, #80]	; (8003430 <_sbrk+0x5c>)
 80033de:	4b15      	ldr	r3, [pc, #84]	; (8003434 <_sbrk+0x60>)
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033e8:	4b13      	ldr	r3, [pc, #76]	; (8003438 <_sbrk+0x64>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d102      	bne.n	80033f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033f0:	4b11      	ldr	r3, [pc, #68]	; (8003438 <_sbrk+0x64>)
 80033f2:	4a12      	ldr	r2, [pc, #72]	; (800343c <_sbrk+0x68>)
 80033f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033f6:	4b10      	ldr	r3, [pc, #64]	; (8003438 <_sbrk+0x64>)
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	18d3      	adds	r3, r2, r3
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	429a      	cmp	r2, r3
 8003402:	d207      	bcs.n	8003414 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003404:	f006 fe50 	bl	800a0a8 <__errno>
 8003408:	0003      	movs	r3, r0
 800340a:	220c      	movs	r2, #12
 800340c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800340e:	2301      	movs	r3, #1
 8003410:	425b      	negs	r3, r3
 8003412:	e009      	b.n	8003428 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003414:	4b08      	ldr	r3, [pc, #32]	; (8003438 <_sbrk+0x64>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800341a:	4b07      	ldr	r3, [pc, #28]	; (8003438 <_sbrk+0x64>)
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	18d2      	adds	r2, r2, r3
 8003422:	4b05      	ldr	r3, [pc, #20]	; (8003438 <_sbrk+0x64>)
 8003424:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003426:	68fb      	ldr	r3, [r7, #12]
}
 8003428:	0018      	movs	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	b006      	add	sp, #24
 800342e:	bd80      	pop	{r7, pc}
 8003430:	20005000 	.word	0x20005000
 8003434:	00000400 	.word	0x00000400
 8003438:	200001f0 	.word	0x200001f0
 800343c:	20000448 	.word	0x20000448

08003440 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003444:	46c0      	nop			; (mov r8, r8)
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
	...

0800344c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003452:	2308      	movs	r3, #8
 8003454:	18fb      	adds	r3, r7, r3
 8003456:	0018      	movs	r0, r3
 8003458:	2310      	movs	r3, #16
 800345a:	001a      	movs	r2, r3
 800345c:	2100      	movs	r1, #0
 800345e:	f006 fe09 	bl	800a074 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003462:	003b      	movs	r3, r7
 8003464:	0018      	movs	r0, r3
 8003466:	2308      	movs	r3, #8
 8003468:	001a      	movs	r2, r3
 800346a:	2100      	movs	r1, #0
 800346c:	f006 fe02 	bl	800a074 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003470:	4b1e      	ldr	r3, [pc, #120]	; (80034ec <MX_TIM2_Init+0xa0>)
 8003472:	2280      	movs	r2, #128	; 0x80
 8003474:	05d2      	lsls	r2, r2, #23
 8003476:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003478:	4b1c      	ldr	r3, [pc, #112]	; (80034ec <MX_TIM2_Init+0xa0>)
 800347a:	2200      	movs	r2, #0
 800347c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800347e:	4b1b      	ldr	r3, [pc, #108]	; (80034ec <MX_TIM2_Init+0xa0>)
 8003480:	2200      	movs	r2, #0
 8003482:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16000-1;
 8003484:	4b19      	ldr	r3, [pc, #100]	; (80034ec <MX_TIM2_Init+0xa0>)
 8003486:	4a1a      	ldr	r2, [pc, #104]	; (80034f0 <MX_TIM2_Init+0xa4>)
 8003488:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800348a:	4b18      	ldr	r3, [pc, #96]	; (80034ec <MX_TIM2_Init+0xa0>)
 800348c:	2200      	movs	r2, #0
 800348e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003490:	4b16      	ldr	r3, [pc, #88]	; (80034ec <MX_TIM2_Init+0xa0>)
 8003492:	2200      	movs	r2, #0
 8003494:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003496:	4b15      	ldr	r3, [pc, #84]	; (80034ec <MX_TIM2_Init+0xa0>)
 8003498:	0018      	movs	r0, r3
 800349a:	f004 fb51 	bl	8007b40 <HAL_TIM_Base_Init>
 800349e:	1e03      	subs	r3, r0, #0
 80034a0:	d001      	beq.n	80034a6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80034a2:	f7ff ff1d 	bl	80032e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034a6:	2108      	movs	r1, #8
 80034a8:	187b      	adds	r3, r7, r1
 80034aa:	2280      	movs	r2, #128	; 0x80
 80034ac:	0152      	lsls	r2, r2, #5
 80034ae:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80034b0:	187a      	adds	r2, r7, r1
 80034b2:	4b0e      	ldr	r3, [pc, #56]	; (80034ec <MX_TIM2_Init+0xa0>)
 80034b4:	0011      	movs	r1, r2
 80034b6:	0018      	movs	r0, r3
 80034b8:	f004 fe54 	bl	8008164 <HAL_TIM_ConfigClockSource>
 80034bc:	1e03      	subs	r3, r0, #0
 80034be:	d001      	beq.n	80034c4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80034c0:	f7ff ff0e 	bl	80032e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80034c4:	003b      	movs	r3, r7
 80034c6:	2220      	movs	r2, #32
 80034c8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034ca:	003b      	movs	r3, r7
 80034cc:	2200      	movs	r2, #0
 80034ce:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80034d0:	003a      	movs	r2, r7
 80034d2:	4b06      	ldr	r3, [pc, #24]	; (80034ec <MX_TIM2_Init+0xa0>)
 80034d4:	0011      	movs	r1, r2
 80034d6:	0018      	movs	r0, r3
 80034d8:	f005 f960 	bl	800879c <HAL_TIMEx_MasterConfigSynchronization>
 80034dc:	1e03      	subs	r3, r0, #0
 80034de:	d001      	beq.n	80034e4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80034e0:	f7ff fefe 	bl	80032e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80034e4:	46c0      	nop			; (mov r8, r8)
 80034e6:	46bd      	mov	sp, r7
 80034e8:	b006      	add	sp, #24
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	200001f4 	.word	0x200001f4
 80034f0:	00003e7f 	.word	0x00003e7f

080034f4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034fa:	2310      	movs	r3, #16
 80034fc:	18fb      	adds	r3, r7, r3
 80034fe:	0018      	movs	r0, r3
 8003500:	2308      	movs	r3, #8
 8003502:	001a      	movs	r2, r3
 8003504:	2100      	movs	r1, #0
 8003506:	f006 fdb5 	bl	800a074 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800350a:	003b      	movs	r3, r7
 800350c:	0018      	movs	r0, r3
 800350e:	2310      	movs	r3, #16
 8003510:	001a      	movs	r2, r3
 8003512:	2100      	movs	r1, #0
 8003514:	f006 fdae 	bl	800a074 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003518:	4b29      	ldr	r3, [pc, #164]	; (80035c0 <MX_TIM3_Init+0xcc>)
 800351a:	4a2a      	ldr	r2, [pc, #168]	; (80035c4 <MX_TIM3_Init+0xd0>)
 800351c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31;
 800351e:	4b28      	ldr	r3, [pc, #160]	; (80035c0 <MX_TIM3_Init+0xcc>)
 8003520:	221f      	movs	r2, #31
 8003522:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003524:	4b26      	ldr	r3, [pc, #152]	; (80035c0 <MX_TIM3_Init+0xcc>)
 8003526:	2200      	movs	r2, #0
 8003528:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 800352a:	4b25      	ldr	r3, [pc, #148]	; (80035c0 <MX_TIM3_Init+0xcc>)
 800352c:	4a26      	ldr	r2, [pc, #152]	; (80035c8 <MX_TIM3_Init+0xd4>)
 800352e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003530:	4b23      	ldr	r3, [pc, #140]	; (80035c0 <MX_TIM3_Init+0xcc>)
 8003532:	2200      	movs	r2, #0
 8003534:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003536:	4b22      	ldr	r3, [pc, #136]	; (80035c0 <MX_TIM3_Init+0xcc>)
 8003538:	2200      	movs	r2, #0
 800353a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800353c:	4b20      	ldr	r3, [pc, #128]	; (80035c0 <MX_TIM3_Init+0xcc>)
 800353e:	0018      	movs	r0, r3
 8003540:	f004 fb90 	bl	8007c64 <HAL_TIM_PWM_Init>
 8003544:	1e03      	subs	r3, r0, #0
 8003546:	d001      	beq.n	800354c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003548:	f7ff feca 	bl	80032e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800354c:	2110      	movs	r1, #16
 800354e:	187b      	adds	r3, r7, r1
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003554:	187b      	adds	r3, r7, r1
 8003556:	2200      	movs	r2, #0
 8003558:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800355a:	187a      	adds	r2, r7, r1
 800355c:	4b18      	ldr	r3, [pc, #96]	; (80035c0 <MX_TIM3_Init+0xcc>)
 800355e:	0011      	movs	r1, r2
 8003560:	0018      	movs	r0, r3
 8003562:	f005 f91b 	bl	800879c <HAL_TIMEx_MasterConfigSynchronization>
 8003566:	1e03      	subs	r3, r0, #0
 8003568:	d001      	beq.n	800356e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800356a:	f7ff feb9 	bl	80032e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800356e:	003b      	movs	r3, r7
 8003570:	2260      	movs	r2, #96	; 0x60
 8003572:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003574:	003b      	movs	r3, r7
 8003576:	2200      	movs	r2, #0
 8003578:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800357a:	003b      	movs	r3, r7
 800357c:	2200      	movs	r2, #0
 800357e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003580:	003b      	movs	r3, r7
 8003582:	2200      	movs	r2, #0
 8003584:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003586:	0039      	movs	r1, r7
 8003588:	4b0d      	ldr	r3, [pc, #52]	; (80035c0 <MX_TIM3_Init+0xcc>)
 800358a:	2204      	movs	r2, #4
 800358c:	0018      	movs	r0, r3
 800358e:	f004 fd23 	bl	8007fd8 <HAL_TIM_PWM_ConfigChannel>
 8003592:	1e03      	subs	r3, r0, #0
 8003594:	d001      	beq.n	800359a <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8003596:	f7ff fea3 	bl	80032e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800359a:	0039      	movs	r1, r7
 800359c:	4b08      	ldr	r3, [pc, #32]	; (80035c0 <MX_TIM3_Init+0xcc>)
 800359e:	220c      	movs	r2, #12
 80035a0:	0018      	movs	r0, r3
 80035a2:	f004 fd19 	bl	8007fd8 <HAL_TIM_PWM_ConfigChannel>
 80035a6:	1e03      	subs	r3, r0, #0
 80035a8:	d001      	beq.n	80035ae <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80035aa:	f7ff fe99 	bl	80032e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80035ae:	4b04      	ldr	r3, [pc, #16]	; (80035c0 <MX_TIM3_Init+0xcc>)
 80035b0:	0018      	movs	r0, r3
 80035b2:	f000 f841 	bl	8003638 <HAL_TIM_MspPostInit>

}
 80035b6:	46c0      	nop			; (mov r8, r8)
 80035b8:	46bd      	mov	sp, r7
 80035ba:	b006      	add	sp, #24
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	20000234 	.word	0x20000234
 80035c4:	40000400 	.word	0x40000400
 80035c8:	00004e1f 	.word	0x00004e1f

080035cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	2380      	movs	r3, #128	; 0x80
 80035da:	05db      	lsls	r3, r3, #23
 80035dc:	429a      	cmp	r2, r3
 80035de:	d10d      	bne.n	80035fc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035e0:	4b08      	ldr	r3, [pc, #32]	; (8003604 <HAL_TIM_Base_MspInit+0x38>)
 80035e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035e4:	4b07      	ldr	r3, [pc, #28]	; (8003604 <HAL_TIM_Base_MspInit+0x38>)
 80035e6:	2101      	movs	r1, #1
 80035e8:	430a      	orrs	r2, r1
 80035ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80035ec:	2200      	movs	r2, #0
 80035ee:	2100      	movs	r1, #0
 80035f0:	200f      	movs	r0, #15
 80035f2:	f000 fdfd 	bl	80041f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80035f6:	200f      	movs	r0, #15
 80035f8:	f000 fe0f 	bl	800421a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80035fc:	46c0      	nop			; (mov r8, r8)
 80035fe:	46bd      	mov	sp, r7
 8003600:	b002      	add	sp, #8
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40021000 	.word	0x40021000

08003608 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a06      	ldr	r2, [pc, #24]	; (8003630 <HAL_TIM_PWM_MspInit+0x28>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d105      	bne.n	8003626 <HAL_TIM_PWM_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800361a:	4b06      	ldr	r3, [pc, #24]	; (8003634 <HAL_TIM_PWM_MspInit+0x2c>)
 800361c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800361e:	4b05      	ldr	r3, [pc, #20]	; (8003634 <HAL_TIM_PWM_MspInit+0x2c>)
 8003620:	2102      	movs	r1, #2
 8003622:	430a      	orrs	r2, r1
 8003624:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	46bd      	mov	sp, r7
 800362a:	b002      	add	sp, #8
 800362c:	bd80      	pop	{r7, pc}
 800362e:	46c0      	nop			; (mov r8, r8)
 8003630:	40000400 	.word	0x40000400
 8003634:	40021000 	.word	0x40021000

08003638 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003638:	b590      	push	{r4, r7, lr}
 800363a:	b08b      	sub	sp, #44	; 0x2c
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003640:	2414      	movs	r4, #20
 8003642:	193b      	adds	r3, r7, r4
 8003644:	0018      	movs	r0, r3
 8003646:	2314      	movs	r3, #20
 8003648:	001a      	movs	r2, r3
 800364a:	2100      	movs	r1, #0
 800364c:	f006 fd12 	bl	800a074 <memset>
  if(timHandle->Instance==TIM3)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a25      	ldr	r2, [pc, #148]	; (80036ec <HAL_TIM_MspPostInit+0xb4>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d143      	bne.n	80036e2 <HAL_TIM_MspPostInit+0xaa>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800365a:	4b25      	ldr	r3, [pc, #148]	; (80036f0 <HAL_TIM_MspPostInit+0xb8>)
 800365c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800365e:	4b24      	ldr	r3, [pc, #144]	; (80036f0 <HAL_TIM_MspPostInit+0xb8>)
 8003660:	2101      	movs	r1, #1
 8003662:	430a      	orrs	r2, r1
 8003664:	62da      	str	r2, [r3, #44]	; 0x2c
 8003666:	4b22      	ldr	r3, [pc, #136]	; (80036f0 <HAL_TIM_MspPostInit+0xb8>)
 8003668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366a:	2201      	movs	r2, #1
 800366c:	4013      	ands	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
 8003670:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003672:	4b1f      	ldr	r3, [pc, #124]	; (80036f0 <HAL_TIM_MspPostInit+0xb8>)
 8003674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003676:	4b1e      	ldr	r3, [pc, #120]	; (80036f0 <HAL_TIM_MspPostInit+0xb8>)
 8003678:	2102      	movs	r1, #2
 800367a:	430a      	orrs	r2, r1
 800367c:	62da      	str	r2, [r3, #44]	; 0x2c
 800367e:	4b1c      	ldr	r3, [pc, #112]	; (80036f0 <HAL_TIM_MspPostInit+0xb8>)
 8003680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003682:	2202      	movs	r2, #2
 8003684:	4013      	ands	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800368a:	193b      	adds	r3, r7, r4
 800368c:	2280      	movs	r2, #128	; 0x80
 800368e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003690:	193b      	adds	r3, r7, r4
 8003692:	2202      	movs	r2, #2
 8003694:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003696:	193b      	adds	r3, r7, r4
 8003698:	2200      	movs	r2, #0
 800369a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800369c:	193b      	adds	r3, r7, r4
 800369e:	2200      	movs	r2, #0
 80036a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80036a2:	193b      	adds	r3, r7, r4
 80036a4:	2202      	movs	r2, #2
 80036a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036a8:	193a      	adds	r2, r7, r4
 80036aa:	23a0      	movs	r3, #160	; 0xa0
 80036ac:	05db      	lsls	r3, r3, #23
 80036ae:	0011      	movs	r1, r2
 80036b0:	0018      	movs	r0, r3
 80036b2:	f001 f81d 	bl	80046f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80036b6:	0021      	movs	r1, r4
 80036b8:	187b      	adds	r3, r7, r1
 80036ba:	2202      	movs	r2, #2
 80036bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036be:	187b      	adds	r3, r7, r1
 80036c0:	2202      	movs	r2, #2
 80036c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c4:	187b      	adds	r3, r7, r1
 80036c6:	2200      	movs	r2, #0
 80036c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ca:	187b      	adds	r3, r7, r1
 80036cc:	2200      	movs	r2, #0
 80036ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80036d0:	187b      	adds	r3, r7, r1
 80036d2:	2202      	movs	r2, #2
 80036d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036d6:	187b      	adds	r3, r7, r1
 80036d8:	4a06      	ldr	r2, [pc, #24]	; (80036f4 <HAL_TIM_MspPostInit+0xbc>)
 80036da:	0019      	movs	r1, r3
 80036dc:	0010      	movs	r0, r2
 80036de:	f001 f807 	bl	80046f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	46bd      	mov	sp, r7
 80036e6:	b00b      	add	sp, #44	; 0x2c
 80036e8:	bd90      	pop	{r4, r7, pc}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	40000400 	.word	0x40000400
 80036f0:	40021000 	.word	0x40021000
 80036f4:	50000400 	.word	0x50000400

080036f8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80036fc:	4b14      	ldr	r3, [pc, #80]	; (8003750 <MX_USART1_UART_Init+0x58>)
 80036fe:	4a15      	ldr	r2, [pc, #84]	; (8003754 <MX_USART1_UART_Init+0x5c>)
 8003700:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003702:	4b13      	ldr	r3, [pc, #76]	; (8003750 <MX_USART1_UART_Init+0x58>)
 8003704:	2296      	movs	r2, #150	; 0x96
 8003706:	0192      	lsls	r2, r2, #6
 8003708:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800370a:	4b11      	ldr	r3, [pc, #68]	; (8003750 <MX_USART1_UART_Init+0x58>)
 800370c:	2200      	movs	r2, #0
 800370e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003710:	4b0f      	ldr	r3, [pc, #60]	; (8003750 <MX_USART1_UART_Init+0x58>)
 8003712:	2200      	movs	r2, #0
 8003714:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003716:	4b0e      	ldr	r3, [pc, #56]	; (8003750 <MX_USART1_UART_Init+0x58>)
 8003718:	2200      	movs	r2, #0
 800371a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800371c:	4b0c      	ldr	r3, [pc, #48]	; (8003750 <MX_USART1_UART_Init+0x58>)
 800371e:	220c      	movs	r2, #12
 8003720:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003722:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <MX_USART1_UART_Init+0x58>)
 8003724:	2200      	movs	r2, #0
 8003726:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003728:	4b09      	ldr	r3, [pc, #36]	; (8003750 <MX_USART1_UART_Init+0x58>)
 800372a:	2200      	movs	r2, #0
 800372c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800372e:	4b08      	ldr	r3, [pc, #32]	; (8003750 <MX_USART1_UART_Init+0x58>)
 8003730:	2200      	movs	r2, #0
 8003732:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003734:	4b06      	ldr	r3, [pc, #24]	; (8003750 <MX_USART1_UART_Init+0x58>)
 8003736:	2200      	movs	r2, #0
 8003738:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800373a:	4b05      	ldr	r3, [pc, #20]	; (8003750 <MX_USART1_UART_Init+0x58>)
 800373c:	0018      	movs	r0, r3
 800373e:	f005 f88b 	bl	8008858 <HAL_UART_Init>
 8003742:	1e03      	subs	r3, r0, #0
 8003744:	d001      	beq.n	800374a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003746:	f7ff fdcb 	bl	80032e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	20000274 	.word	0x20000274
 8003754:	40013800 	.word	0x40013800

08003758 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003758:	b590      	push	{r4, r7, lr}
 800375a:	b089      	sub	sp, #36	; 0x24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003760:	240c      	movs	r4, #12
 8003762:	193b      	adds	r3, r7, r4
 8003764:	0018      	movs	r0, r3
 8003766:	2314      	movs	r3, #20
 8003768:	001a      	movs	r2, r3
 800376a:	2100      	movs	r1, #0
 800376c:	f006 fc82 	bl	800a074 <memset>
  if(uartHandle->Instance==USART1)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a1b      	ldr	r2, [pc, #108]	; (80037e4 <HAL_UART_MspInit+0x8c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d130      	bne.n	80037dc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800377a:	4b1b      	ldr	r3, [pc, #108]	; (80037e8 <HAL_UART_MspInit+0x90>)
 800377c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800377e:	4b1a      	ldr	r3, [pc, #104]	; (80037e8 <HAL_UART_MspInit+0x90>)
 8003780:	2180      	movs	r1, #128	; 0x80
 8003782:	01c9      	lsls	r1, r1, #7
 8003784:	430a      	orrs	r2, r1
 8003786:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003788:	4b17      	ldr	r3, [pc, #92]	; (80037e8 <HAL_UART_MspInit+0x90>)
 800378a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800378c:	4b16      	ldr	r3, [pc, #88]	; (80037e8 <HAL_UART_MspInit+0x90>)
 800378e:	2102      	movs	r1, #2
 8003790:	430a      	orrs	r2, r1
 8003792:	62da      	str	r2, [r3, #44]	; 0x2c
 8003794:	4b14      	ldr	r3, [pc, #80]	; (80037e8 <HAL_UART_MspInit+0x90>)
 8003796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003798:	2202      	movs	r2, #2
 800379a:	4013      	ands	r3, r2
 800379c:	60bb      	str	r3, [r7, #8]
 800379e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80037a0:	0021      	movs	r1, r4
 80037a2:	187b      	adds	r3, r7, r1
 80037a4:	22c0      	movs	r2, #192	; 0xc0
 80037a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a8:	187b      	adds	r3, r7, r1
 80037aa:	2202      	movs	r2, #2
 80037ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ae:	187b      	adds	r3, r7, r1
 80037b0:	2200      	movs	r2, #0
 80037b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037b4:	187b      	adds	r3, r7, r1
 80037b6:	2203      	movs	r2, #3
 80037b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80037ba:	187b      	adds	r3, r7, r1
 80037bc:	2200      	movs	r2, #0
 80037be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037c0:	187b      	adds	r3, r7, r1
 80037c2:	4a0a      	ldr	r2, [pc, #40]	; (80037ec <HAL_UART_MspInit+0x94>)
 80037c4:	0019      	movs	r1, r3
 80037c6:	0010      	movs	r0, r2
 80037c8:	f000 ff92 	bl	80046f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80037cc:	2200      	movs	r2, #0
 80037ce:	2100      	movs	r1, #0
 80037d0:	201b      	movs	r0, #27
 80037d2:	f000 fd0d 	bl	80041f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80037d6:	201b      	movs	r0, #27
 80037d8:	f000 fd1f 	bl	800421a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80037dc:	46c0      	nop			; (mov r8, r8)
 80037de:	46bd      	mov	sp, r7
 80037e0:	b009      	add	sp, #36	; 0x24
 80037e2:	bd90      	pop	{r4, r7, pc}
 80037e4:	40013800 	.word	0x40013800
 80037e8:	40021000 	.word	0x40021000
 80037ec:	50000400 	.word	0x50000400

080037f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80037f0:	480d      	ldr	r0, [pc, #52]	; (8003828 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80037f2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80037f4:	f7ff fe24 	bl	8003440 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037f8:	480c      	ldr	r0, [pc, #48]	; (800382c <LoopForever+0x6>)
  ldr r1, =_edata
 80037fa:	490d      	ldr	r1, [pc, #52]	; (8003830 <LoopForever+0xa>)
  ldr r2, =_sidata
 80037fc:	4a0d      	ldr	r2, [pc, #52]	; (8003834 <LoopForever+0xe>)
  movs r3, #0
 80037fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003800:	e002      	b.n	8003808 <LoopCopyDataInit>

08003802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003806:	3304      	adds	r3, #4

08003808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800380a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800380c:	d3f9      	bcc.n	8003802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800380e:	4a0a      	ldr	r2, [pc, #40]	; (8003838 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003810:	4c0a      	ldr	r4, [pc, #40]	; (800383c <LoopForever+0x16>)
  movs r3, #0
 8003812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003814:	e001      	b.n	800381a <LoopFillZerobss>

08003816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003818:	3204      	adds	r2, #4

0800381a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800381a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800381c:	d3fb      	bcc.n	8003816 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800381e:	f006 fc49 	bl	800a0b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003822:	f7ff fbef 	bl	8003004 <main>

08003826 <LoopForever>:

LoopForever:
    b LoopForever
 8003826:	e7fe      	b.n	8003826 <LoopForever>
   ldr   r0, =_estack
 8003828:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800382c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003830:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8003834:	0800a708 	.word	0x0800a708
  ldr r2, =_sbss
 8003838:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800383c:	20000448 	.word	0x20000448

08003840 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003840:	e7fe      	b.n	8003840 <ADC1_COMP_IRQHandler>
	...

08003844 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800384a:	1dfb      	adds	r3, r7, #7
 800384c:	2200      	movs	r2, #0
 800384e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003850:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <HAL_Init+0x3c>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	4b0a      	ldr	r3, [pc, #40]	; (8003880 <HAL_Init+0x3c>)
 8003856:	2140      	movs	r1, #64	; 0x40
 8003858:	430a      	orrs	r2, r1
 800385a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800385c:	2003      	movs	r0, #3
 800385e:	f000 f811 	bl	8003884 <HAL_InitTick>
 8003862:	1e03      	subs	r3, r0, #0
 8003864:	d003      	beq.n	800386e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003866:	1dfb      	adds	r3, r7, #7
 8003868:	2201      	movs	r2, #1
 800386a:	701a      	strb	r2, [r3, #0]
 800386c:	e001      	b.n	8003872 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800386e:	f7ff fd3d 	bl	80032ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003872:	1dfb      	adds	r3, r7, #7
 8003874:	781b      	ldrb	r3, [r3, #0]
}
 8003876:	0018      	movs	r0, r3
 8003878:	46bd      	mov	sp, r7
 800387a:	b002      	add	sp, #8
 800387c:	bd80      	pop	{r7, pc}
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	40022000 	.word	0x40022000

08003884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003884:	b590      	push	{r4, r7, lr}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800388c:	4b14      	ldr	r3, [pc, #80]	; (80038e0 <HAL_InitTick+0x5c>)
 800388e:	681c      	ldr	r4, [r3, #0]
 8003890:	4b14      	ldr	r3, [pc, #80]	; (80038e4 <HAL_InitTick+0x60>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	0019      	movs	r1, r3
 8003896:	23fa      	movs	r3, #250	; 0xfa
 8003898:	0098      	lsls	r0, r3, #2
 800389a:	f7fc fc35 	bl	8000108 <__udivsi3>
 800389e:	0003      	movs	r3, r0
 80038a0:	0019      	movs	r1, r3
 80038a2:	0020      	movs	r0, r4
 80038a4:	f7fc fc30 	bl	8000108 <__udivsi3>
 80038a8:	0003      	movs	r3, r0
 80038aa:	0018      	movs	r0, r3
 80038ac:	f000 fcc5 	bl	800423a <HAL_SYSTICK_Config>
 80038b0:	1e03      	subs	r3, r0, #0
 80038b2:	d001      	beq.n	80038b8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e00f      	b.n	80038d8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b03      	cmp	r3, #3
 80038bc:	d80b      	bhi.n	80038d6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038be:	6879      	ldr	r1, [r7, #4]
 80038c0:	2301      	movs	r3, #1
 80038c2:	425b      	negs	r3, r3
 80038c4:	2200      	movs	r2, #0
 80038c6:	0018      	movs	r0, r3
 80038c8:	f000 fc92 	bl	80041f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038cc:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <HAL_InitTick+0x64>)
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	e000      	b.n	80038d8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
}
 80038d8:	0018      	movs	r0, r3
 80038da:	46bd      	mov	sp, r7
 80038dc:	b003      	add	sp, #12
 80038de:	bd90      	pop	{r4, r7, pc}
 80038e0:	20000000 	.word	0x20000000
 80038e4:	20000008 	.word	0x20000008
 80038e8:	20000004 	.word	0x20000004

080038ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038f0:	4b05      	ldr	r3, [pc, #20]	; (8003908 <HAL_IncTick+0x1c>)
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	001a      	movs	r2, r3
 80038f6:	4b05      	ldr	r3, [pc, #20]	; (800390c <HAL_IncTick+0x20>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	18d2      	adds	r2, r2, r3
 80038fc:	4b03      	ldr	r3, [pc, #12]	; (800390c <HAL_IncTick+0x20>)
 80038fe:	601a      	str	r2, [r3, #0]
}
 8003900:	46c0      	nop			; (mov r8, r8)
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	20000008 	.word	0x20000008
 800390c:	200002fc 	.word	0x200002fc

08003910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  return uwTick;
 8003914:	4b02      	ldr	r3, [pc, #8]	; (8003920 <HAL_GetTick+0x10>)
 8003916:	681b      	ldr	r3, [r3, #0]
}
 8003918:	0018      	movs	r0, r3
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	200002fc 	.word	0x200002fc

08003924 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e159      	b.n	8003bea <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10a      	bne.n	8003954 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2250      	movs	r2, #80	; 0x50
 8003948:	2100      	movs	r1, #0
 800394a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	0018      	movs	r0, r3
 8003950:	f7ff f988 	bl	8002c64 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003958:	2210      	movs	r2, #16
 800395a:	4013      	ands	r3, r2
 800395c:	2b10      	cmp	r3, #16
 800395e:	d005      	beq.n	800396c <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	2204      	movs	r2, #4
 8003968:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800396a:	d00b      	beq.n	8003984 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003970:	2210      	movs	r2, #16
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2250      	movs	r2, #80	; 0x50
 800397c:	2100      	movs	r1, #0
 800397e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e132      	b.n	8003bea <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003988:	4a9a      	ldr	r2, [pc, #616]	; (8003bf4 <HAL_ADC_Init+0x2d0>)
 800398a:	4013      	ands	r3, r2
 800398c:	2202      	movs	r2, #2
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	2203      	movs	r2, #3
 800399c:	4013      	ands	r3, r2
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d108      	bne.n	80039b4 <HAL_ADC_Init+0x90>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2201      	movs	r2, #1
 80039aa:	4013      	ands	r3, r2
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <HAL_ADC_Init+0x90>
 80039b0:	2301      	movs	r3, #1
 80039b2:	e000      	b.n	80039b6 <HAL_ADC_Init+0x92>
 80039b4:	2300      	movs	r3, #0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d149      	bne.n	8003a4e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	23c0      	movs	r3, #192	; 0xc0
 80039c0:	061b      	lsls	r3, r3, #24
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d00b      	beq.n	80039de <HAL_ADC_Init+0xba>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	2380      	movs	r3, #128	; 0x80
 80039cc:	05db      	lsls	r3, r3, #23
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d005      	beq.n	80039de <HAL_ADC_Init+0xba>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	2380      	movs	r3, #128	; 0x80
 80039d8:	061b      	lsls	r3, r3, #24
 80039da:	429a      	cmp	r2, r3
 80039dc:	d111      	bne.n	8003a02 <HAL_ADC_Init+0xde>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	0092      	lsls	r2, r2, #2
 80039ea:	0892      	lsrs	r2, r2, #2
 80039ec:	611a      	str	r2, [r3, #16]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6919      	ldr	r1, [r3, #16]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	611a      	str	r2, [r3, #16]
 8003a00:	e014      	b.n	8003a2c <HAL_ADC_Init+0x108>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	0092      	lsls	r2, r2, #2
 8003a0e:	0892      	lsrs	r2, r2, #2
 8003a10:	611a      	str	r2, [r3, #16]
 8003a12:	4b79      	ldr	r3, [pc, #484]	; (8003bf8 <HAL_ADC_Init+0x2d4>)
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	4b78      	ldr	r3, [pc, #480]	; (8003bf8 <HAL_ADC_Init+0x2d4>)
 8003a18:	4978      	ldr	r1, [pc, #480]	; (8003bfc <HAL_ADC_Init+0x2d8>)
 8003a1a:	400a      	ands	r2, r1
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	4b76      	ldr	r3, [pc, #472]	; (8003bf8 <HAL_ADC_Init+0x2d4>)
 8003a20:	6819      	ldr	r1, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	4b74      	ldr	r3, [pc, #464]	; (8003bf8 <HAL_ADC_Init+0x2d4>)
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2118      	movs	r1, #24
 8003a38:	438a      	bics	r2, r1
 8003a3a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68d9      	ldr	r1, [r3, #12]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689a      	ldr	r2, [r3, #8]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8003a4e:	4b6a      	ldr	r3, [pc, #424]	; (8003bf8 <HAL_ADC_Init+0x2d4>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	4b69      	ldr	r3, [pc, #420]	; (8003bf8 <HAL_ADC_Init+0x2d4>)
 8003a54:	496a      	ldr	r1, [pc, #424]	; (8003c00 <HAL_ADC_Init+0x2dc>)
 8003a56:	400a      	ands	r2, r1
 8003a58:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8003a5a:	4b67      	ldr	r3, [pc, #412]	; (8003bf8 <HAL_ADC_Init+0x2d4>)
 8003a5c:	6819      	ldr	r1, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a62:	065a      	lsls	r2, r3, #25
 8003a64:	4b64      	ldr	r3, [pc, #400]	; (8003bf8 <HAL_ADC_Init+0x2d4>)
 8003a66:	430a      	orrs	r2, r1
 8003a68:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	2380      	movs	r3, #128	; 0x80
 8003a72:	055b      	lsls	r3, r3, #21
 8003a74:	4013      	ands	r3, r2
 8003a76:	d108      	bne.n	8003a8a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2180      	movs	r1, #128	; 0x80
 8003a84:	0549      	lsls	r1, r1, #21
 8003a86:	430a      	orrs	r2, r1
 8003a88:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68da      	ldr	r2, [r3, #12]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	495b      	ldr	r1, [pc, #364]	; (8003c04 <HAL_ADC_Init+0x2e0>)
 8003a96:	400a      	ands	r2, r1
 8003a98:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68d9      	ldr	r1, [r3, #12]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d101      	bne.n	8003ab0 <HAL_ADC_Init+0x18c>
 8003aac:	2304      	movs	r3, #4
 8003aae:	e000      	b.n	8003ab2 <HAL_ADC_Init+0x18e>
 8003ab0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003ab2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2020      	movs	r0, #32
 8003ab8:	5c1b      	ldrb	r3, [r3, r0]
 8003aba:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003abc:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	202c      	movs	r0, #44	; 0x2c
 8003ac2:	5c1b      	ldrb	r3, [r3, r0]
 8003ac4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003ac6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003acc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8003ad4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003adc:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aea:	23c2      	movs	r3, #194	; 0xc2
 8003aec:	33ff      	adds	r3, #255	; 0xff
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d00b      	beq.n	8003b0a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68d9      	ldr	r1, [r3, #12]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003b00:	431a      	orrs	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2221      	movs	r2, #33	; 0x21
 8003b0e:	5c9b      	ldrb	r3, [r3, r2]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d11a      	bne.n	8003b4a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2220      	movs	r2, #32
 8003b18:	5c9b      	ldrb	r3, [r3, r2]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d109      	bne.n	8003b32 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68da      	ldr	r2, [r3, #12]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2180      	movs	r1, #128	; 0x80
 8003b2a:	0249      	lsls	r1, r1, #9
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	60da      	str	r2, [r3, #12]
 8003b30:	e00b      	b.n	8003b4a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b36:	2220      	movs	r2, #32
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b42:	2201      	movs	r2, #1
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d11f      	bne.n	8003b92 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	691a      	ldr	r2, [r3, #16]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	492a      	ldr	r1, [pc, #168]	; (8003c08 <HAL_ADC_Init+0x2e4>)
 8003b5e:	400a      	ands	r2, r1
 8003b60:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6919      	ldr	r1, [r3, #16]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8003b70:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8003b76:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691a      	ldr	r2, [r3, #16]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	611a      	str	r2, [r3, #16]
 8003b90:	e00e      	b.n	8003bb0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d107      	bne.n	8003bb0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	691a      	ldr	r2, [r3, #16]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2101      	movs	r1, #1
 8003bac:	438a      	bics	r2, r1
 8003bae:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695a      	ldr	r2, [r3, #20]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2107      	movs	r1, #7
 8003bbc:	438a      	bics	r2, r1
 8003bbe:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6959      	ldr	r1, [r3, #20]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bdc:	2203      	movs	r2, #3
 8003bde:	4393      	bics	r3, r2
 8003be0:	2201      	movs	r2, #1
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	0018      	movs	r0, r3
 8003bec:	46bd      	mov	sp, r7
 8003bee:	b002      	add	sp, #8
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	46c0      	nop			; (mov r8, r8)
 8003bf4:	fffffefd 	.word	0xfffffefd
 8003bf8:	40012708 	.word	0x40012708
 8003bfc:	ffc3ffff 	.word	0xffc3ffff
 8003c00:	fdffffff 	.word	0xfdffffff
 8003c04:	fffe0219 	.word	0xfffe0219
 8003c08:	fffffc03 	.word	0xfffffc03

08003c0c <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003c0c:	b590      	push	{r4, r7, lr}
 8003c0e:	b087      	sub	sp, #28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c18:	2317      	movs	r3, #23
 8003c1a:	18fb      	adds	r3, r7, r3
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	2204      	movs	r2, #4
 8003c28:	4013      	ands	r3, r2
 8003c2a:	d15e      	bne.n	8003cea <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2250      	movs	r2, #80	; 0x50
 8003c30:	5c9b      	ldrb	r3, [r3, r2]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d101      	bne.n	8003c3a <HAL_ADC_Start_DMA+0x2e>
 8003c36:	2302      	movs	r3, #2
 8003c38:	e05e      	b.n	8003cf8 <HAL_ADC_Start_DMA+0xec>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2250      	movs	r2, #80	; 0x50
 8003c3e:	2101      	movs	r1, #1
 8003c40:	5499      	strb	r1, [r3, r2]

    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d007      	beq.n	8003c6a <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003c5a:	2317      	movs	r3, #23
 8003c5c:	18fc      	adds	r4, r7, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	0018      	movs	r0, r3
 8003c62:	f000 f90d 	bl	8003e80 <ADC_Enable>
 8003c66:	0003      	movs	r3, r0
 8003c68:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003c6a:	2317      	movs	r3, #23
 8003c6c:	18fb      	adds	r3, r7, r3
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d13e      	bne.n	8003cf2 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c78:	4a21      	ldr	r2, [pc, #132]	; (8003d00 <HAL_ADC_Start_DMA+0xf4>)
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	2280      	movs	r2, #128	; 0x80
 8003c7e:	0052      	lsls	r2, r2, #1
 8003c80:	431a      	orrs	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2250      	movs	r2, #80	; 0x50
 8003c90:	2100      	movs	r1, #0
 8003c92:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c98:	4a1a      	ldr	r2, [pc, #104]	; (8003d04 <HAL_ADC_Start_DMA+0xf8>)
 8003c9a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca0:	4a19      	ldr	r2, [pc, #100]	; (8003d08 <HAL_ADC_Start_DMA+0xfc>)
 8003ca2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca8:	4a18      	ldr	r2, [pc, #96]	; (8003d0c <HAL_ADC_Start_DMA+0x100>)
 8003caa:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	221c      	movs	r2, #28
 8003cb2:	601a      	str	r2, [r3, #0]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2110      	movs	r1, #16
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	3340      	adds	r3, #64	; 0x40
 8003cce:	0019      	movs	r1, r3
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f000 fb36 	bl	8004344 <HAL_DMA_Start_IT>

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2104      	movs	r1, #4
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	609a      	str	r2, [r3, #8]
 8003ce8:	e003      	b.n	8003cf2 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003cea:	2317      	movs	r3, #23
 8003cec:	18fb      	adds	r3, r7, r3
 8003cee:	2202      	movs	r2, #2
 8003cf0:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8003cf2:	2317      	movs	r3, #23
 8003cf4:	18fb      	adds	r3, r7, r3
 8003cf6:	781b      	ldrb	r3, [r3, #0]
}
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	b007      	add	sp, #28
 8003cfe:	bd90      	pop	{r4, r7, pc}
 8003d00:	fffff0fe 	.word	0xfffff0fe
 8003d04:	08003f51 	.word	0x08003f51
 8003d08:	08004005 	.word	0x08004005
 8003d0c:	08004023 	.word	0x08004023

08003d10 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003d18:	46c0      	nop			; (mov r8, r8)
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	b002      	add	sp, #8
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003d28:	46c0      	nop			; (mov r8, r8)
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	b002      	add	sp, #8
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003d38:	46c0      	nop			; (mov r8, r8)
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	b002      	add	sp, #8
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2250      	movs	r2, #80	; 0x50
 8003d4e:	5c9b      	ldrb	r3, [r3, r2]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d101      	bne.n	8003d58 <HAL_ADC_ConfigChannel+0x18>
 8003d54:	2302      	movs	r3, #2
 8003d56:	e085      	b.n	8003e64 <HAL_ADC_ConfigChannel+0x124>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2250      	movs	r2, #80	; 0x50
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	2204      	movs	r2, #4
 8003d68:	4013      	ands	r3, r2
 8003d6a:	d00b      	beq.n	8003d84 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d70:	2220      	movs	r2, #32
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2250      	movs	r2, #80	; 0x50
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e06f      	b.n	8003e64 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	4a38      	ldr	r2, [pc, #224]	; (8003e6c <HAL_ADC_ConfigChannel+0x12c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d035      	beq.n	8003dfa <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	035b      	lsls	r3, r3, #13
 8003d9a:	0b5a      	lsrs	r2, r3, #13
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	2380      	movs	r3, #128	; 0x80
 8003daa:	02db      	lsls	r3, r3, #11
 8003dac:	4013      	ands	r3, r2
 8003dae:	d009      	beq.n	8003dc4 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8003db0:	4b2f      	ldr	r3, [pc, #188]	; (8003e70 <HAL_ADC_ConfigChannel+0x130>)
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	4b2e      	ldr	r3, [pc, #184]	; (8003e70 <HAL_ADC_ConfigChannel+0x130>)
 8003db6:	2180      	movs	r1, #128	; 0x80
 8003db8:	0409      	lsls	r1, r1, #16
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003dbe:	200a      	movs	r0, #10
 8003dc0:	f000 f94a 	bl	8004058 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	2380      	movs	r3, #128	; 0x80
 8003dca:	029b      	lsls	r3, r3, #10
 8003dcc:	4013      	ands	r3, r2
 8003dce:	d006      	beq.n	8003dde <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8003dd0:	4b27      	ldr	r3, [pc, #156]	; (8003e70 <HAL_ADC_ConfigChannel+0x130>)
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	4b26      	ldr	r3, [pc, #152]	; (8003e70 <HAL_ADC_ConfigChannel+0x130>)
 8003dd6:	2180      	movs	r1, #128	; 0x80
 8003dd8:	03c9      	lsls	r1, r1, #15
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	2380      	movs	r3, #128	; 0x80
 8003de4:	025b      	lsls	r3, r3, #9
 8003de6:	4013      	ands	r3, r2
 8003de8:	d037      	beq.n	8003e5a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 8003dea:	4b21      	ldr	r3, [pc, #132]	; (8003e70 <HAL_ADC_ConfigChannel+0x130>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	4b20      	ldr	r3, [pc, #128]	; (8003e70 <HAL_ADC_ConfigChannel+0x130>)
 8003df0:	2180      	movs	r1, #128	; 0x80
 8003df2:	0449      	lsls	r1, r1, #17
 8003df4:	430a      	orrs	r2, r1
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	e02f      	b.n	8003e5a <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	035b      	lsls	r3, r3, #13
 8003e06:	0b5b      	lsrs	r3, r3, #13
 8003e08:	43d9      	mvns	r1, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	400a      	ands	r2, r1
 8003e10:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	2380      	movs	r3, #128	; 0x80
 8003e18:	02db      	lsls	r3, r3, #11
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	d005      	beq.n	8003e2a <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8003e1e:	4b14      	ldr	r3, [pc, #80]	; (8003e70 <HAL_ADC_ConfigChannel+0x130>)
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	4b13      	ldr	r3, [pc, #76]	; (8003e70 <HAL_ADC_ConfigChannel+0x130>)
 8003e24:	4913      	ldr	r1, [pc, #76]	; (8003e74 <HAL_ADC_ConfigChannel+0x134>)
 8003e26:	400a      	ands	r2, r1
 8003e28:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	2380      	movs	r3, #128	; 0x80
 8003e30:	029b      	lsls	r3, r3, #10
 8003e32:	4013      	ands	r3, r2
 8003e34:	d005      	beq.n	8003e42 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8003e36:	4b0e      	ldr	r3, [pc, #56]	; (8003e70 <HAL_ADC_ConfigChannel+0x130>)
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	4b0d      	ldr	r3, [pc, #52]	; (8003e70 <HAL_ADC_ConfigChannel+0x130>)
 8003e3c:	490e      	ldr	r1, [pc, #56]	; (8003e78 <HAL_ADC_ConfigChannel+0x138>)
 8003e3e:	400a      	ands	r2, r1
 8003e40:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	2380      	movs	r3, #128	; 0x80
 8003e48:	025b      	lsls	r3, r3, #9
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	d005      	beq.n	8003e5a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 8003e4e:	4b08      	ldr	r3, [pc, #32]	; (8003e70 <HAL_ADC_ConfigChannel+0x130>)
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	4b07      	ldr	r3, [pc, #28]	; (8003e70 <HAL_ADC_ConfigChannel+0x130>)
 8003e54:	4909      	ldr	r1, [pc, #36]	; (8003e7c <HAL_ADC_ConfigChannel+0x13c>)
 8003e56:	400a      	ands	r2, r1
 8003e58:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2250      	movs	r2, #80	; 0x50
 8003e5e:	2100      	movs	r1, #0
 8003e60:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	0018      	movs	r0, r3
 8003e66:	46bd      	mov	sp, r7
 8003e68:	b002      	add	sp, #8
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	00001001 	.word	0x00001001
 8003e70:	40012708 	.word	0x40012708
 8003e74:	ff7fffff 	.word	0xff7fffff
 8003e78:	ffbfffff 	.word	0xffbfffff
 8003e7c:	feffffff 	.word	0xfeffffff

08003e80 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	2203      	movs	r2, #3
 8003e94:	4013      	ands	r3, r2
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d108      	bne.n	8003eac <ADC_Enable+0x2c>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <ADC_Enable+0x2c>
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e000      	b.n	8003eae <ADC_Enable+0x2e>
 8003eac:	2300      	movs	r3, #0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d146      	bne.n	8003f40 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	4a24      	ldr	r2, [pc, #144]	; (8003f4c <ADC_Enable+0xcc>)
 8003eba:	4013      	ands	r3, r2
 8003ebc:	d00d      	beq.n	8003eda <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec2:	2210      	movs	r2, #16
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ece:	2201      	movs	r2, #1
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e033      	b.n	8003f42 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8003eea:	2001      	movs	r0, #1
 8003eec:	f000 f8b4 	bl	8004058 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ef0:	f7ff fd0e 	bl	8003910 <HAL_GetTick>
 8003ef4:	0003      	movs	r3, r0
 8003ef6:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003ef8:	e01b      	b.n	8003f32 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003efa:	f7ff fd09 	bl	8003910 <HAL_GetTick>
 8003efe:	0002      	movs	r2, r0
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b0a      	cmp	r3, #10
 8003f06:	d914      	bls.n	8003f32 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	4013      	ands	r3, r2
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d00d      	beq.n	8003f32 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1a:	2210      	movs	r2, #16
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f26:	2201      	movs	r2, #1
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e007      	b.n	8003f42 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d1dc      	bne.n	8003efa <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	0018      	movs	r0, r3
 8003f44:	46bd      	mov	sp, r7
 8003f46:	b004      	add	sp, #16
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	46c0      	nop			; (mov r8, r8)
 8003f4c:	80000017 	.word	0x80000017

08003f50 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f62:	2250      	movs	r2, #80	; 0x50
 8003f64:	4013      	ands	r3, r2
 8003f66:	d141      	bne.n	8003fec <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6c:	2280      	movs	r2, #128	; 0x80
 8003f6e:	0092      	lsls	r2, r2, #2
 8003f70:	431a      	orrs	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68da      	ldr	r2, [r3, #12]
 8003f7c:	23c0      	movs	r3, #192	; 0xc0
 8003f7e:	011b      	lsls	r3, r3, #4
 8003f80:	4013      	ands	r3, r2
 8003f82:	d12e      	bne.n	8003fe2 <ADC_DMAConvCplt+0x92>
        (hadc->Init.ContinuousConvMode == DISABLE))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2220      	movs	r2, #32
 8003f88:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d129      	bne.n	8003fe2 <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2208      	movs	r2, #8
 8003f96:	4013      	ands	r3, r2
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d122      	bne.n	8003fe2 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	2204      	movs	r2, #4
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	d110      	bne.n	8003fca <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	210c      	movs	r1, #12
 8003fb4:	438a      	bics	r2, r1
 8003fb6:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fbc:	4a10      	ldr	r2, [pc, #64]	; (8004000 <ADC_DMAConvCplt+0xb0>)
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	655a      	str	r2, [r3, #84]	; 0x54
 8003fc8:	e00b      	b.n	8003fe2 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fce:	2220      	movs	r2, #32
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fda:	2201      	movs	r2, #1
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	f7ff fe93 	bl	8003d10 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003fea:	e005      	b.n	8003ff8 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	0010      	movs	r0, r2
 8003ff6:	4798      	blx	r3
}
 8003ff8:	46c0      	nop			; (mov r8, r8)
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	b004      	add	sp, #16
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	fffffefe 	.word	0xfffffefe

08004004 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004010:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	0018      	movs	r0, r3
 8004016:	f7ff fe83 	bl	8003d20 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800401a:	46c0      	nop			; (mov r8, r8)
 800401c:	46bd      	mov	sp, r7
 800401e:	b004      	add	sp, #16
 8004020:	bd80      	pop	{r7, pc}

08004022 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b084      	sub	sp, #16
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004034:	2240      	movs	r2, #64	; 0x40
 8004036:	431a      	orrs	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004040:	2204      	movs	r2, #4
 8004042:	431a      	orrs	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	0018      	movs	r0, r3
 800404c:	f7ff fe70 	bl	8003d30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004050:	46c0      	nop			; (mov r8, r8)
 8004052:	46bd      	mov	sp, r7
 8004054:	b004      	add	sp, #16
 8004056:	bd80      	pop	{r7, pc}

08004058 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8004060:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <ADC_DelayMicroSecond+0x38>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	490b      	ldr	r1, [pc, #44]	; (8004094 <ADC_DelayMicroSecond+0x3c>)
 8004066:	0018      	movs	r0, r3
 8004068:	f7fc f84e 	bl	8000108 <__udivsi3>
 800406c:	0003      	movs	r3, r0
 800406e:	001a      	movs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4353      	muls	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8004076:	e002      	b.n	800407e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	3b01      	subs	r3, #1
 800407c:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1f9      	bne.n	8004078 <ADC_DelayMicroSecond+0x20>
  }
}
 8004084:	46c0      	nop			; (mov r8, r8)
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	46bd      	mov	sp, r7
 800408a:	b004      	add	sp, #16
 800408c:	bd80      	pop	{r7, pc}
 800408e:	46c0      	nop			; (mov r8, r8)
 8004090:	20000000 	.word	0x20000000
 8004094:	000f4240 	.word	0x000f4240

08004098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	0002      	movs	r2, r0
 80040a0:	1dfb      	adds	r3, r7, #7
 80040a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80040a4:	1dfb      	adds	r3, r7, #7
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	2b7f      	cmp	r3, #127	; 0x7f
 80040aa:	d809      	bhi.n	80040c0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040ac:	1dfb      	adds	r3, r7, #7
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	001a      	movs	r2, r3
 80040b2:	231f      	movs	r3, #31
 80040b4:	401a      	ands	r2, r3
 80040b6:	4b04      	ldr	r3, [pc, #16]	; (80040c8 <__NVIC_EnableIRQ+0x30>)
 80040b8:	2101      	movs	r1, #1
 80040ba:	4091      	lsls	r1, r2
 80040bc:	000a      	movs	r2, r1
 80040be:	601a      	str	r2, [r3, #0]
  }
}
 80040c0:	46c0      	nop			; (mov r8, r8)
 80040c2:	46bd      	mov	sp, r7
 80040c4:	b002      	add	sp, #8
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	e000e100 	.word	0xe000e100

080040cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040cc:	b590      	push	{r4, r7, lr}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	0002      	movs	r2, r0
 80040d4:	6039      	str	r1, [r7, #0]
 80040d6:	1dfb      	adds	r3, r7, #7
 80040d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80040da:	1dfb      	adds	r3, r7, #7
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	2b7f      	cmp	r3, #127	; 0x7f
 80040e0:	d828      	bhi.n	8004134 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80040e2:	4a2f      	ldr	r2, [pc, #188]	; (80041a0 <__NVIC_SetPriority+0xd4>)
 80040e4:	1dfb      	adds	r3, r7, #7
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	b25b      	sxtb	r3, r3
 80040ea:	089b      	lsrs	r3, r3, #2
 80040ec:	33c0      	adds	r3, #192	; 0xc0
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	589b      	ldr	r3, [r3, r2]
 80040f2:	1dfa      	adds	r2, r7, #7
 80040f4:	7812      	ldrb	r2, [r2, #0]
 80040f6:	0011      	movs	r1, r2
 80040f8:	2203      	movs	r2, #3
 80040fa:	400a      	ands	r2, r1
 80040fc:	00d2      	lsls	r2, r2, #3
 80040fe:	21ff      	movs	r1, #255	; 0xff
 8004100:	4091      	lsls	r1, r2
 8004102:	000a      	movs	r2, r1
 8004104:	43d2      	mvns	r2, r2
 8004106:	401a      	ands	r2, r3
 8004108:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	019b      	lsls	r3, r3, #6
 800410e:	22ff      	movs	r2, #255	; 0xff
 8004110:	401a      	ands	r2, r3
 8004112:	1dfb      	adds	r3, r7, #7
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	0018      	movs	r0, r3
 8004118:	2303      	movs	r3, #3
 800411a:	4003      	ands	r3, r0
 800411c:	00db      	lsls	r3, r3, #3
 800411e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004120:	481f      	ldr	r0, [pc, #124]	; (80041a0 <__NVIC_SetPriority+0xd4>)
 8004122:	1dfb      	adds	r3, r7, #7
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	b25b      	sxtb	r3, r3
 8004128:	089b      	lsrs	r3, r3, #2
 800412a:	430a      	orrs	r2, r1
 800412c:	33c0      	adds	r3, #192	; 0xc0
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004132:	e031      	b.n	8004198 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004134:	4a1b      	ldr	r2, [pc, #108]	; (80041a4 <__NVIC_SetPriority+0xd8>)
 8004136:	1dfb      	adds	r3, r7, #7
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	0019      	movs	r1, r3
 800413c:	230f      	movs	r3, #15
 800413e:	400b      	ands	r3, r1
 8004140:	3b08      	subs	r3, #8
 8004142:	089b      	lsrs	r3, r3, #2
 8004144:	3306      	adds	r3, #6
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	18d3      	adds	r3, r2, r3
 800414a:	3304      	adds	r3, #4
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	1dfa      	adds	r2, r7, #7
 8004150:	7812      	ldrb	r2, [r2, #0]
 8004152:	0011      	movs	r1, r2
 8004154:	2203      	movs	r2, #3
 8004156:	400a      	ands	r2, r1
 8004158:	00d2      	lsls	r2, r2, #3
 800415a:	21ff      	movs	r1, #255	; 0xff
 800415c:	4091      	lsls	r1, r2
 800415e:	000a      	movs	r2, r1
 8004160:	43d2      	mvns	r2, r2
 8004162:	401a      	ands	r2, r3
 8004164:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	019b      	lsls	r3, r3, #6
 800416a:	22ff      	movs	r2, #255	; 0xff
 800416c:	401a      	ands	r2, r3
 800416e:	1dfb      	adds	r3, r7, #7
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	0018      	movs	r0, r3
 8004174:	2303      	movs	r3, #3
 8004176:	4003      	ands	r3, r0
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800417c:	4809      	ldr	r0, [pc, #36]	; (80041a4 <__NVIC_SetPriority+0xd8>)
 800417e:	1dfb      	adds	r3, r7, #7
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	001c      	movs	r4, r3
 8004184:	230f      	movs	r3, #15
 8004186:	4023      	ands	r3, r4
 8004188:	3b08      	subs	r3, #8
 800418a:	089b      	lsrs	r3, r3, #2
 800418c:	430a      	orrs	r2, r1
 800418e:	3306      	adds	r3, #6
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	18c3      	adds	r3, r0, r3
 8004194:	3304      	adds	r3, #4
 8004196:	601a      	str	r2, [r3, #0]
}
 8004198:	46c0      	nop			; (mov r8, r8)
 800419a:	46bd      	mov	sp, r7
 800419c:	b003      	add	sp, #12
 800419e:	bd90      	pop	{r4, r7, pc}
 80041a0:	e000e100 	.word	0xe000e100
 80041a4:	e000ed00 	.word	0xe000ed00

080041a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	1e5a      	subs	r2, r3, #1
 80041b4:	2380      	movs	r3, #128	; 0x80
 80041b6:	045b      	lsls	r3, r3, #17
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d301      	bcc.n	80041c0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041bc:	2301      	movs	r3, #1
 80041be:	e010      	b.n	80041e2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041c0:	4b0a      	ldr	r3, [pc, #40]	; (80041ec <SysTick_Config+0x44>)
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	3a01      	subs	r2, #1
 80041c6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041c8:	2301      	movs	r3, #1
 80041ca:	425b      	negs	r3, r3
 80041cc:	2103      	movs	r1, #3
 80041ce:	0018      	movs	r0, r3
 80041d0:	f7ff ff7c 	bl	80040cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041d4:	4b05      	ldr	r3, [pc, #20]	; (80041ec <SysTick_Config+0x44>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041da:	4b04      	ldr	r3, [pc, #16]	; (80041ec <SysTick_Config+0x44>)
 80041dc:	2207      	movs	r2, #7
 80041de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	0018      	movs	r0, r3
 80041e4:	46bd      	mov	sp, r7
 80041e6:	b002      	add	sp, #8
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	46c0      	nop			; (mov r8, r8)
 80041ec:	e000e010 	.word	0xe000e010

080041f0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60b9      	str	r1, [r7, #8]
 80041f8:	607a      	str	r2, [r7, #4]
 80041fa:	210f      	movs	r1, #15
 80041fc:	187b      	adds	r3, r7, r1
 80041fe:	1c02      	adds	r2, r0, #0
 8004200:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	187b      	adds	r3, r7, r1
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	b25b      	sxtb	r3, r3
 800420a:	0011      	movs	r1, r2
 800420c:	0018      	movs	r0, r3
 800420e:	f7ff ff5d 	bl	80040cc <__NVIC_SetPriority>
}
 8004212:	46c0      	nop			; (mov r8, r8)
 8004214:	46bd      	mov	sp, r7
 8004216:	b004      	add	sp, #16
 8004218:	bd80      	pop	{r7, pc}

0800421a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b082      	sub	sp, #8
 800421e:	af00      	add	r7, sp, #0
 8004220:	0002      	movs	r2, r0
 8004222:	1dfb      	adds	r3, r7, #7
 8004224:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004226:	1dfb      	adds	r3, r7, #7
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	b25b      	sxtb	r3, r3
 800422c:	0018      	movs	r0, r3
 800422e:	f7ff ff33 	bl	8004098 <__NVIC_EnableIRQ>
}
 8004232:	46c0      	nop			; (mov r8, r8)
 8004234:	46bd      	mov	sp, r7
 8004236:	b002      	add	sp, #8
 8004238:	bd80      	pop	{r7, pc}

0800423a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b082      	sub	sp, #8
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	0018      	movs	r0, r3
 8004246:	f7ff ffaf 	bl	80041a8 <SysTick_Config>
 800424a:	0003      	movs	r3, r0
}
 800424c:	0018      	movs	r0, r3
 800424e:	46bd      	mov	sp, r7
 8004250:	b002      	add	sp, #8
 8004252:	bd80      	pop	{r7, pc}

08004254 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e061      	b.n	800432a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a32      	ldr	r2, [pc, #200]	; (8004334 <HAL_DMA_Init+0xe0>)
 800426c:	4694      	mov	ip, r2
 800426e:	4463      	add	r3, ip
 8004270:	2114      	movs	r1, #20
 8004272:	0018      	movs	r0, r3
 8004274:	f7fb ff48 	bl	8000108 <__udivsi3>
 8004278:	0003      	movs	r3, r0
 800427a:	009a      	lsls	r2, r3, #2
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a2d      	ldr	r2, [pc, #180]	; (8004338 <HAL_DMA_Init+0xe4>)
 8004284:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2225      	movs	r2, #37	; 0x25
 800428a:	2102      	movs	r1, #2
 800428c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	4a28      	ldr	r2, [pc, #160]	; (800433c <HAL_DMA_Init+0xe8>)
 800429a:	4013      	ands	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80042a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	2380      	movs	r3, #128	; 0x80
 80042da:	01db      	lsls	r3, r3, #7
 80042dc:	429a      	cmp	r2, r3
 80042de:	d018      	beq.n	8004312 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80042e0:	4b17      	ldr	r3, [pc, #92]	; (8004340 <HAL_DMA_Init+0xec>)
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e8:	211c      	movs	r1, #28
 80042ea:	400b      	ands	r3, r1
 80042ec:	210f      	movs	r1, #15
 80042ee:	4099      	lsls	r1, r3
 80042f0:	000b      	movs	r3, r1
 80042f2:	43d9      	mvns	r1, r3
 80042f4:	4b12      	ldr	r3, [pc, #72]	; (8004340 <HAL_DMA_Init+0xec>)
 80042f6:	400a      	ands	r2, r1
 80042f8:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80042fa:	4b11      	ldr	r3, [pc, #68]	; (8004340 <HAL_DMA_Init+0xec>)
 80042fc:	6819      	ldr	r1, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004306:	201c      	movs	r0, #28
 8004308:	4003      	ands	r3, r0
 800430a:	409a      	lsls	r2, r3
 800430c:	4b0c      	ldr	r3, [pc, #48]	; (8004340 <HAL_DMA_Init+0xec>)
 800430e:	430a      	orrs	r2, r1
 8004310:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2225      	movs	r2, #37	; 0x25
 800431c:	2101      	movs	r1, #1
 800431e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2224      	movs	r2, #36	; 0x24
 8004324:	2100      	movs	r1, #0
 8004326:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	0018      	movs	r0, r3
 800432c:	46bd      	mov	sp, r7
 800432e:	b004      	add	sp, #16
 8004330:	bd80      	pop	{r7, pc}
 8004332:	46c0      	nop			; (mov r8, r8)
 8004334:	bffdfff8 	.word	0xbffdfff8
 8004338:	40020000 	.word	0x40020000
 800433c:	ffff800f 	.word	0xffff800f
 8004340:	400200a8 	.word	0x400200a8

08004344 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
 8004350:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004352:	2317      	movs	r3, #23
 8004354:	18fb      	adds	r3, r7, r3
 8004356:	2200      	movs	r2, #0
 8004358:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2224      	movs	r2, #36	; 0x24
 800435e:	5c9b      	ldrb	r3, [r3, r2]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d101      	bne.n	8004368 <HAL_DMA_Start_IT+0x24>
 8004364:	2302      	movs	r3, #2
 8004366:	e04f      	b.n	8004408 <HAL_DMA_Start_IT+0xc4>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2224      	movs	r2, #36	; 0x24
 800436c:	2101      	movs	r1, #1
 800436e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2225      	movs	r2, #37	; 0x25
 8004374:	5c9b      	ldrb	r3, [r3, r2]
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b01      	cmp	r3, #1
 800437a:	d13a      	bne.n	80043f2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2225      	movs	r2, #37	; 0x25
 8004380:	2102      	movs	r1, #2
 8004382:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2101      	movs	r1, #1
 8004396:	438a      	bics	r2, r1
 8004398:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	68b9      	ldr	r1, [r7, #8]
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 f976 	bl	8004692 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d008      	beq.n	80043c0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	210e      	movs	r1, #14
 80043ba:	430a      	orrs	r2, r1
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	e00f      	b.n	80043e0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2104      	movs	r1, #4
 80043cc:	438a      	bics	r2, r1
 80043ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	210a      	movs	r1, #10
 80043dc:	430a      	orrs	r2, r1
 80043de:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2101      	movs	r1, #1
 80043ec:	430a      	orrs	r2, r1
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	e007      	b.n	8004402 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2224      	movs	r2, #36	; 0x24
 80043f6:	2100      	movs	r1, #0
 80043f8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80043fa:	2317      	movs	r3, #23
 80043fc:	18fb      	adds	r3, r7, r3
 80043fe:	2202      	movs	r2, #2
 8004400:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8004402:	2317      	movs	r3, #23
 8004404:	18fb      	adds	r3, r7, r3
 8004406:	781b      	ldrb	r3, [r3, #0]
}
 8004408:	0018      	movs	r0, r3
 800440a:	46bd      	mov	sp, r7
 800440c:	b006      	add	sp, #24
 800440e:	bd80      	pop	{r7, pc}

08004410 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004418:	230f      	movs	r3, #15
 800441a:	18fb      	adds	r3, r7, r3
 800441c:	2200      	movs	r2, #0
 800441e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2225      	movs	r2, #37	; 0x25
 8004424:	5c9b      	ldrb	r3, [r3, r2]
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d008      	beq.n	800443e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2204      	movs	r2, #4
 8004430:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2224      	movs	r2, #36	; 0x24
 8004436:	2100      	movs	r1, #0
 8004438:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e024      	b.n	8004488 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	210e      	movs	r1, #14
 800444a:	438a      	bics	r2, r1
 800444c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2101      	movs	r1, #1
 800445a:	438a      	bics	r2, r1
 800445c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004462:	221c      	movs	r2, #28
 8004464:	401a      	ands	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	2101      	movs	r1, #1
 800446c:	4091      	lsls	r1, r2
 800446e:	000a      	movs	r2, r1
 8004470:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2225      	movs	r2, #37	; 0x25
 8004476:	2101      	movs	r1, #1
 8004478:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2224      	movs	r2, #36	; 0x24
 800447e:	2100      	movs	r1, #0
 8004480:	5499      	strb	r1, [r3, r2]

    return status;
 8004482:	230f      	movs	r3, #15
 8004484:	18fb      	adds	r3, r7, r3
 8004486:	781b      	ldrb	r3, [r3, #0]
  }
}
 8004488:	0018      	movs	r0, r3
 800448a:	46bd      	mov	sp, r7
 800448c:	b004      	add	sp, #16
 800448e:	bd80      	pop	{r7, pc}

08004490 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004498:	210f      	movs	r1, #15
 800449a:	187b      	adds	r3, r7, r1
 800449c:	2200      	movs	r2, #0
 800449e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2225      	movs	r2, #37	; 0x25
 80044a4:	5c9b      	ldrb	r3, [r3, r2]
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d006      	beq.n	80044ba <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2204      	movs	r2, #4
 80044b0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80044b2:	187b      	adds	r3, r7, r1
 80044b4:	2201      	movs	r2, #1
 80044b6:	701a      	strb	r2, [r3, #0]
 80044b8:	e02a      	b.n	8004510 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	210e      	movs	r1, #14
 80044c6:	438a      	bics	r2, r1
 80044c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2101      	movs	r1, #1
 80044d6:	438a      	bics	r2, r1
 80044d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044de:	221c      	movs	r2, #28
 80044e0:	401a      	ands	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	2101      	movs	r1, #1
 80044e8:	4091      	lsls	r1, r2
 80044ea:	000a      	movs	r2, r1
 80044ec:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2225      	movs	r2, #37	; 0x25
 80044f2:	2101      	movs	r1, #1
 80044f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2224      	movs	r2, #36	; 0x24
 80044fa:	2100      	movs	r1, #0
 80044fc:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004502:	2b00      	cmp	r3, #0
 8004504:	d004      	beq.n	8004510 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	0010      	movs	r0, r2
 800450e:	4798      	blx	r3
    }
  }
  return status;
 8004510:	230f      	movs	r3, #15
 8004512:	18fb      	adds	r3, r7, r3
 8004514:	781b      	ldrb	r3, [r3, #0]
}
 8004516:	0018      	movs	r0, r3
 8004518:	46bd      	mov	sp, r7
 800451a:	b004      	add	sp, #16
 800451c:	bd80      	pop	{r7, pc}

0800451e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b084      	sub	sp, #16
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453a:	221c      	movs	r2, #28
 800453c:	4013      	ands	r3, r2
 800453e:	2204      	movs	r2, #4
 8004540:	409a      	lsls	r2, r3
 8004542:	0013      	movs	r3, r2
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	4013      	ands	r3, r2
 8004548:	d026      	beq.n	8004598 <HAL_DMA_IRQHandler+0x7a>
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2204      	movs	r2, #4
 800454e:	4013      	ands	r3, r2
 8004550:	d022      	beq.n	8004598 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2220      	movs	r2, #32
 800455a:	4013      	ands	r3, r2
 800455c:	d107      	bne.n	800456e <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2104      	movs	r1, #4
 800456a:	438a      	bics	r2, r1
 800456c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004572:	221c      	movs	r2, #28
 8004574:	401a      	ands	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	2104      	movs	r1, #4
 800457c:	4091      	lsls	r1, r2
 800457e:	000a      	movs	r2, r1
 8004580:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004586:	2b00      	cmp	r3, #0
 8004588:	d100      	bne.n	800458c <HAL_DMA_IRQHandler+0x6e>
 800458a:	e071      	b.n	8004670 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	0010      	movs	r0, r2
 8004594:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8004596:	e06b      	b.n	8004670 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459c:	221c      	movs	r2, #28
 800459e:	4013      	ands	r3, r2
 80045a0:	2202      	movs	r2, #2
 80045a2:	409a      	lsls	r2, r3
 80045a4:	0013      	movs	r3, r2
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	4013      	ands	r3, r2
 80045aa:	d02d      	beq.n	8004608 <HAL_DMA_IRQHandler+0xea>
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2202      	movs	r2, #2
 80045b0:	4013      	ands	r3, r2
 80045b2:	d029      	beq.n	8004608 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2220      	movs	r2, #32
 80045bc:	4013      	ands	r3, r2
 80045be:	d10b      	bne.n	80045d8 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	210a      	movs	r1, #10
 80045cc:	438a      	bics	r2, r1
 80045ce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2225      	movs	r2, #37	; 0x25
 80045d4:	2101      	movs	r1, #1
 80045d6:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045dc:	221c      	movs	r2, #28
 80045de:	401a      	ands	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e4:	2102      	movs	r1, #2
 80045e6:	4091      	lsls	r1, r2
 80045e8:	000a      	movs	r2, r1
 80045ea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2224      	movs	r2, #36	; 0x24
 80045f0:	2100      	movs	r1, #0
 80045f2:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d039      	beq.n	8004670 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	0010      	movs	r0, r2
 8004604:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004606:	e033      	b.n	8004670 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460c:	221c      	movs	r2, #28
 800460e:	4013      	ands	r3, r2
 8004610:	2208      	movs	r2, #8
 8004612:	409a      	lsls	r2, r3
 8004614:	0013      	movs	r3, r2
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	4013      	ands	r3, r2
 800461a:	d02a      	beq.n	8004672 <HAL_DMA_IRQHandler+0x154>
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2208      	movs	r2, #8
 8004620:	4013      	ands	r3, r2
 8004622:	d026      	beq.n	8004672 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	210e      	movs	r1, #14
 8004630:	438a      	bics	r2, r1
 8004632:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004638:	221c      	movs	r2, #28
 800463a:	401a      	ands	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004640:	2101      	movs	r1, #1
 8004642:	4091      	lsls	r1, r2
 8004644:	000a      	movs	r2, r1
 8004646:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2225      	movs	r2, #37	; 0x25
 8004652:	2101      	movs	r1, #1
 8004654:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2224      	movs	r2, #36	; 0x24
 800465a:	2100      	movs	r1, #0
 800465c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004662:	2b00      	cmp	r3, #0
 8004664:	d005      	beq.n	8004672 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	0010      	movs	r0, r2
 800466e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004670:	46c0      	nop			; (mov r8, r8)
 8004672:	46c0      	nop			; (mov r8, r8)
}
 8004674:	46bd      	mov	sp, r7
 8004676:	b004      	add	sp, #16
 8004678:	bd80      	pop	{r7, pc}

0800467a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b082      	sub	sp, #8
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2225      	movs	r2, #37	; 0x25
 8004686:	5c9b      	ldrb	r3, [r3, r2]
 8004688:	b2db      	uxtb	r3, r3
}
 800468a:	0018      	movs	r0, r3
 800468c:	46bd      	mov	sp, r7
 800468e:	b002      	add	sp, #8
 8004690:	bd80      	pop	{r7, pc}

08004692 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b084      	sub	sp, #16
 8004696:	af00      	add	r7, sp, #0
 8004698:	60f8      	str	r0, [r7, #12]
 800469a:	60b9      	str	r1, [r7, #8]
 800469c:	607a      	str	r2, [r7, #4]
 800469e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a4:	221c      	movs	r2, #28
 80046a6:	401a      	ands	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	2101      	movs	r1, #1
 80046ae:	4091      	lsls	r1, r2
 80046b0:	000a      	movs	r2, r1
 80046b2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2b10      	cmp	r3, #16
 80046c2:	d108      	bne.n	80046d6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80046d4:	e007      	b.n	80046e6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	60da      	str	r2, [r3, #12]
}
 80046e6:	46c0      	nop			; (mov r8, r8)
 80046e8:	46bd      	mov	sp, r7
 80046ea:	b004      	add	sp, #16
 80046ec:	bd80      	pop	{r7, pc}
	...

080046f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80046fa:	2300      	movs	r3, #0
 80046fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046fe:	2300      	movs	r3, #0
 8004700:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004702:	2300      	movs	r3, #0
 8004704:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004706:	e155      	b.n	80049b4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2101      	movs	r1, #1
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	4091      	lsls	r1, r2
 8004712:	000a      	movs	r2, r1
 8004714:	4013      	ands	r3, r2
 8004716:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d100      	bne.n	8004720 <HAL_GPIO_Init+0x30>
 800471e:	e146      	b.n	80049ae <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	2203      	movs	r2, #3
 8004726:	4013      	ands	r3, r2
 8004728:	2b01      	cmp	r3, #1
 800472a:	d005      	beq.n	8004738 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2203      	movs	r2, #3
 8004732:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004734:	2b02      	cmp	r3, #2
 8004736:	d130      	bne.n	800479a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	2203      	movs	r2, #3
 8004744:	409a      	lsls	r2, r3
 8004746:	0013      	movs	r3, r2
 8004748:	43da      	mvns	r2, r3
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	4013      	ands	r3, r2
 800474e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	68da      	ldr	r2, [r3, #12]
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	409a      	lsls	r2, r3
 800475a:	0013      	movs	r3, r2
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	4313      	orrs	r3, r2
 8004760:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800476e:	2201      	movs	r2, #1
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	409a      	lsls	r2, r3
 8004774:	0013      	movs	r3, r2
 8004776:	43da      	mvns	r2, r3
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	4013      	ands	r3, r2
 800477c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	091b      	lsrs	r3, r3, #4
 8004784:	2201      	movs	r2, #1
 8004786:	401a      	ands	r2, r3
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	409a      	lsls	r2, r3
 800478c:	0013      	movs	r3, r2
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	4313      	orrs	r3, r2
 8004792:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	2203      	movs	r2, #3
 80047a0:	4013      	ands	r3, r2
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	d017      	beq.n	80047d6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	2203      	movs	r2, #3
 80047b2:	409a      	lsls	r2, r3
 80047b4:	0013      	movs	r3, r2
 80047b6:	43da      	mvns	r2, r3
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	4013      	ands	r3, r2
 80047bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	689a      	ldr	r2, [r3, #8]
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	409a      	lsls	r2, r3
 80047c8:	0013      	movs	r3, r2
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2203      	movs	r2, #3
 80047dc:	4013      	ands	r3, r2
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d123      	bne.n	800482a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	08da      	lsrs	r2, r3, #3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	3208      	adds	r2, #8
 80047ea:	0092      	lsls	r2, r2, #2
 80047ec:	58d3      	ldr	r3, [r2, r3]
 80047ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	2207      	movs	r2, #7
 80047f4:	4013      	ands	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	220f      	movs	r2, #15
 80047fa:	409a      	lsls	r2, r3
 80047fc:	0013      	movs	r3, r2
 80047fe:	43da      	mvns	r2, r3
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	4013      	ands	r3, r2
 8004804:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	691a      	ldr	r2, [r3, #16]
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	2107      	movs	r1, #7
 800480e:	400b      	ands	r3, r1
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	409a      	lsls	r2, r3
 8004814:	0013      	movs	r3, r2
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	4313      	orrs	r3, r2
 800481a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	08da      	lsrs	r2, r3, #3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	3208      	adds	r2, #8
 8004824:	0092      	lsls	r2, r2, #2
 8004826:	6939      	ldr	r1, [r7, #16]
 8004828:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	2203      	movs	r2, #3
 8004836:	409a      	lsls	r2, r3
 8004838:	0013      	movs	r3, r2
 800483a:	43da      	mvns	r2, r3
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	4013      	ands	r3, r2
 8004840:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	2203      	movs	r2, #3
 8004848:	401a      	ands	r2, r3
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	409a      	lsls	r2, r3
 8004850:	0013      	movs	r3, r2
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	4313      	orrs	r3, r2
 8004856:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	23c0      	movs	r3, #192	; 0xc0
 8004864:	029b      	lsls	r3, r3, #10
 8004866:	4013      	ands	r3, r2
 8004868:	d100      	bne.n	800486c <HAL_GPIO_Init+0x17c>
 800486a:	e0a0      	b.n	80049ae <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800486c:	4b57      	ldr	r3, [pc, #348]	; (80049cc <HAL_GPIO_Init+0x2dc>)
 800486e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004870:	4b56      	ldr	r3, [pc, #344]	; (80049cc <HAL_GPIO_Init+0x2dc>)
 8004872:	2101      	movs	r1, #1
 8004874:	430a      	orrs	r2, r1
 8004876:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004878:	4a55      	ldr	r2, [pc, #340]	; (80049d0 <HAL_GPIO_Init+0x2e0>)
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	089b      	lsrs	r3, r3, #2
 800487e:	3302      	adds	r3, #2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	589b      	ldr	r3, [r3, r2]
 8004884:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	2203      	movs	r2, #3
 800488a:	4013      	ands	r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	220f      	movs	r2, #15
 8004890:	409a      	lsls	r2, r3
 8004892:	0013      	movs	r3, r2
 8004894:	43da      	mvns	r2, r3
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	4013      	ands	r3, r2
 800489a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	23a0      	movs	r3, #160	; 0xa0
 80048a0:	05db      	lsls	r3, r3, #23
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d01f      	beq.n	80048e6 <HAL_GPIO_Init+0x1f6>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a4a      	ldr	r2, [pc, #296]	; (80049d4 <HAL_GPIO_Init+0x2e4>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d019      	beq.n	80048e2 <HAL_GPIO_Init+0x1f2>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a49      	ldr	r2, [pc, #292]	; (80049d8 <HAL_GPIO_Init+0x2e8>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d013      	beq.n	80048de <HAL_GPIO_Init+0x1ee>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a48      	ldr	r2, [pc, #288]	; (80049dc <HAL_GPIO_Init+0x2ec>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00d      	beq.n	80048da <HAL_GPIO_Init+0x1ea>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a47      	ldr	r2, [pc, #284]	; (80049e0 <HAL_GPIO_Init+0x2f0>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d007      	beq.n	80048d6 <HAL_GPIO_Init+0x1e6>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a46      	ldr	r2, [pc, #280]	; (80049e4 <HAL_GPIO_Init+0x2f4>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d101      	bne.n	80048d2 <HAL_GPIO_Init+0x1e2>
 80048ce:	2305      	movs	r3, #5
 80048d0:	e00a      	b.n	80048e8 <HAL_GPIO_Init+0x1f8>
 80048d2:	2306      	movs	r3, #6
 80048d4:	e008      	b.n	80048e8 <HAL_GPIO_Init+0x1f8>
 80048d6:	2304      	movs	r3, #4
 80048d8:	e006      	b.n	80048e8 <HAL_GPIO_Init+0x1f8>
 80048da:	2303      	movs	r3, #3
 80048dc:	e004      	b.n	80048e8 <HAL_GPIO_Init+0x1f8>
 80048de:	2302      	movs	r3, #2
 80048e0:	e002      	b.n	80048e8 <HAL_GPIO_Init+0x1f8>
 80048e2:	2301      	movs	r3, #1
 80048e4:	e000      	b.n	80048e8 <HAL_GPIO_Init+0x1f8>
 80048e6:	2300      	movs	r3, #0
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	2103      	movs	r1, #3
 80048ec:	400a      	ands	r2, r1
 80048ee:	0092      	lsls	r2, r2, #2
 80048f0:	4093      	lsls	r3, r2
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048f8:	4935      	ldr	r1, [pc, #212]	; (80049d0 <HAL_GPIO_Init+0x2e0>)
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	089b      	lsrs	r3, r3, #2
 80048fe:	3302      	adds	r3, #2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004906:	4b38      	ldr	r3, [pc, #224]	; (80049e8 <HAL_GPIO_Init+0x2f8>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	43da      	mvns	r2, r3
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	4013      	ands	r3, r2
 8004914:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	2380      	movs	r3, #128	; 0x80
 800491c:	035b      	lsls	r3, r3, #13
 800491e:	4013      	ands	r3, r2
 8004920:	d003      	beq.n	800492a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4313      	orrs	r3, r2
 8004928:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800492a:	4b2f      	ldr	r3, [pc, #188]	; (80049e8 <HAL_GPIO_Init+0x2f8>)
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004930:	4b2d      	ldr	r3, [pc, #180]	; (80049e8 <HAL_GPIO_Init+0x2f8>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	43da      	mvns	r2, r3
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	4013      	ands	r3, r2
 800493e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	2380      	movs	r3, #128	; 0x80
 8004946:	039b      	lsls	r3, r3, #14
 8004948:	4013      	ands	r3, r2
 800494a:	d003      	beq.n	8004954 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4313      	orrs	r3, r2
 8004952:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004954:	4b24      	ldr	r3, [pc, #144]	; (80049e8 <HAL_GPIO_Init+0x2f8>)
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800495a:	4b23      	ldr	r3, [pc, #140]	; (80049e8 <HAL_GPIO_Init+0x2f8>)
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	43da      	mvns	r2, r3
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	4013      	ands	r3, r2
 8004968:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	2380      	movs	r3, #128	; 0x80
 8004970:	029b      	lsls	r3, r3, #10
 8004972:	4013      	ands	r3, r2
 8004974:	d003      	beq.n	800497e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4313      	orrs	r3, r2
 800497c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800497e:	4b1a      	ldr	r3, [pc, #104]	; (80049e8 <HAL_GPIO_Init+0x2f8>)
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004984:	4b18      	ldr	r3, [pc, #96]	; (80049e8 <HAL_GPIO_Init+0x2f8>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	43da      	mvns	r2, r3
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	4013      	ands	r3, r2
 8004992:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	2380      	movs	r3, #128	; 0x80
 800499a:	025b      	lsls	r3, r3, #9
 800499c:	4013      	ands	r3, r2
 800499e:	d003      	beq.n	80049a8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80049a8:	4b0f      	ldr	r3, [pc, #60]	; (80049e8 <HAL_GPIO_Init+0x2f8>)
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	3301      	adds	r3, #1
 80049b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	40da      	lsrs	r2, r3
 80049bc:	1e13      	subs	r3, r2, #0
 80049be:	d000      	beq.n	80049c2 <HAL_GPIO_Init+0x2d2>
 80049c0:	e6a2      	b.n	8004708 <HAL_GPIO_Init+0x18>
  }
}
 80049c2:	46c0      	nop			; (mov r8, r8)
 80049c4:	46c0      	nop			; (mov r8, r8)
 80049c6:	46bd      	mov	sp, r7
 80049c8:	b006      	add	sp, #24
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40021000 	.word	0x40021000
 80049d0:	40010000 	.word	0x40010000
 80049d4:	50000400 	.word	0x50000400
 80049d8:	50000800 	.word	0x50000800
 80049dc:	50000c00 	.word	0x50000c00
 80049e0:	50001000 	.word	0x50001000
 80049e4:	50001c00 	.word	0x50001c00
 80049e8:	40010400 	.word	0x40010400

080049ec <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	000a      	movs	r2, r1
 80049f6:	1cbb      	adds	r3, r7, #2
 80049f8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	1cba      	adds	r2, r7, #2
 8004a00:	8812      	ldrh	r2, [r2, #0]
 8004a02:	4013      	ands	r3, r2
 8004a04:	d004      	beq.n	8004a10 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004a06:	230f      	movs	r3, #15
 8004a08:	18fb      	adds	r3, r7, r3
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	701a      	strb	r2, [r3, #0]
 8004a0e:	e003      	b.n	8004a18 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a10:	230f      	movs	r3, #15
 8004a12:	18fb      	adds	r3, r7, r3
 8004a14:	2200      	movs	r2, #0
 8004a16:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004a18:	230f      	movs	r3, #15
 8004a1a:	18fb      	adds	r3, r7, r3
 8004a1c:	781b      	ldrb	r3, [r3, #0]
}
 8004a1e:	0018      	movs	r0, r3
 8004a20:	46bd      	mov	sp, r7
 8004a22:	b004      	add	sp, #16
 8004a24:	bd80      	pop	{r7, pc}
	...

08004a28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e082      	b.n	8004b40 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2241      	movs	r2, #65	; 0x41
 8004a3e:	5c9b      	ldrb	r3, [r3, r2]
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d107      	bne.n	8004a56 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2240      	movs	r2, #64	; 0x40
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	0018      	movs	r0, r3
 8004a52:	f7fe fa5b 	bl	8002f0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2241      	movs	r2, #65	; 0x41
 8004a5a:	2124      	movs	r1, #36	; 0x24
 8004a5c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2101      	movs	r1, #1
 8004a6a:	438a      	bics	r2, r1
 8004a6c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4934      	ldr	r1, [pc, #208]	; (8004b48 <HAL_I2C_Init+0x120>)
 8004a78:	400a      	ands	r2, r1
 8004a7a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689a      	ldr	r2, [r3, #8]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4931      	ldr	r1, [pc, #196]	; (8004b4c <HAL_I2C_Init+0x124>)
 8004a88:	400a      	ands	r2, r1
 8004a8a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d108      	bne.n	8004aa6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2180      	movs	r1, #128	; 0x80
 8004a9e:	0209      	lsls	r1, r1, #8
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	609a      	str	r2, [r3, #8]
 8004aa4:	e007      	b.n	8004ab6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689a      	ldr	r2, [r3, #8]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2184      	movs	r1, #132	; 0x84
 8004ab0:	0209      	lsls	r1, r1, #8
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d104      	bne.n	8004ac8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2280      	movs	r2, #128	; 0x80
 8004ac4:	0112      	lsls	r2, r2, #4
 8004ac6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	491f      	ldr	r1, [pc, #124]	; (8004b50 <HAL_I2C_Init+0x128>)
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68da      	ldr	r2, [r3, #12]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	491a      	ldr	r1, [pc, #104]	; (8004b4c <HAL_I2C_Init+0x124>)
 8004ae4:	400a      	ands	r2, r1
 8004ae6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	691a      	ldr	r2, [r3, #16]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	431a      	orrs	r2, r3
 8004af2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	69d9      	ldr	r1, [r3, #28]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1a      	ldr	r2, [r3, #32]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2241      	movs	r2, #65	; 0x41
 8004b2c:	2120      	movs	r1, #32
 8004b2e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2242      	movs	r2, #66	; 0x42
 8004b3a:	2100      	movs	r1, #0
 8004b3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	0018      	movs	r0, r3
 8004b42:	46bd      	mov	sp, r7
 8004b44:	b002      	add	sp, #8
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	f0ffffff 	.word	0xf0ffffff
 8004b4c:	ffff7fff 	.word	0xffff7fff
 8004b50:	02008000 	.word	0x02008000

08004b54 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b54:	b590      	push	{r4, r7, lr}
 8004b56:	b089      	sub	sp, #36	; 0x24
 8004b58:	af02      	add	r7, sp, #8
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	000c      	movs	r4, r1
 8004b5e:	0010      	movs	r0, r2
 8004b60:	0019      	movs	r1, r3
 8004b62:	230a      	movs	r3, #10
 8004b64:	18fb      	adds	r3, r7, r3
 8004b66:	1c22      	adds	r2, r4, #0
 8004b68:	801a      	strh	r2, [r3, #0]
 8004b6a:	2308      	movs	r3, #8
 8004b6c:	18fb      	adds	r3, r7, r3
 8004b6e:	1c02      	adds	r2, r0, #0
 8004b70:	801a      	strh	r2, [r3, #0]
 8004b72:	1dbb      	adds	r3, r7, #6
 8004b74:	1c0a      	adds	r2, r1, #0
 8004b76:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2241      	movs	r2, #65	; 0x41
 8004b7c:	5c9b      	ldrb	r3, [r3, r2]
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b20      	cmp	r3, #32
 8004b82:	d000      	beq.n	8004b86 <HAL_I2C_Mem_Write+0x32>
 8004b84:	e10c      	b.n	8004da0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d004      	beq.n	8004b96 <HAL_I2C_Mem_Write+0x42>
 8004b8c:	232c      	movs	r3, #44	; 0x2c
 8004b8e:	18fb      	adds	r3, r7, r3
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d105      	bne.n	8004ba2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2280      	movs	r2, #128	; 0x80
 8004b9a:	0092      	lsls	r2, r2, #2
 8004b9c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e0ff      	b.n	8004da2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2240      	movs	r2, #64	; 0x40
 8004ba6:	5c9b      	ldrb	r3, [r3, r2]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d101      	bne.n	8004bb0 <HAL_I2C_Mem_Write+0x5c>
 8004bac:	2302      	movs	r3, #2
 8004bae:	e0f8      	b.n	8004da2 <HAL_I2C_Mem_Write+0x24e>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2240      	movs	r2, #64	; 0x40
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004bb8:	f7fe feaa 	bl	8003910 <HAL_GetTick>
 8004bbc:	0003      	movs	r3, r0
 8004bbe:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004bc0:	2380      	movs	r3, #128	; 0x80
 8004bc2:	0219      	lsls	r1, r3, #8
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	9300      	str	r3, [sp, #0]
 8004bca:	2319      	movs	r3, #25
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f001 fc85 	bl	80064dc <I2C_WaitOnFlagUntilTimeout>
 8004bd2:	1e03      	subs	r3, r0, #0
 8004bd4:	d001      	beq.n	8004bda <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e0e3      	b.n	8004da2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2241      	movs	r2, #65	; 0x41
 8004bde:	2121      	movs	r1, #33	; 0x21
 8004be0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2242      	movs	r2, #66	; 0x42
 8004be6:	2140      	movs	r1, #64	; 0x40
 8004be8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bf4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	222c      	movs	r2, #44	; 0x2c
 8004bfa:	18ba      	adds	r2, r7, r2
 8004bfc:	8812      	ldrh	r2, [r2, #0]
 8004bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c06:	1dbb      	adds	r3, r7, #6
 8004c08:	881c      	ldrh	r4, [r3, #0]
 8004c0a:	2308      	movs	r3, #8
 8004c0c:	18fb      	adds	r3, r7, r3
 8004c0e:	881a      	ldrh	r2, [r3, #0]
 8004c10:	230a      	movs	r3, #10
 8004c12:	18fb      	adds	r3, r7, r3
 8004c14:	8819      	ldrh	r1, [r3, #0]
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	9301      	str	r3, [sp, #4]
 8004c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	0023      	movs	r3, r4
 8004c22:	f000 fe91 	bl	8005948 <I2C_RequestMemoryWrite>
 8004c26:	1e03      	subs	r3, r0, #0
 8004c28:	d005      	beq.n	8004c36 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2240      	movs	r2, #64	; 0x40
 8004c2e:	2100      	movs	r1, #0
 8004c30:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e0b5      	b.n	8004da2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	2bff      	cmp	r3, #255	; 0xff
 8004c3e:	d911      	bls.n	8004c64 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	22ff      	movs	r2, #255	; 0xff
 8004c44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c4a:	b2da      	uxtb	r2, r3
 8004c4c:	2380      	movs	r3, #128	; 0x80
 8004c4e:	045c      	lsls	r4, r3, #17
 8004c50:	230a      	movs	r3, #10
 8004c52:	18fb      	adds	r3, r7, r3
 8004c54:	8819      	ldrh	r1, [r3, #0]
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	2300      	movs	r3, #0
 8004c5a:	9300      	str	r3, [sp, #0]
 8004c5c:	0023      	movs	r3, r4
 8004c5e:	f001 fe15 	bl	800688c <I2C_TransferConfig>
 8004c62:	e012      	b.n	8004c8a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	2380      	movs	r3, #128	; 0x80
 8004c76:	049c      	lsls	r4, r3, #18
 8004c78:	230a      	movs	r3, #10
 8004c7a:	18fb      	adds	r3, r7, r3
 8004c7c:	8819      	ldrh	r1, [r3, #0]
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	2300      	movs	r3, #0
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	0023      	movs	r3, r4
 8004c86:	f001 fe01 	bl	800688c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	0018      	movs	r0, r3
 8004c92:	f001 fc71 	bl	8006578 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c96:	1e03      	subs	r3, r0, #0
 8004c98:	d001      	beq.n	8004c9e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e081      	b.n	8004da2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	781a      	ldrb	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	1c5a      	adds	r2, r3, #1
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d03a      	beq.n	8004d4e <HAL_I2C_Mem_Write+0x1fa>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d136      	bne.n	8004d4e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	9300      	str	r3, [sp, #0]
 8004ce8:	0013      	movs	r3, r2
 8004cea:	2200      	movs	r2, #0
 8004cec:	2180      	movs	r1, #128	; 0x80
 8004cee:	f001 fbf5 	bl	80064dc <I2C_WaitOnFlagUntilTimeout>
 8004cf2:	1e03      	subs	r3, r0, #0
 8004cf4:	d001      	beq.n	8004cfa <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e053      	b.n	8004da2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	2bff      	cmp	r3, #255	; 0xff
 8004d02:	d911      	bls.n	8004d28 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	22ff      	movs	r2, #255	; 0xff
 8004d08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	2380      	movs	r3, #128	; 0x80
 8004d12:	045c      	lsls	r4, r3, #17
 8004d14:	230a      	movs	r3, #10
 8004d16:	18fb      	adds	r3, r7, r3
 8004d18:	8819      	ldrh	r1, [r3, #0]
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	0023      	movs	r3, r4
 8004d22:	f001 fdb3 	bl	800688c <I2C_TransferConfig>
 8004d26:	e012      	b.n	8004d4e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	2380      	movs	r3, #128	; 0x80
 8004d3a:	049c      	lsls	r4, r3, #18
 8004d3c:	230a      	movs	r3, #10
 8004d3e:	18fb      	adds	r3, r7, r3
 8004d40:	8819      	ldrh	r1, [r3, #0]
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	2300      	movs	r3, #0
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	0023      	movs	r3, r4
 8004d4a:	f001 fd9f 	bl	800688c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d198      	bne.n	8004c8a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	0018      	movs	r0, r3
 8004d60:	f001 fc50 	bl	8006604 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d64:	1e03      	subs	r3, r0, #0
 8004d66:	d001      	beq.n	8004d6c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e01a      	b.n	8004da2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2220      	movs	r2, #32
 8004d72:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	490b      	ldr	r1, [pc, #44]	; (8004dac <HAL_I2C_Mem_Write+0x258>)
 8004d80:	400a      	ands	r2, r1
 8004d82:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2241      	movs	r2, #65	; 0x41
 8004d88:	2120      	movs	r1, #32
 8004d8a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2242      	movs	r2, #66	; 0x42
 8004d90:	2100      	movs	r1, #0
 8004d92:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2240      	movs	r2, #64	; 0x40
 8004d98:	2100      	movs	r1, #0
 8004d9a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	e000      	b.n	8004da2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004da0:	2302      	movs	r3, #2
  }
}
 8004da2:	0018      	movs	r0, r3
 8004da4:	46bd      	mov	sp, r7
 8004da6:	b007      	add	sp, #28
 8004da8:	bd90      	pop	{r4, r7, pc}
 8004daa:	46c0      	nop			; (mov r8, r8)
 8004dac:	fe00e800 	.word	0xfe00e800

08004db0 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004db0:	b5b0      	push	{r4, r5, r7, lr}
 8004db2:	b088      	sub	sp, #32
 8004db4:	af02      	add	r7, sp, #8
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	000c      	movs	r4, r1
 8004dba:	0010      	movs	r0, r2
 8004dbc:	0019      	movs	r1, r3
 8004dbe:	230a      	movs	r3, #10
 8004dc0:	18fb      	adds	r3, r7, r3
 8004dc2:	1c22      	adds	r2, r4, #0
 8004dc4:	801a      	strh	r2, [r3, #0]
 8004dc6:	2308      	movs	r3, #8
 8004dc8:	18fb      	adds	r3, r7, r3
 8004dca:	1c02      	adds	r2, r0, #0
 8004dcc:	801a      	strh	r2, [r3, #0]
 8004dce:	1dbb      	adds	r3, r7, #6
 8004dd0:	1c0a      	adds	r2, r1, #0
 8004dd2:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2241      	movs	r2, #65	; 0x41
 8004dd8:	5c9b      	ldrb	r3, [r3, r2]
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b20      	cmp	r3, #32
 8004dde:	d000      	beq.n	8004de2 <HAL_I2C_Mem_Write_DMA+0x32>
 8004de0:	e0d8      	b.n	8004f94 <HAL_I2C_Mem_Write_DMA+0x1e4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d004      	beq.n	8004df2 <HAL_I2C_Mem_Write_DMA+0x42>
 8004de8:	232c      	movs	r3, #44	; 0x2c
 8004dea:	18fb      	adds	r3, r7, r3
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d105      	bne.n	8004dfe <HAL_I2C_Mem_Write_DMA+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2280      	movs	r2, #128	; 0x80
 8004df6:	0092      	lsls	r2, r2, #2
 8004df8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e0cb      	b.n	8004f96 <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	699a      	ldr	r2, [r3, #24]
 8004e04:	2380      	movs	r3, #128	; 0x80
 8004e06:	021b      	lsls	r3, r3, #8
 8004e08:	401a      	ands	r2, r3
 8004e0a:	2380      	movs	r3, #128	; 0x80
 8004e0c:	021b      	lsls	r3, r3, #8
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d101      	bne.n	8004e16 <HAL_I2C_Mem_Write_DMA+0x66>
    {
      return HAL_BUSY;
 8004e12:	2302      	movs	r3, #2
 8004e14:	e0bf      	b.n	8004f96 <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2240      	movs	r2, #64	; 0x40
 8004e1a:	5c9b      	ldrb	r3, [r3, r2]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d101      	bne.n	8004e24 <HAL_I2C_Mem_Write_DMA+0x74>
 8004e20:	2302      	movs	r3, #2
 8004e22:	e0b8      	b.n	8004f96 <HAL_I2C_Mem_Write_DMA+0x1e6>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2240      	movs	r2, #64	; 0x40
 8004e28:	2101      	movs	r1, #1
 8004e2a:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2241      	movs	r2, #65	; 0x41
 8004e30:	2121      	movs	r1, #33	; 0x21
 8004e32:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2242      	movs	r2, #66	; 0x42
 8004e38:	2140      	movs	r1, #64	; 0x40
 8004e3a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	222c      	movs	r2, #44	; 0x2c
 8004e4c:	18ba      	adds	r2, r7, r2
 8004e4e:	8812      	ldrh	r2, [r2, #0]
 8004e50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	4a52      	ldr	r2, [pc, #328]	; (8004fa0 <HAL_I2C_Mem_Write_DMA+0x1f0>)
 8004e56:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4a52      	ldr	r2, [pc, #328]	; (8004fa4 <HAL_I2C_Mem_Write_DMA+0x1f4>)
 8004e5c:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8004e5e:	230a      	movs	r3, #10
 8004e60:	18fb      	adds	r3, r7, r3
 8004e62:	881a      	ldrh	r2, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	64da      	str	r2, [r3, #76]	; 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	2bff      	cmp	r3, #255	; 0xff
 8004e70:	d903      	bls.n	8004e7a <HAL_I2C_Mem_Write_DMA+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	22ff      	movs	r2, #255	; 0xff
 8004e76:	851a      	strh	r2, [r3, #40]	; 0x28
 8004e78:	e004      	b.n	8004e84 <HAL_I2C_Mem_Write_DMA+0xd4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e84:	1dbb      	adds	r3, r7, #6
 8004e86:	881b      	ldrh	r3, [r3, #0]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d10b      	bne.n	8004ea4 <HAL_I2C_Mem_Write_DMA+0xf4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e8c:	2308      	movs	r3, #8
 8004e8e:	18fb      	adds	r3, r7, r3
 8004e90:	881b      	ldrh	r3, [r3, #0]
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	4252      	negs	r2, r2
 8004ea0:	651a      	str	r2, [r3, #80]	; 0x50
 8004ea2:	e00e      	b.n	8004ec2 <HAL_I2C_Mem_Write_DMA+0x112>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004ea4:	2108      	movs	r1, #8
 8004ea6:	187b      	adds	r3, r7, r1
 8004ea8:	881b      	ldrh	r3, [r3, #0]
 8004eaa:	0a1b      	lsrs	r3, r3, #8
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8004eb6:	187b      	adds	r3, r7, r1
 8004eb8:	881b      	ldrh	r3, [r3, #0]
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	001a      	movs	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	651a      	str	r2, [r3, #80]	; 0x50
    }

    if (hi2c->hdmatx != NULL)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d023      	beq.n	8004f12 <HAL_I2C_Mem_Write_DMA+0x162>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ece:	4a36      	ldr	r2, [pc, #216]	; (8004fa8 <HAL_I2C_Mem_Write_DMA+0x1f8>)
 8004ed0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed6:	4a35      	ldr	r2, [pc, #212]	; (8004fac <HAL_I2C_Mem_Write_DMA+0x1fc>)
 8004ed8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ede:	2200      	movs	r2, #0
 8004ee0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004eee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	3328      	adds	r3, #40	; 0x28
 8004ef6:	001a      	movs	r2, r3
                                       hi2c->XferSize);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8004efc:	2517      	movs	r5, #23
 8004efe:	197c      	adds	r4, r7, r5
 8004f00:	f7ff fa20 	bl	8004344 <HAL_DMA_Start_IT>
 8004f04:	0003      	movs	r3, r0
 8004f06:	7023      	strb	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8004f08:	197b      	adds	r3, r7, r5
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d12d      	bne.n	8004f6c <HAL_I2C_Mem_Write_DMA+0x1bc>
 8004f10:	e013      	b.n	8004f3a <HAL_I2C_Mem_Write_DMA+0x18a>
      hi2c->State     = HAL_I2C_STATE_READY;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2241      	movs	r2, #65	; 0x41
 8004f16:	2120      	movs	r1, #32
 8004f18:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2242      	movs	r2, #66	; 0x42
 8004f1e:	2100      	movs	r1, #0
 8004f20:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f26:	2280      	movs	r2, #128	; 0x80
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2240      	movs	r2, #64	; 0x40
 8004f32:	2100      	movs	r1, #0
 8004f34:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e02d      	b.n	8004f96 <HAL_I2C_Mem_Write_DMA+0x1e6>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004f3a:	1dbb      	adds	r3, r7, #6
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	b2da      	uxtb	r2, r3
 8004f40:	2380      	movs	r3, #128	; 0x80
 8004f42:	045c      	lsls	r4, r3, #17
 8004f44:	230a      	movs	r3, #10
 8004f46:	18fb      	adds	r3, r7, r3
 8004f48:	8819      	ldrh	r1, [r3, #0]
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	4b18      	ldr	r3, [pc, #96]	; (8004fb0 <HAL_I2C_Mem_Write_DMA+0x200>)
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	0023      	movs	r3, r4
 8004f52:	f001 fc9b 	bl	800688c <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2240      	movs	r2, #64	; 0x40
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2101      	movs	r1, #1
 8004f62:	0018      	movs	r0, r3
 8004f64:	f001 fccc 	bl	8006900 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	e014      	b.n	8004f96 <HAL_I2C_Mem_Write_DMA+0x1e6>
      hi2c->State     = HAL_I2C_STATE_READY;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2241      	movs	r2, #65	; 0x41
 8004f70:	2120      	movs	r1, #32
 8004f72:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2242      	movs	r2, #66	; 0x42
 8004f78:	2100      	movs	r1, #0
 8004f7a:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f80:	2210      	movs	r2, #16
 8004f82:	431a      	orrs	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2240      	movs	r2, #64	; 0x40
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e000      	b.n	8004f96 <HAL_I2C_Mem_Write_DMA+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 8004f94:	2302      	movs	r3, #2
  }
}
 8004f96:	0018      	movs	r0, r3
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	b006      	add	sp, #24
 8004f9c:	bdb0      	pop	{r4, r5, r7, pc}
 8004f9e:	46c0      	nop			; (mov r8, r8)
 8004fa0:	ffff0000 	.word	0xffff0000
 8004fa4:	08005545 	.word	0x08005545
 8004fa8:	080063cd 	.word	0x080063cd
 8004fac:	0800646d 	.word	0x0800646d
 8004fb0:	80002000 	.word	0x80002000

08004fb4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d005      	beq.n	8004fe0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	68f9      	ldr	r1, [r7, #12]
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	4798      	blx	r3
  }
}
 8004fe0:	46c0      	nop			; (mov r8, r8)
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	b004      	add	sp, #16
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	2380      	movs	r3, #128	; 0x80
 8005004:	005b      	lsls	r3, r3, #1
 8005006:	4013      	ands	r3, r2
 8005008:	d00e      	beq.n	8005028 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	2280      	movs	r2, #128	; 0x80
 800500e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005010:	d00a      	beq.n	8005028 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005016:	2201      	movs	r2, #1
 8005018:	431a      	orrs	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2280      	movs	r2, #128	; 0x80
 8005024:	0052      	lsls	r2, r2, #1
 8005026:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	2380      	movs	r3, #128	; 0x80
 800502c:	00db      	lsls	r3, r3, #3
 800502e:	4013      	ands	r3, r2
 8005030:	d00e      	beq.n	8005050 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	2280      	movs	r2, #128	; 0x80
 8005036:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005038:	d00a      	beq.n	8005050 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503e:	2208      	movs	r2, #8
 8005040:	431a      	orrs	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2280      	movs	r2, #128	; 0x80
 800504c:	00d2      	lsls	r2, r2, #3
 800504e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	2380      	movs	r3, #128	; 0x80
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4013      	ands	r3, r2
 8005058:	d00e      	beq.n	8005078 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	2280      	movs	r2, #128	; 0x80
 800505e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005060:	d00a      	beq.n	8005078 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005066:	2202      	movs	r2, #2
 8005068:	431a      	orrs	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2280      	movs	r2, #128	; 0x80
 8005074:	0092      	lsls	r2, r2, #2
 8005076:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	220b      	movs	r2, #11
 8005082:	4013      	ands	r3, r2
 8005084:	d005      	beq.n	8005092 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	0011      	movs	r1, r2
 800508c:	0018      	movs	r0, r3
 800508e:	f001 f84f 	bl	8006130 <I2C_ITError>
  }
}
 8005092:	46c0      	nop			; (mov r8, r8)
 8005094:	46bd      	mov	sp, r7
 8005096:	b006      	add	sp, #24
 8005098:	bd80      	pop	{r7, pc}

0800509a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b082      	sub	sp, #8
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80050a2:	46c0      	nop			; (mov r8, r8)
 80050a4:	46bd      	mov	sp, r7
 80050a6:	b002      	add	sp, #8
 80050a8:	bd80      	pop	{r7, pc}

080050aa <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b082      	sub	sp, #8
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80050b2:	46c0      	nop			; (mov r8, r8)
 80050b4:	46bd      	mov	sp, r7
 80050b6:	b002      	add	sp, #8
 80050b8:	bd80      	pop	{r7, pc}

080050ba <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b082      	sub	sp, #8
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80050c2:	46c0      	nop			; (mov r8, r8)
 80050c4:	46bd      	mov	sp, r7
 80050c6:	b002      	add	sp, #8
 80050c8:	bd80      	pop	{r7, pc}

080050ca <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b082      	sub	sp, #8
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80050d2:	46c0      	nop			; (mov r8, r8)
 80050d4:	46bd      	mov	sp, r7
 80050d6:	b002      	add	sp, #8
 80050d8:	bd80      	pop	{r7, pc}

080050da <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b082      	sub	sp, #8
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
 80050e2:	0008      	movs	r0, r1
 80050e4:	0011      	movs	r1, r2
 80050e6:	1cfb      	adds	r3, r7, #3
 80050e8:	1c02      	adds	r2, r0, #0
 80050ea:	701a      	strb	r2, [r3, #0]
 80050ec:	003b      	movs	r3, r7
 80050ee:	1c0a      	adds	r2, r1, #0
 80050f0:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80050f2:	46c0      	nop			; (mov r8, r8)
 80050f4:	46bd      	mov	sp, r7
 80050f6:	b002      	add	sp, #8
 80050f8:	bd80      	pop	{r7, pc}

080050fa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b082      	sub	sp, #8
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005102:	46c0      	nop			; (mov r8, r8)
 8005104:	46bd      	mov	sp, r7
 8005106:	b002      	add	sp, #8
 8005108:	bd80      	pop	{r7, pc}

0800510a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b082      	sub	sp, #8
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005112:	46c0      	nop			; (mov r8, r8)
 8005114:	46bd      	mov	sp, r7
 8005116:	b002      	add	sp, #8
 8005118:	bd80      	pop	{r7, pc}

0800511a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b082      	sub	sp, #8
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005122:	46c0      	nop			; (mov r8, r8)
 8005124:	46bd      	mov	sp, r7
 8005126:	b002      	add	sp, #8
 8005128:	bd80      	pop	{r7, pc}

0800512a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b082      	sub	sp, #8
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005132:	46c0      	nop			; (mov r8, r8)
 8005134:	46bd      	mov	sp, r7
 8005136:	b002      	add	sp, #8
 8005138:	bd80      	pop	{r7, pc}

0800513a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b082      	sub	sp, #8
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005142:	46c0      	nop			; (mov r8, r8)
 8005144:	46bd      	mov	sp, r7
 8005146:	b002      	add	sp, #8
 8005148:	bd80      	pop	{r7, pc}
	...

0800514c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2240      	movs	r2, #64	; 0x40
 8005166:	5c9b      	ldrb	r3, [r3, r2]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <I2C_Slave_ISR_IT+0x24>
 800516c:	2302      	movs	r3, #2
 800516e:	e0e6      	b.n	800533e <I2C_Slave_ISR_IT+0x1f2>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2240      	movs	r2, #64	; 0x40
 8005174:	2101      	movs	r1, #1
 8005176:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	2220      	movs	r2, #32
 800517c:	4013      	ands	r3, r2
 800517e:	d009      	beq.n	8005194 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2220      	movs	r2, #32
 8005184:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005186:	d005      	beq.n	8005194 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	0011      	movs	r1, r2
 800518e:	0018      	movs	r0, r3
 8005190:	f000 fe56 	bl	8005e40 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	2210      	movs	r2, #16
 8005198:	4013      	ands	r3, r2
 800519a:	d052      	beq.n	8005242 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2210      	movs	r2, #16
 80051a0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80051a2:	d04e      	beq.n	8005242 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d12d      	bne.n	800520a <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2241      	movs	r2, #65	; 0x41
 80051b2:	5c9b      	ldrb	r3, [r3, r2]
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b28      	cmp	r3, #40	; 0x28
 80051b8:	d10b      	bne.n	80051d2 <I2C_Slave_ISR_IT+0x86>
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	2380      	movs	r3, #128	; 0x80
 80051be:	049b      	lsls	r3, r3, #18
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d106      	bne.n	80051d2 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	0011      	movs	r1, r2
 80051ca:	0018      	movs	r0, r3
 80051cc:	f000 ff58 	bl	8006080 <I2C_ITListenCplt>
 80051d0:	e036      	b.n	8005240 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2241      	movs	r2, #65	; 0x41
 80051d6:	5c9b      	ldrb	r3, [r3, r2]
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b29      	cmp	r3, #41	; 0x29
 80051dc:	d110      	bne.n	8005200 <I2C_Slave_ISR_IT+0xb4>
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	4a59      	ldr	r2, [pc, #356]	; (8005348 <I2C_Slave_ISR_IT+0x1fc>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d00c      	beq.n	8005200 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2210      	movs	r2, #16
 80051ec:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	0018      	movs	r0, r3
 80051f2:	f001 f8c8 	bl	8006386 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	0018      	movs	r0, r3
 80051fa:	f000 fcef 	bl	8005bdc <I2C_ITSlaveSeqCplt>
 80051fe:	e01f      	b.n	8005240 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2210      	movs	r2, #16
 8005206:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005208:	e091      	b.n	800532e <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2210      	movs	r2, #16
 8005210:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005216:	2204      	movs	r2, #4
 8005218:	431a      	orrs	r2, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d005      	beq.n	8005230 <I2C_Slave_ISR_IT+0xe4>
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	2380      	movs	r3, #128	; 0x80
 8005228:	045b      	lsls	r3, r3, #17
 800522a:	429a      	cmp	r2, r3
 800522c:	d000      	beq.n	8005230 <I2C_Slave_ISR_IT+0xe4>
 800522e:	e07e      	b.n	800532e <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	0011      	movs	r1, r2
 8005238:	0018      	movs	r0, r3
 800523a:	f000 ff79 	bl	8006130 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800523e:	e076      	b.n	800532e <I2C_Slave_ISR_IT+0x1e2>
 8005240:	e075      	b.n	800532e <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	2204      	movs	r2, #4
 8005246:	4013      	ands	r3, r2
 8005248:	d02f      	beq.n	80052aa <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2204      	movs	r2, #4
 800524e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005250:	d02b      	beq.n	80052aa <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005256:	b29b      	uxth	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	d018      	beq.n	800528e <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005266:	b2d2      	uxtb	r2, r2
 8005268:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	1c5a      	adds	r2, r3, #1
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005278:	3b01      	subs	r3, #1
 800527a:	b29a      	uxth	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005284:	b29b      	uxth	r3, r3
 8005286:	3b01      	subs	r3, #1
 8005288:	b29a      	uxth	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005292:	b29b      	uxth	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	d14c      	bne.n	8005332 <I2C_Slave_ISR_IT+0x1e6>
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	4a2b      	ldr	r2, [pc, #172]	; (8005348 <I2C_Slave_ISR_IT+0x1fc>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d048      	beq.n	8005332 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	0018      	movs	r0, r3
 80052a4:	f000 fc9a 	bl	8005bdc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80052a8:	e043      	b.n	8005332 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	2208      	movs	r2, #8
 80052ae:	4013      	ands	r3, r2
 80052b0:	d00a      	beq.n	80052c8 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2208      	movs	r2, #8
 80052b6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80052b8:	d006      	beq.n	80052c8 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	0011      	movs	r1, r2
 80052c0:	0018      	movs	r0, r3
 80052c2:	f000 fba5 	bl	8005a10 <I2C_ITAddrCplt>
 80052c6:	e035      	b.n	8005334 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	2202      	movs	r2, #2
 80052cc:	4013      	ands	r3, r2
 80052ce:	d031      	beq.n	8005334 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80052d6:	d02d      	beq.n	8005334 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052dc:	b29b      	uxth	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d018      	beq.n	8005314 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e6:	781a      	ldrb	r2, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	1c5a      	adds	r2, r3, #1
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	3b01      	subs	r3, #1
 8005300:	b29a      	uxth	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800530a:	3b01      	subs	r3, #1
 800530c:	b29a      	uxth	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	851a      	strh	r2, [r3, #40]	; 0x28
 8005312:	e00f      	b.n	8005334 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	2380      	movs	r3, #128	; 0x80
 8005318:	045b      	lsls	r3, r3, #17
 800531a:	429a      	cmp	r2, r3
 800531c:	d002      	beq.n	8005324 <I2C_Slave_ISR_IT+0x1d8>
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d107      	bne.n	8005334 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	0018      	movs	r0, r3
 8005328:	f000 fc58 	bl	8005bdc <I2C_ITSlaveSeqCplt>
 800532c:	e002      	b.n	8005334 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800532e:	46c0      	nop			; (mov r8, r8)
 8005330:	e000      	b.n	8005334 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8005332:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2240      	movs	r2, #64	; 0x40
 8005338:	2100      	movs	r1, #0
 800533a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	0018      	movs	r0, r3
 8005340:	46bd      	mov	sp, r7
 8005342:	b006      	add	sp, #24
 8005344:	bd80      	pop	{r7, pc}
 8005346:	46c0      	nop			; (mov r8, r8)
 8005348:	ffff0000 	.word	0xffff0000

0800534c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800534c:	b590      	push	{r4, r7, lr}
 800534e:	b089      	sub	sp, #36	; 0x24
 8005350:	af02      	add	r7, sp, #8
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2240      	movs	r2, #64	; 0x40
 800535c:	5c9b      	ldrb	r3, [r3, r2]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d101      	bne.n	8005366 <I2C_Master_ISR_DMA+0x1a>
 8005362:	2302      	movs	r3, #2
 8005364:	e0e7      	b.n	8005536 <I2C_Master_ISR_DMA+0x1ea>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2240      	movs	r2, #64	; 0x40
 800536a:	2101      	movs	r1, #1
 800536c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	2210      	movs	r2, #16
 8005372:	4013      	ands	r3, r2
 8005374:	d017      	beq.n	80053a6 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2210      	movs	r2, #16
 800537a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800537c:	d013      	beq.n	80053a6 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2210      	movs	r2, #16
 8005384:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538a:	2204      	movs	r2, #4
 800538c:	431a      	orrs	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2120      	movs	r1, #32
 8005396:	0018      	movs	r0, r3
 8005398:	f001 fab2 	bl	8006900 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	0018      	movs	r0, r3
 80053a0:	f000 fff1 	bl	8006386 <I2C_Flush_TXDR>
 80053a4:	e0c2      	b.n	800552c <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2280      	movs	r2, #128	; 0x80
 80053aa:	4013      	ands	r3, r2
 80053ac:	d100      	bne.n	80053b0 <I2C_Master_ISR_DMA+0x64>
 80053ae:	e07c      	b.n	80054aa <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2240      	movs	r2, #64	; 0x40
 80053b4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80053b6:	d100      	bne.n	80053ba <I2C_Master_ISR_DMA+0x6e>
 80053b8:	e077      	b.n	80054aa <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2140      	movs	r1, #64	; 0x40
 80053c6:	438a      	bics	r2, r1
 80053c8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d055      	beq.n	8005480 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	b29a      	uxth	r2, r3
 80053dc:	2312      	movs	r3, #18
 80053de:	18fb      	adds	r3, r7, r3
 80053e0:	0592      	lsls	r2, r2, #22
 80053e2:	0d92      	lsrs	r2, r2, #22
 80053e4:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	2bff      	cmp	r3, #255	; 0xff
 80053ee:	d906      	bls.n	80053fe <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	22ff      	movs	r2, #255	; 0xff
 80053f4:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80053f6:	2380      	movs	r3, #128	; 0x80
 80053f8:	045b      	lsls	r3, r3, #17
 80053fa:	617b      	str	r3, [r7, #20]
 80053fc:	e010      	b.n	8005420 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005402:	b29a      	uxth	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540c:	4a4c      	ldr	r2, [pc, #304]	; (8005540 <I2C_Master_ISR_DMA+0x1f4>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d003      	beq.n	800541a <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005416:	617b      	str	r3, [r7, #20]
 8005418:	e002      	b.n	8005420 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800541a:	2380      	movs	r3, #128	; 0x80
 800541c:	049b      	lsls	r3, r3, #18
 800541e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005424:	b2da      	uxtb	r2, r3
 8005426:	697c      	ldr	r4, [r7, #20]
 8005428:	2312      	movs	r3, #18
 800542a:	18fb      	adds	r3, r7, r3
 800542c:	8819      	ldrh	r1, [r3, #0]
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	2300      	movs	r3, #0
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	0023      	movs	r3, r4
 8005436:	f001 fa29 	bl	800688c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800543e:	b29a      	uxth	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	b29a      	uxth	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2241      	movs	r2, #65	; 0x41
 8005450:	5c9b      	ldrb	r3, [r3, r2]
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b22      	cmp	r3, #34	; 0x22
 8005456:	d109      	bne.n	800546c <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2180      	movs	r1, #128	; 0x80
 8005464:	0209      	lsls	r1, r1, #8
 8005466:	430a      	orrs	r2, r1
 8005468:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800546a:	e05f      	b.n	800552c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2180      	movs	r1, #128	; 0x80
 8005478:	01c9      	lsls	r1, r1, #7
 800547a:	430a      	orrs	r2, r1
 800547c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800547e:	e055      	b.n	800552c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	2380      	movs	r3, #128	; 0x80
 8005488:	049b      	lsls	r3, r3, #18
 800548a:	401a      	ands	r2, r3
 800548c:	2380      	movs	r3, #128	; 0x80
 800548e:	049b      	lsls	r3, r3, #18
 8005490:	429a      	cmp	r2, r3
 8005492:	d004      	beq.n	800549e <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	0018      	movs	r0, r3
 8005498:	f000 fb5e 	bl	8005b58 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800549c:	e046      	b.n	800552c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2140      	movs	r1, #64	; 0x40
 80054a2:	0018      	movs	r0, r3
 80054a4:	f000 fe44 	bl	8006130 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80054a8:	e040      	b.n	800552c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	2240      	movs	r2, #64	; 0x40
 80054ae:	4013      	ands	r3, r2
 80054b0:	d02c      	beq.n	800550c <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2240      	movs	r2, #64	; 0x40
 80054b6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80054b8:	d028      	beq.n	800550c <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054be:	b29b      	uxth	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d11d      	bne.n	8005500 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	2380      	movs	r3, #128	; 0x80
 80054cc:	049b      	lsls	r3, r3, #18
 80054ce:	401a      	ands	r2, r3
 80054d0:	2380      	movs	r3, #128	; 0x80
 80054d2:	049b      	lsls	r3, r3, #18
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d028      	beq.n	800552a <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054dc:	4a18      	ldr	r2, [pc, #96]	; (8005540 <I2C_Master_ISR_DMA+0x1f4>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d109      	bne.n	80054f6 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2180      	movs	r1, #128	; 0x80
 80054ee:	01c9      	lsls	r1, r1, #7
 80054f0:	430a      	orrs	r2, r1
 80054f2:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80054f4:	e019      	b.n	800552a <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	0018      	movs	r0, r3
 80054fa:	f000 fb2d 	bl	8005b58 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80054fe:	e014      	b.n	800552a <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2140      	movs	r1, #64	; 0x40
 8005504:	0018      	movs	r0, r3
 8005506:	f000 fe13 	bl	8006130 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800550a:	e00e      	b.n	800552a <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	2220      	movs	r2, #32
 8005510:	4013      	ands	r3, r2
 8005512:	d00b      	beq.n	800552c <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2220      	movs	r2, #32
 8005518:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800551a:	d007      	beq.n	800552c <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	0011      	movs	r1, r2
 8005522:	0018      	movs	r0, r3
 8005524:	f000 fbbe 	bl	8005ca4 <I2C_ITMasterCplt>
 8005528:	e000      	b.n	800552c <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800552a:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2240      	movs	r2, #64	; 0x40
 8005530:	2100      	movs	r1, #0
 8005532:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	0018      	movs	r0, r3
 8005538:	46bd      	mov	sp, r7
 800553a:	b007      	add	sp, #28
 800553c:	bd90      	pop	{r4, r7, pc}
 800553e:	46c0      	nop			; (mov r8, r8)
 8005540:	ffff0000 	.word	0xffff0000

08005544 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8005544:	b590      	push	{r4, r7, lr}
 8005546:	b089      	sub	sp, #36	; 0x24
 8005548:	af02      	add	r7, sp, #8
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8005550:	4b88      	ldr	r3, [pc, #544]	; (8005774 <I2C_Mem_ISR_DMA+0x230>)
 8005552:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2240      	movs	r2, #64	; 0x40
 8005558:	5c9b      	ldrb	r3, [r3, r2]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d101      	bne.n	8005562 <I2C_Mem_ISR_DMA+0x1e>
 800555e:	2302      	movs	r3, #2
 8005560:	e104      	b.n	800576c <I2C_Mem_ISR_DMA+0x228>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2240      	movs	r2, #64	; 0x40
 8005566:	2101      	movs	r1, #1
 8005568:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	2210      	movs	r2, #16
 800556e:	4013      	ands	r3, r2
 8005570:	d017      	beq.n	80055a2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2210      	movs	r2, #16
 8005576:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005578:	d013      	beq.n	80055a2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2210      	movs	r2, #16
 8005580:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005586:	2204      	movs	r2, #4
 8005588:	431a      	orrs	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2120      	movs	r1, #32
 8005592:	0018      	movs	r0, r3
 8005594:	f001 f9b4 	bl	8006900 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	0018      	movs	r0, r3
 800559c:	f000 fef3 	bl	8006386 <I2C_Flush_TXDR>
 80055a0:	e0df      	b.n	8005762 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	2202      	movs	r2, #2
 80055a6:	4013      	ands	r3, r2
 80055a8:	d00d      	beq.n	80055c6 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2202      	movs	r2, #2
 80055ae:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80055b0:	d009      	beq.n	80055c6 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80055ba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2201      	movs	r2, #1
 80055c0:	4252      	negs	r2, r2
 80055c2:	651a      	str	r2, [r3, #80]	; 0x50
 80055c4:	e0cd      	b.n	8005762 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	2280      	movs	r2, #128	; 0x80
 80055ca:	4013      	ands	r3, r2
 80055cc:	d05e      	beq.n	800568c <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2240      	movs	r2, #64	; 0x40
 80055d2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80055d4:	d05a      	beq.n	800568c <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2110      	movs	r1, #16
 80055da:	0018      	movs	r0, r3
 80055dc:	f001 f990 	bl	8006900 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d04a      	beq.n	8005680 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	2bff      	cmp	r3, #255	; 0xff
 80055f2:	d910      	bls.n	8005616 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	22ff      	movs	r2, #255	; 0xff
 80055f8:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055fe:	b299      	uxth	r1, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005604:	b2da      	uxtb	r2, r3
 8005606:	2380      	movs	r3, #128	; 0x80
 8005608:	045b      	lsls	r3, r3, #17
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	2400      	movs	r4, #0
 800560e:	9400      	str	r4, [sp, #0]
 8005610:	f001 f93c 	bl	800688c <I2C_TransferConfig>
 8005614:	e011      	b.n	800563a <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800561a:	b29a      	uxth	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005624:	b299      	uxth	r1, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800562a:	b2da      	uxtb	r2, r3
 800562c:	2380      	movs	r3, #128	; 0x80
 800562e:	049b      	lsls	r3, r3, #18
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	2400      	movs	r4, #0
 8005634:	9400      	str	r4, [sp, #0]
 8005636:	f001 f929 	bl	800688c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800563e:	b29a      	uxth	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	b29a      	uxth	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2241      	movs	r2, #65	; 0x41
 8005650:	5c9b      	ldrb	r3, [r3, r2]
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b22      	cmp	r3, #34	; 0x22
 8005656:	d109      	bne.n	800566c <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2180      	movs	r1, #128	; 0x80
 8005664:	0209      	lsls	r1, r1, #8
 8005666:	430a      	orrs	r2, r1
 8005668:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800566a:	e07a      	b.n	8005762 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2180      	movs	r1, #128	; 0x80
 8005678:	01c9      	lsls	r1, r1, #7
 800567a:	430a      	orrs	r2, r1
 800567c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800567e:	e070      	b.n	8005762 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2140      	movs	r1, #64	; 0x40
 8005684:	0018      	movs	r0, r3
 8005686:	f000 fd53 	bl	8006130 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800568a:	e06a      	b.n	8005762 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	2240      	movs	r2, #64	; 0x40
 8005690:	4013      	ands	r3, r2
 8005692:	d058      	beq.n	8005746 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2240      	movs	r2, #64	; 0x40
 8005698:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800569a:	d054      	beq.n	8005746 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2241      	movs	r2, #65	; 0x41
 80056a0:	5c9b      	ldrb	r3, [r3, r2]
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b22      	cmp	r3, #34	; 0x22
 80056a6:	d101      	bne.n	80056ac <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 80056a8:	4b33      	ldr	r3, [pc, #204]	; (8005778 <I2C_Mem_ISR_DMA+0x234>)
 80056aa:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	2bff      	cmp	r3, #255	; 0xff
 80056b4:	d911      	bls.n	80056da <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	22ff      	movs	r2, #255	; 0xff
 80056ba:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056c0:	b299      	uxth	r1, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	2380      	movs	r3, #128	; 0x80
 80056ca:	045c      	lsls	r4, r3, #17
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	0023      	movs	r3, r4
 80056d4:	f001 f8da 	bl	800688c <I2C_TransferConfig>
 80056d8:	e012      	b.n	8005700 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056de:	b29a      	uxth	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e8:	b299      	uxth	r1, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ee:	b2da      	uxtb	r2, r3
 80056f0:	2380      	movs	r3, #128	; 0x80
 80056f2:	049c      	lsls	r4, r3, #18
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	0023      	movs	r3, r4
 80056fc:	f001 f8c6 	bl	800688c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005704:	b29a      	uxth	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	b29a      	uxth	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2241      	movs	r2, #65	; 0x41
 8005716:	5c9b      	ldrb	r3, [r3, r2]
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b22      	cmp	r3, #34	; 0x22
 800571c:	d109      	bne.n	8005732 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2180      	movs	r1, #128	; 0x80
 800572a:	0209      	lsls	r1, r1, #8
 800572c:	430a      	orrs	r2, r1
 800572e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005730:	e017      	b.n	8005762 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2180      	movs	r1, #128	; 0x80
 800573e:	01c9      	lsls	r1, r1, #7
 8005740:	430a      	orrs	r2, r1
 8005742:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005744:	e00d      	b.n	8005762 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	2220      	movs	r2, #32
 800574a:	4013      	ands	r3, r2
 800574c:	d009      	beq.n	8005762 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2220      	movs	r2, #32
 8005752:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005754:	d005      	beq.n	8005762 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	0011      	movs	r1, r2
 800575c:	0018      	movs	r0, r3
 800575e:	f000 faa1 	bl	8005ca4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2240      	movs	r2, #64	; 0x40
 8005766:	2100      	movs	r1, #0
 8005768:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	0018      	movs	r0, r3
 800576e:	46bd      	mov	sp, r7
 8005770:	b007      	add	sp, #28
 8005772:	bd90      	pop	{r4, r7, pc}
 8005774:	80002000 	.word	0x80002000
 8005778:	80002400 	.word	0x80002400

0800577c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b088      	sub	sp, #32
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800578e:	2300      	movs	r3, #0
 8005790:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2240      	movs	r2, #64	; 0x40
 8005796:	5c9b      	ldrb	r3, [r3, r2]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d101      	bne.n	80057a0 <I2C_Slave_ISR_DMA+0x24>
 800579c:	2302      	movs	r3, #2
 800579e:	e0cd      	b.n	800593c <I2C_Slave_ISR_DMA+0x1c0>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2240      	movs	r2, #64	; 0x40
 80057a4:	2101      	movs	r1, #1
 80057a6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	2220      	movs	r2, #32
 80057ac:	4013      	ands	r3, r2
 80057ae:	d009      	beq.n	80057c4 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2220      	movs	r2, #32
 80057b4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80057b6:	d005      	beq.n	80057c4 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	0011      	movs	r1, r2
 80057be:	0018      	movs	r0, r3
 80057c0:	f000 fb3e 	bl	8005e40 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	2210      	movs	r2, #16
 80057c8:	4013      	ands	r3, r2
 80057ca:	d100      	bne.n	80057ce <I2C_Slave_ISR_DMA+0x52>
 80057cc:	e0a3      	b.n	8005916 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2210      	movs	r2, #16
 80057d2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80057d4:	d100      	bne.n	80057d8 <I2C_Slave_ISR_DMA+0x5c>
 80057d6:	e09e      	b.n	8005916 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	2380      	movs	r3, #128	; 0x80
 80057dc:	01db      	lsls	r3, r3, #7
 80057de:	4013      	ands	r3, r2
 80057e0:	d105      	bne.n	80057ee <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	2380      	movs	r3, #128	; 0x80
 80057e6:	021b      	lsls	r3, r3, #8
 80057e8:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80057ea:	d100      	bne.n	80057ee <I2C_Slave_ISR_DMA+0x72>
 80057ec:	e08c      	b.n	8005908 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00c      	beq.n	8005810 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	2380      	movs	r3, #128	; 0x80
 80057fa:	021b      	lsls	r3, r3, #8
 80057fc:	4013      	ands	r3, r2
 80057fe:	d007      	beq.n	8005810 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d101      	bne.n	8005810 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 800580c:	2301      	movs	r3, #1
 800580e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00c      	beq.n	8005832 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	2380      	movs	r3, #128	; 0x80
 800581c:	01db      	lsls	r3, r3, #7
 800581e:	4013      	ands	r3, r2
 8005820:	d007      	beq.n	8005832 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d101      	bne.n	8005832 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 800582e:	2301      	movs	r3, #1
 8005830:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d12d      	bne.n	8005894 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2241      	movs	r2, #65	; 0x41
 800583c:	5c9b      	ldrb	r3, [r3, r2]
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b28      	cmp	r3, #40	; 0x28
 8005842:	d10b      	bne.n	800585c <I2C_Slave_ISR_DMA+0xe0>
 8005844:	69ba      	ldr	r2, [r7, #24]
 8005846:	2380      	movs	r3, #128	; 0x80
 8005848:	049b      	lsls	r3, r3, #18
 800584a:	429a      	cmp	r2, r3
 800584c:	d106      	bne.n	800585c <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	0011      	movs	r1, r2
 8005854:	0018      	movs	r0, r3
 8005856:	f000 fc13 	bl	8006080 <I2C_ITListenCplt>
 800585a:	e054      	b.n	8005906 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2241      	movs	r2, #65	; 0x41
 8005860:	5c9b      	ldrb	r3, [r3, r2]
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b29      	cmp	r3, #41	; 0x29
 8005866:	d110      	bne.n	800588a <I2C_Slave_ISR_DMA+0x10e>
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	4a36      	ldr	r2, [pc, #216]	; (8005944 <I2C_Slave_ISR_DMA+0x1c8>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d00c      	beq.n	800588a <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2210      	movs	r2, #16
 8005876:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	0018      	movs	r0, r3
 800587c:	f000 fd83 	bl	8006386 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	0018      	movs	r0, r3
 8005884:	f000 f9aa 	bl	8005bdc <I2C_ITSlaveSeqCplt>
 8005888:	e03d      	b.n	8005906 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2210      	movs	r2, #16
 8005890:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8005892:	e03e      	b.n	8005912 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2210      	movs	r2, #16
 800589a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a0:	2204      	movs	r2, #4
 80058a2:	431a      	orrs	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80058a8:	2317      	movs	r3, #23
 80058aa:	18fb      	adds	r3, r7, r3
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	2141      	movs	r1, #65	; 0x41
 80058b0:	5c52      	ldrb	r2, [r2, r1]
 80058b2:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d004      	beq.n	80058c4 <I2C_Slave_ISR_DMA+0x148>
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	2380      	movs	r3, #128	; 0x80
 80058be:	045b      	lsls	r3, r3, #17
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d126      	bne.n	8005912 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80058c4:	2217      	movs	r2, #23
 80058c6:	18bb      	adds	r3, r7, r2
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	2b21      	cmp	r3, #33	; 0x21
 80058cc:	d003      	beq.n	80058d6 <I2C_Slave_ISR_DMA+0x15a>
 80058ce:	18bb      	adds	r3, r7, r2
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	2b29      	cmp	r3, #41	; 0x29
 80058d4:	d103      	bne.n	80058de <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2221      	movs	r2, #33	; 0x21
 80058da:	631a      	str	r2, [r3, #48]	; 0x30
 80058dc:	e00b      	b.n	80058f6 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80058de:	2217      	movs	r2, #23
 80058e0:	18bb      	adds	r3, r7, r2
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	2b22      	cmp	r3, #34	; 0x22
 80058e6:	d003      	beq.n	80058f0 <I2C_Slave_ISR_DMA+0x174>
 80058e8:	18bb      	adds	r3, r7, r2
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	2b2a      	cmp	r3, #42	; 0x2a
 80058ee:	d102      	bne.n	80058f6 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2222      	movs	r2, #34	; 0x22
 80058f4:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	0011      	movs	r1, r2
 80058fe:	0018      	movs	r0, r3
 8005900:	f000 fc16 	bl	8006130 <I2C_ITError>
      if (treatdmanack == 1U)
 8005904:	e005      	b.n	8005912 <I2C_Slave_ISR_DMA+0x196>
 8005906:	e004      	b.n	8005912 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2210      	movs	r2, #16
 800590e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005910:	e00f      	b.n	8005932 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8005912:	46c0      	nop			; (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005914:	e00d      	b.n	8005932 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	2208      	movs	r2, #8
 800591a:	4013      	ands	r3, r2
 800591c:	d009      	beq.n	8005932 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2208      	movs	r2, #8
 8005922:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005924:	d005      	beq.n	8005932 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	0011      	movs	r1, r2
 800592c:	0018      	movs	r0, r3
 800592e:	f000 f86f 	bl	8005a10 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2240      	movs	r2, #64	; 0x40
 8005936:	2100      	movs	r1, #0
 8005938:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	0018      	movs	r0, r3
 800593e:	46bd      	mov	sp, r7
 8005940:	b008      	add	sp, #32
 8005942:	bd80      	pop	{r7, pc}
 8005944:	ffff0000 	.word	0xffff0000

08005948 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005948:	b5b0      	push	{r4, r5, r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af02      	add	r7, sp, #8
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	000c      	movs	r4, r1
 8005952:	0010      	movs	r0, r2
 8005954:	0019      	movs	r1, r3
 8005956:	250a      	movs	r5, #10
 8005958:	197b      	adds	r3, r7, r5
 800595a:	1c22      	adds	r2, r4, #0
 800595c:	801a      	strh	r2, [r3, #0]
 800595e:	2308      	movs	r3, #8
 8005960:	18fb      	adds	r3, r7, r3
 8005962:	1c02      	adds	r2, r0, #0
 8005964:	801a      	strh	r2, [r3, #0]
 8005966:	1dbb      	adds	r3, r7, #6
 8005968:	1c0a      	adds	r2, r1, #0
 800596a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800596c:	1dbb      	adds	r3, r7, #6
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	b2da      	uxtb	r2, r3
 8005972:	2380      	movs	r3, #128	; 0x80
 8005974:	045c      	lsls	r4, r3, #17
 8005976:	197b      	adds	r3, r7, r5
 8005978:	8819      	ldrh	r1, [r3, #0]
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	4b23      	ldr	r3, [pc, #140]	; (8005a0c <I2C_RequestMemoryWrite+0xc4>)
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	0023      	movs	r3, r4
 8005982:	f000 ff83 	bl	800688c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005988:	6a39      	ldr	r1, [r7, #32]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	0018      	movs	r0, r3
 800598e:	f000 fdf3 	bl	8006578 <I2C_WaitOnTXISFlagUntilTimeout>
 8005992:	1e03      	subs	r3, r0, #0
 8005994:	d001      	beq.n	800599a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e033      	b.n	8005a02 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800599a:	1dbb      	adds	r3, r7, #6
 800599c:	881b      	ldrh	r3, [r3, #0]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d107      	bne.n	80059b2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80059a2:	2308      	movs	r3, #8
 80059a4:	18fb      	adds	r3, r7, r3
 80059a6:	881b      	ldrh	r3, [r3, #0]
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	629a      	str	r2, [r3, #40]	; 0x28
 80059b0:	e019      	b.n	80059e6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80059b2:	2308      	movs	r3, #8
 80059b4:	18fb      	adds	r3, r7, r3
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	0a1b      	lsrs	r3, r3, #8
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059c6:	6a39      	ldr	r1, [r7, #32]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	0018      	movs	r0, r3
 80059cc:	f000 fdd4 	bl	8006578 <I2C_WaitOnTXISFlagUntilTimeout>
 80059d0:	1e03      	subs	r3, r0, #0
 80059d2:	d001      	beq.n	80059d8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e014      	b.n	8005a02 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80059d8:	2308      	movs	r3, #8
 80059da:	18fb      	adds	r3, r7, r3
 80059dc:	881b      	ldrh	r3, [r3, #0]
 80059de:	b2da      	uxtb	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80059e6:	6a3a      	ldr	r2, [r7, #32]
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ec:	9300      	str	r3, [sp, #0]
 80059ee:	0013      	movs	r3, r2
 80059f0:	2200      	movs	r2, #0
 80059f2:	2180      	movs	r1, #128	; 0x80
 80059f4:	f000 fd72 	bl	80064dc <I2C_WaitOnFlagUntilTimeout>
 80059f8:	1e03      	subs	r3, r0, #0
 80059fa:	d001      	beq.n	8005a00 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e000      	b.n	8005a02 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	0018      	movs	r0, r3
 8005a04:	46bd      	mov	sp, r7
 8005a06:	b004      	add	sp, #16
 8005a08:	bdb0      	pop	{r4, r5, r7, pc}
 8005a0a:	46c0      	nop			; (mov r8, r8)
 8005a0c:	80002000 	.word	0x80002000

08005a10 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005a10:	b5b0      	push	{r4, r5, r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2241      	movs	r2, #65	; 0x41
 8005a1e:	5c9b      	ldrb	r3, [r3, r2]
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	001a      	movs	r2, r3
 8005a24:	2328      	movs	r3, #40	; 0x28
 8005a26:	4013      	ands	r3, r2
 8005a28:	2b28      	cmp	r3, #40	; 0x28
 8005a2a:	d000      	beq.n	8005a2e <I2C_ITAddrCplt+0x1e>
 8005a2c:	e088      	b.n	8005b40 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	0c1b      	lsrs	r3, r3, #16
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	250f      	movs	r5, #15
 8005a3a:	197b      	adds	r3, r7, r5
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	400a      	ands	r2, r1
 8005a40:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	0c1b      	lsrs	r3, r3, #16
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	200c      	movs	r0, #12
 8005a4e:	183b      	adds	r3, r7, r0
 8005a50:	21fe      	movs	r1, #254	; 0xfe
 8005a52:	400a      	ands	r2, r1
 8005a54:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	240a      	movs	r4, #10
 8005a60:	193b      	adds	r3, r7, r4
 8005a62:	0592      	lsls	r2, r2, #22
 8005a64:	0d92      	lsrs	r2, r2, #22
 8005a66:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	2308      	movs	r3, #8
 8005a72:	18fb      	adds	r3, r7, r3
 8005a74:	21fe      	movs	r1, #254	; 0xfe
 8005a76:	400a      	ands	r2, r1
 8005a78:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d148      	bne.n	8005b14 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005a82:	0021      	movs	r1, r4
 8005a84:	187b      	adds	r3, r7, r1
 8005a86:	881b      	ldrh	r3, [r3, #0]
 8005a88:	09db      	lsrs	r3, r3, #7
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	183b      	adds	r3, r7, r0
 8005a8e:	881b      	ldrh	r3, [r3, #0]
 8005a90:	4053      	eors	r3, r2
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	001a      	movs	r2, r3
 8005a96:	2306      	movs	r3, #6
 8005a98:	4013      	ands	r3, r2
 8005a9a:	d120      	bne.n	8005ade <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8005a9c:	183b      	adds	r3, r7, r0
 8005a9e:	187a      	adds	r2, r7, r1
 8005aa0:	8812      	ldrh	r2, [r2, #0]
 8005aa2:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d14c      	bne.n	8005b50 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2208      	movs	r2, #8
 8005ac2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2240      	movs	r2, #64	; 0x40
 8005ac8:	2100      	movs	r1, #0
 8005aca:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005acc:	183b      	adds	r3, r7, r0
 8005ace:	881a      	ldrh	r2, [r3, #0]
 8005ad0:	197b      	adds	r3, r7, r5
 8005ad2:	7819      	ldrb	r1, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	0018      	movs	r0, r3
 8005ad8:	f7ff faff 	bl	80050da <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005adc:	e038      	b.n	8005b50 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8005ade:	240c      	movs	r4, #12
 8005ae0:	193b      	adds	r3, r7, r4
 8005ae2:	2208      	movs	r2, #8
 8005ae4:	18ba      	adds	r2, r7, r2
 8005ae6:	8812      	ldrh	r2, [r2, #0]
 8005ae8:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005aea:	2380      	movs	r3, #128	; 0x80
 8005aec:	021a      	lsls	r2, r3, #8
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	0011      	movs	r1, r2
 8005af2:	0018      	movs	r0, r3
 8005af4:	f000 ff92 	bl	8006a1c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2240      	movs	r2, #64	; 0x40
 8005afc:	2100      	movs	r1, #0
 8005afe:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005b00:	193b      	adds	r3, r7, r4
 8005b02:	881a      	ldrh	r2, [r3, #0]
 8005b04:	230f      	movs	r3, #15
 8005b06:	18fb      	adds	r3, r7, r3
 8005b08:	7819      	ldrb	r1, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	0018      	movs	r0, r3
 8005b0e:	f7ff fae4 	bl	80050da <HAL_I2C_AddrCallback>
}
 8005b12:	e01d      	b.n	8005b50 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005b14:	2380      	movs	r3, #128	; 0x80
 8005b16:	021a      	lsls	r2, r3, #8
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	0011      	movs	r1, r2
 8005b1c:	0018      	movs	r0, r3
 8005b1e:	f000 ff7d 	bl	8006a1c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2240      	movs	r2, #64	; 0x40
 8005b26:	2100      	movs	r1, #0
 8005b28:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005b2a:	230c      	movs	r3, #12
 8005b2c:	18fb      	adds	r3, r7, r3
 8005b2e:	881a      	ldrh	r2, [r3, #0]
 8005b30:	230f      	movs	r3, #15
 8005b32:	18fb      	adds	r3, r7, r3
 8005b34:	7819      	ldrb	r1, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	0018      	movs	r0, r3
 8005b3a:	f7ff face 	bl	80050da <HAL_I2C_AddrCallback>
}
 8005b3e:	e007      	b.n	8005b50 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2208      	movs	r2, #8
 8005b46:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2240      	movs	r2, #64	; 0x40
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	5499      	strb	r1, [r3, r2]
}
 8005b50:	46c0      	nop			; (mov r8, r8)
 8005b52:	46bd      	mov	sp, r7
 8005b54:	b004      	add	sp, #16
 8005b56:	bdb0      	pop	{r4, r5, r7, pc}

08005b58 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2242      	movs	r2, #66	; 0x42
 8005b64:	2100      	movs	r1, #0
 8005b66:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2241      	movs	r2, #65	; 0x41
 8005b6c:	5c9b      	ldrb	r3, [r3, r2]
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	2b21      	cmp	r3, #33	; 0x21
 8005b72:	d117      	bne.n	8005ba4 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2241      	movs	r2, #65	; 0x41
 8005b78:	2120      	movs	r1, #32
 8005b7a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2211      	movs	r2, #17
 8005b80:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2101      	movs	r1, #1
 8005b8c:	0018      	movs	r0, r3
 8005b8e:	f000 ff45 	bl	8006a1c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2240      	movs	r2, #64	; 0x40
 8005b96:	2100      	movs	r1, #0
 8005b98:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	0018      	movs	r0, r3
 8005b9e:	f7ff fa7c 	bl	800509a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005ba2:	e016      	b.n	8005bd2 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2241      	movs	r2, #65	; 0x41
 8005ba8:	2120      	movs	r1, #32
 8005baa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2212      	movs	r2, #18
 8005bb0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2102      	movs	r1, #2
 8005bbc:	0018      	movs	r0, r3
 8005bbe:	f000 ff2d 	bl	8006a1c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2240      	movs	r2, #64	; 0x40
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	0018      	movs	r0, r3
 8005bce:	f7ff fa6c 	bl	80050aa <HAL_I2C_MasterRxCpltCallback>
}
 8005bd2:	46c0      	nop			; (mov r8, r8)
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	b002      	add	sp, #8
 8005bd8:	bd80      	pop	{r7, pc}
	...

08005bdc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2242      	movs	r2, #66	; 0x42
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	2380      	movs	r3, #128	; 0x80
 8005bf8:	01db      	lsls	r3, r3, #7
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	d008      	beq.n	8005c10 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4924      	ldr	r1, [pc, #144]	; (8005c9c <I2C_ITSlaveSeqCplt+0xc0>)
 8005c0a:	400a      	ands	r2, r1
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	e00c      	b.n	8005c2a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	2380      	movs	r3, #128	; 0x80
 8005c14:	021b      	lsls	r3, r3, #8
 8005c16:	4013      	ands	r3, r2
 8005c18:	d007      	beq.n	8005c2a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	491e      	ldr	r1, [pc, #120]	; (8005ca0 <I2C_ITSlaveSeqCplt+0xc4>)
 8005c26:	400a      	ands	r2, r1
 8005c28:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2241      	movs	r2, #65	; 0x41
 8005c2e:	5c9b      	ldrb	r3, [r3, r2]
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b29      	cmp	r3, #41	; 0x29
 8005c34:	d114      	bne.n	8005c60 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2241      	movs	r2, #65	; 0x41
 8005c3a:	2128      	movs	r1, #40	; 0x28
 8005c3c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2221      	movs	r2, #33	; 0x21
 8005c42:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2101      	movs	r1, #1
 8005c48:	0018      	movs	r0, r3
 8005c4a:	f000 fee7 	bl	8006a1c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2240      	movs	r2, #64	; 0x40
 8005c52:	2100      	movs	r1, #0
 8005c54:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	0018      	movs	r0, r3
 8005c5a:	f7ff fa2e 	bl	80050ba <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005c5e:	e019      	b.n	8005c94 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2241      	movs	r2, #65	; 0x41
 8005c64:	5c9b      	ldrb	r3, [r3, r2]
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b2a      	cmp	r3, #42	; 0x2a
 8005c6a:	d113      	bne.n	8005c94 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2241      	movs	r2, #65	; 0x41
 8005c70:	2128      	movs	r1, #40	; 0x28
 8005c72:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2222      	movs	r2, #34	; 0x22
 8005c78:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2102      	movs	r1, #2
 8005c7e:	0018      	movs	r0, r3
 8005c80:	f000 fecc 	bl	8006a1c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2240      	movs	r2, #64	; 0x40
 8005c88:	2100      	movs	r1, #0
 8005c8a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	0018      	movs	r0, r3
 8005c90:	f7ff fa1b 	bl	80050ca <HAL_I2C_SlaveRxCpltCallback>
}
 8005c94:	46c0      	nop			; (mov r8, r8)
 8005c96:	46bd      	mov	sp, r7
 8005c98:	b004      	add	sp, #16
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	ffffbfff 	.word	0xffffbfff
 8005ca0:	ffff7fff 	.word	0xffff7fff

08005ca4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2241      	movs	r2, #65	; 0x41
 8005cbe:	5c9b      	ldrb	r3, [r3, r2]
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b21      	cmp	r3, #33	; 0x21
 8005cc4:	d108      	bne.n	8005cd8 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2101      	movs	r1, #1
 8005cca:	0018      	movs	r0, r3
 8005ccc:	f000 fea6 	bl	8006a1c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2211      	movs	r2, #17
 8005cd4:	631a      	str	r2, [r3, #48]	; 0x30
 8005cd6:	e00d      	b.n	8005cf4 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2241      	movs	r2, #65	; 0x41
 8005cdc:	5c9b      	ldrb	r3, [r3, r2]
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	2b22      	cmp	r3, #34	; 0x22
 8005ce2:	d107      	bne.n	8005cf4 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2102      	movs	r1, #2
 8005ce8:	0018      	movs	r0, r3
 8005cea:	f000 fe97 	bl	8006a1c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2212      	movs	r2, #18
 8005cf2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	685a      	ldr	r2, [r3, #4]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	494e      	ldr	r1, [pc, #312]	; (8005e38 <I2C_ITMasterCplt+0x194>)
 8005d00:	400a      	ands	r2, r1
 8005d02:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a4b      	ldr	r2, [pc, #300]	; (8005e3c <I2C_ITMasterCplt+0x198>)
 8005d0e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	2210      	movs	r2, #16
 8005d14:	4013      	ands	r3, r2
 8005d16:	d009      	beq.n	8005d2c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2210      	movs	r2, #16
 8005d1e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d24:	2204      	movs	r2, #4
 8005d26:	431a      	orrs	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2241      	movs	r2, #65	; 0x41
 8005d30:	5c9b      	ldrb	r3, [r3, r2]
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2b60      	cmp	r3, #96	; 0x60
 8005d36:	d109      	bne.n	8005d4c <I2C_ITMasterCplt+0xa8>
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	2204      	movs	r2, #4
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	d005      	beq.n	8005d4c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	0018      	movs	r0, r3
 8005d50:	f000 fb19 	bl	8006386 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d58:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2241      	movs	r2, #65	; 0x41
 8005d5e:	5c9b      	ldrb	r3, [r3, r2]
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b60      	cmp	r3, #96	; 0x60
 8005d64:	d002      	beq.n	8005d6c <I2C_ITMasterCplt+0xc8>
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d007      	beq.n	8005d7c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	0011      	movs	r1, r2
 8005d74:	0018      	movs	r0, r3
 8005d76:	f000 f9db 	bl	8006130 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005d7a:	e058      	b.n	8005e2e <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2241      	movs	r2, #65	; 0x41
 8005d80:	5c9b      	ldrb	r3, [r3, r2]
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b21      	cmp	r3, #33	; 0x21
 8005d86:	d126      	bne.n	8005dd6 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2241      	movs	r2, #65	; 0x41
 8005d8c:	2120      	movs	r1, #32
 8005d8e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2242      	movs	r2, #66	; 0x42
 8005d9a:	5c9b      	ldrb	r3, [r3, r2]
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b40      	cmp	r3, #64	; 0x40
 8005da0:	d10c      	bne.n	8005dbc <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2242      	movs	r2, #66	; 0x42
 8005da6:	2100      	movs	r1, #0
 8005da8:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2240      	movs	r2, #64	; 0x40
 8005dae:	2100      	movs	r1, #0
 8005db0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	0018      	movs	r0, r3
 8005db6:	f7ff f9a8 	bl	800510a <HAL_I2C_MemTxCpltCallback>
}
 8005dba:	e038      	b.n	8005e2e <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2242      	movs	r2, #66	; 0x42
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2240      	movs	r2, #64	; 0x40
 8005dc8:	2100      	movs	r1, #0
 8005dca:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	0018      	movs	r0, r3
 8005dd0:	f7ff f963 	bl	800509a <HAL_I2C_MasterTxCpltCallback>
}
 8005dd4:	e02b      	b.n	8005e2e <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2241      	movs	r2, #65	; 0x41
 8005dda:	5c9b      	ldrb	r3, [r3, r2]
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b22      	cmp	r3, #34	; 0x22
 8005de0:	d125      	bne.n	8005e2e <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2241      	movs	r2, #65	; 0x41
 8005de6:	2120      	movs	r1, #32
 8005de8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2242      	movs	r2, #66	; 0x42
 8005df4:	5c9b      	ldrb	r3, [r3, r2]
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b40      	cmp	r3, #64	; 0x40
 8005dfa:	d10c      	bne.n	8005e16 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2242      	movs	r2, #66	; 0x42
 8005e00:	2100      	movs	r1, #0
 8005e02:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2240      	movs	r2, #64	; 0x40
 8005e08:	2100      	movs	r1, #0
 8005e0a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	0018      	movs	r0, r3
 8005e10:	f7ff f983 	bl	800511a <HAL_I2C_MemRxCpltCallback>
}
 8005e14:	e00b      	b.n	8005e2e <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2242      	movs	r2, #66	; 0x42
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2240      	movs	r2, #64	; 0x40
 8005e22:	2100      	movs	r1, #0
 8005e24:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	0018      	movs	r0, r3
 8005e2a:	f7ff f93e 	bl	80050aa <HAL_I2C_MasterRxCpltCallback>
}
 8005e2e:	46c0      	nop			; (mov r8, r8)
 8005e30:	46bd      	mov	sp, r7
 8005e32:	b006      	add	sp, #24
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	46c0      	nop			; (mov r8, r8)
 8005e38:	fe00e800 	.word	0xfe00e800
 8005e3c:	ffff0000 	.word	0xffff0000

08005e40 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005e56:	200f      	movs	r0, #15
 8005e58:	183b      	adds	r3, r7, r0
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	2141      	movs	r1, #65	; 0x41
 8005e5e:	5c52      	ldrb	r2, [r2, r1]
 8005e60:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2220      	movs	r2, #32
 8005e68:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005e6a:	183b      	adds	r3, r7, r0
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	2b21      	cmp	r3, #33	; 0x21
 8005e70:	d003      	beq.n	8005e7a <I2C_ITSlaveCplt+0x3a>
 8005e72:	183b      	adds	r3, r7, r0
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	2b29      	cmp	r3, #41	; 0x29
 8005e78:	d109      	bne.n	8005e8e <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005e7a:	4a7b      	ldr	r2, [pc, #492]	; (8006068 <I2C_ITSlaveCplt+0x228>)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	0011      	movs	r1, r2
 8005e80:	0018      	movs	r0, r3
 8005e82:	f000 fdcb 	bl	8006a1c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2221      	movs	r2, #33	; 0x21
 8005e8a:	631a      	str	r2, [r3, #48]	; 0x30
 8005e8c:	e011      	b.n	8005eb2 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005e8e:	220f      	movs	r2, #15
 8005e90:	18bb      	adds	r3, r7, r2
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	2b22      	cmp	r3, #34	; 0x22
 8005e96:	d003      	beq.n	8005ea0 <I2C_ITSlaveCplt+0x60>
 8005e98:	18bb      	adds	r3, r7, r2
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	2b2a      	cmp	r3, #42	; 0x2a
 8005e9e:	d108      	bne.n	8005eb2 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005ea0:	4a72      	ldr	r2, [pc, #456]	; (800606c <I2C_ITSlaveCplt+0x22c>)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	0011      	movs	r1, r2
 8005ea6:	0018      	movs	r0, r3
 8005ea8:	f000 fdb8 	bl	8006a1c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2222      	movs	r2, #34	; 0x22
 8005eb0:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2180      	movs	r1, #128	; 0x80
 8005ebe:	0209      	lsls	r1, r1, #8
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	685a      	ldr	r2, [r3, #4]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4968      	ldr	r1, [pc, #416]	; (8006070 <I2C_ITSlaveCplt+0x230>)
 8005ed0:	400a      	ands	r2, r1
 8005ed2:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	0018      	movs	r0, r3
 8005ed8:	f000 fa55 	bl	8006386 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	2380      	movs	r3, #128	; 0x80
 8005ee0:	01db      	lsls	r3, r3, #7
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	d013      	beq.n	8005f0e <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4960      	ldr	r1, [pc, #384]	; (8006074 <I2C_ITSlaveCplt+0x234>)
 8005ef2:	400a      	ands	r2, r1
 8005ef4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d01f      	beq.n	8005f3e <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f0c:	e017      	b.n	8005f3e <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	2380      	movs	r3, #128	; 0x80
 8005f12:	021b      	lsls	r3, r3, #8
 8005f14:	4013      	ands	r3, r2
 8005f16:	d012      	beq.n	8005f3e <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4955      	ldr	r1, [pc, #340]	; (8006078 <I2C_ITSlaveCplt+0x238>)
 8005f24:	400a      	ands	r2, r1
 8005f26:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d006      	beq.n	8005f3e <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	2204      	movs	r2, #4
 8005f42:	4013      	ands	r3, r2
 8005f44:	d020      	beq.n	8005f88 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2204      	movs	r2, #4
 8005f4a:	4393      	bics	r3, r2
 8005f4c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f58:	b2d2      	uxtb	r2, r2
 8005f5a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f60:	1c5a      	adds	r2, r3, #1
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00c      	beq.n	8005f88 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f72:	3b01      	subs	r3, #1
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	3b01      	subs	r3, #1
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d005      	beq.n	8005f9e <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f96:	2204      	movs	r2, #4
 8005f98:	431a      	orrs	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2242      	movs	r2, #66	; 0x42
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d013      	beq.n	8005fdc <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	0011      	movs	r1, r2
 8005fbc:	0018      	movs	r0, r3
 8005fbe:	f000 f8b7 	bl	8006130 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2241      	movs	r2, #65	; 0x41
 8005fc6:	5c9b      	ldrb	r3, [r3, r2]
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b28      	cmp	r3, #40	; 0x28
 8005fcc:	d147      	bne.n	800605e <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	0011      	movs	r1, r2
 8005fd4:	0018      	movs	r0, r3
 8005fd6:	f000 f853 	bl	8006080 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005fda:	e040      	b.n	800605e <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe0:	4a26      	ldr	r2, [pc, #152]	; (800607c <I2C_ITSlaveCplt+0x23c>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d016      	beq.n	8006014 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	0018      	movs	r0, r3
 8005fea:	f7ff fdf7 	bl	8005bdc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a22      	ldr	r2, [pc, #136]	; (800607c <I2C_ITSlaveCplt+0x23c>)
 8005ff2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2241      	movs	r2, #65	; 0x41
 8005ff8:	2120      	movs	r1, #32
 8005ffa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2240      	movs	r2, #64	; 0x40
 8006006:	2100      	movs	r1, #0
 8006008:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	0018      	movs	r0, r3
 800600e:	f7ff f874 	bl	80050fa <HAL_I2C_ListenCpltCallback>
}
 8006012:	e024      	b.n	800605e <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2241      	movs	r2, #65	; 0x41
 8006018:	5c9b      	ldrb	r3, [r3, r2]
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b22      	cmp	r3, #34	; 0x22
 800601e:	d10f      	bne.n	8006040 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2241      	movs	r2, #65	; 0x41
 8006024:	2120      	movs	r1, #32
 8006026:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2240      	movs	r2, #64	; 0x40
 8006032:	2100      	movs	r1, #0
 8006034:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	0018      	movs	r0, r3
 800603a:	f7ff f846 	bl	80050ca <HAL_I2C_SlaveRxCpltCallback>
}
 800603e:	e00e      	b.n	800605e <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2241      	movs	r2, #65	; 0x41
 8006044:	2120      	movs	r1, #32
 8006046:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2240      	movs	r2, #64	; 0x40
 8006052:	2100      	movs	r1, #0
 8006054:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	0018      	movs	r0, r3
 800605a:	f7ff f82e 	bl	80050ba <HAL_I2C_SlaveTxCpltCallback>
}
 800605e:	46c0      	nop			; (mov r8, r8)
 8006060:	46bd      	mov	sp, r7
 8006062:	b006      	add	sp, #24
 8006064:	bd80      	pop	{r7, pc}
 8006066:	46c0      	nop			; (mov r8, r8)
 8006068:	00008001 	.word	0x00008001
 800606c:	00008002 	.word	0x00008002
 8006070:	fe00e800 	.word	0xfe00e800
 8006074:	ffffbfff 	.word	0xffffbfff
 8006078:	ffff7fff 	.word	0xffff7fff
 800607c:	ffff0000 	.word	0xffff0000

08006080 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a26      	ldr	r2, [pc, #152]	; (8006128 <I2C_ITListenCplt+0xa8>)
 800608e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2241      	movs	r2, #65	; 0x41
 800609a:	2120      	movs	r1, #32
 800609c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2242      	movs	r2, #66	; 0x42
 80060a2:	2100      	movs	r1, #0
 80060a4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	2204      	movs	r2, #4
 80060b0:	4013      	ands	r3, r2
 80060b2:	d022      	beq.n	80060fa <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060be:	b2d2      	uxtb	r2, r2
 80060c0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c6:	1c5a      	adds	r2, r3, #1
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d012      	beq.n	80060fa <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060d8:	3b01      	subs	r3, #1
 80060da:	b29a      	uxth	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	3b01      	subs	r3, #1
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f2:	2204      	movs	r2, #4
 80060f4:	431a      	orrs	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80060fa:	4a0c      	ldr	r2, [pc, #48]	; (800612c <I2C_ITListenCplt+0xac>)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	0011      	movs	r1, r2
 8006100:	0018      	movs	r0, r3
 8006102:	f000 fc8b 	bl	8006a1c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2210      	movs	r2, #16
 800610c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2240      	movs	r2, #64	; 0x40
 8006112:	2100      	movs	r1, #0
 8006114:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	0018      	movs	r0, r3
 800611a:	f7fe ffee 	bl	80050fa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800611e:	46c0      	nop			; (mov r8, r8)
 8006120:	46bd      	mov	sp, r7
 8006122:	b002      	add	sp, #8
 8006124:	bd80      	pop	{r7, pc}
 8006126:	46c0      	nop			; (mov r8, r8)
 8006128:	ffff0000 	.word	0xffff0000
 800612c:	00008003 	.word	0x00008003

08006130 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800613a:	200f      	movs	r0, #15
 800613c:	183b      	adds	r3, r7, r0
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	2141      	movs	r1, #65	; 0x41
 8006142:	5c52      	ldrb	r2, [r2, r1]
 8006144:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2242      	movs	r2, #66	; 0x42
 800614a:	2100      	movs	r1, #0
 800614c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a72      	ldr	r2, [pc, #456]	; (800631c <I2C_ITError+0x1ec>)
 8006152:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	431a      	orrs	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006166:	183b      	adds	r3, r7, r0
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	2b28      	cmp	r3, #40	; 0x28
 800616c:	d007      	beq.n	800617e <I2C_ITError+0x4e>
 800616e:	183b      	adds	r3, r7, r0
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	2b29      	cmp	r3, #41	; 0x29
 8006174:	d003      	beq.n	800617e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006176:	183b      	adds	r3, r7, r0
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	2b2a      	cmp	r3, #42	; 0x2a
 800617c:	d10c      	bne.n	8006198 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2103      	movs	r1, #3
 8006182:	0018      	movs	r0, r3
 8006184:	f000 fc4a 	bl	8006a1c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2241      	movs	r2, #65	; 0x41
 800618c:	2128      	movs	r1, #40	; 0x28
 800618e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a63      	ldr	r2, [pc, #396]	; (8006320 <I2C_ITError+0x1f0>)
 8006194:	635a      	str	r2, [r3, #52]	; 0x34
 8006196:	e032      	b.n	80061fe <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006198:	4a62      	ldr	r2, [pc, #392]	; (8006324 <I2C_ITError+0x1f4>)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	0011      	movs	r1, r2
 800619e:	0018      	movs	r0, r3
 80061a0:	f000 fc3c 	bl	8006a1c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	0018      	movs	r0, r3
 80061a8:	f000 f8ed 	bl	8006386 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2241      	movs	r2, #65	; 0x41
 80061b0:	5c9b      	ldrb	r3, [r3, r2]
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b60      	cmp	r3, #96	; 0x60
 80061b6:	d01f      	beq.n	80061f8 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2241      	movs	r2, #65	; 0x41
 80061bc:	2120      	movs	r1, #32
 80061be:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	2220      	movs	r2, #32
 80061c8:	4013      	ands	r3, r2
 80061ca:	2b20      	cmp	r3, #32
 80061cc:	d114      	bne.n	80061f8 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	2210      	movs	r2, #16
 80061d6:	4013      	ands	r3, r2
 80061d8:	2b10      	cmp	r3, #16
 80061da:	d109      	bne.n	80061f0 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2210      	movs	r2, #16
 80061e2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061e8:	2204      	movs	r2, #4
 80061ea:	431a      	orrs	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2220      	movs	r2, #32
 80061f6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006202:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006208:	2b00      	cmp	r3, #0
 800620a:	d03b      	beq.n	8006284 <I2C_ITError+0x154>
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	2b11      	cmp	r3, #17
 8006210:	d002      	beq.n	8006218 <I2C_ITError+0xe8>
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	2b21      	cmp	r3, #33	; 0x21
 8006216:	d135      	bne.n	8006284 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	2380      	movs	r3, #128	; 0x80
 8006220:	01db      	lsls	r3, r3, #7
 8006222:	401a      	ands	r2, r3
 8006224:	2380      	movs	r3, #128	; 0x80
 8006226:	01db      	lsls	r3, r3, #7
 8006228:	429a      	cmp	r2, r3
 800622a:	d107      	bne.n	800623c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	493c      	ldr	r1, [pc, #240]	; (8006328 <I2C_ITError+0x1f8>)
 8006238:	400a      	ands	r2, r1
 800623a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006240:	0018      	movs	r0, r3
 8006242:	f7fe fa1a 	bl	800467a <HAL_DMA_GetState>
 8006246:	0003      	movs	r3, r0
 8006248:	2b01      	cmp	r3, #1
 800624a:	d016      	beq.n	800627a <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006250:	4a36      	ldr	r2, [pc, #216]	; (800632c <I2C_ITError+0x1fc>)
 8006252:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2240      	movs	r2, #64	; 0x40
 8006258:	2100      	movs	r1, #0
 800625a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006260:	0018      	movs	r0, r3
 8006262:	f7fe f915 	bl	8004490 <HAL_DMA_Abort_IT>
 8006266:	1e03      	subs	r3, r0, #0
 8006268:	d051      	beq.n	800630e <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006274:	0018      	movs	r0, r3
 8006276:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006278:	e049      	b.n	800630e <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	0018      	movs	r0, r3
 800627e:	f000 f859 	bl	8006334 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006282:	e044      	b.n	800630e <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006288:	2b00      	cmp	r3, #0
 800628a:	d03b      	beq.n	8006304 <I2C_ITError+0x1d4>
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	2b12      	cmp	r3, #18
 8006290:	d002      	beq.n	8006298 <I2C_ITError+0x168>
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	2b22      	cmp	r3, #34	; 0x22
 8006296:	d135      	bne.n	8006304 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	2380      	movs	r3, #128	; 0x80
 80062a0:	021b      	lsls	r3, r3, #8
 80062a2:	401a      	ands	r2, r3
 80062a4:	2380      	movs	r3, #128	; 0x80
 80062a6:	021b      	lsls	r3, r3, #8
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d107      	bne.n	80062bc <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	491e      	ldr	r1, [pc, #120]	; (8006330 <I2C_ITError+0x200>)
 80062b8:	400a      	ands	r2, r1
 80062ba:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c0:	0018      	movs	r0, r3
 80062c2:	f7fe f9da 	bl	800467a <HAL_DMA_GetState>
 80062c6:	0003      	movs	r3, r0
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d016      	beq.n	80062fa <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062d0:	4a16      	ldr	r2, [pc, #88]	; (800632c <I2C_ITError+0x1fc>)
 80062d2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2240      	movs	r2, #64	; 0x40
 80062d8:	2100      	movs	r1, #0
 80062da:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e0:	0018      	movs	r0, r3
 80062e2:	f7fe f8d5 	bl	8004490 <HAL_DMA_Abort_IT>
 80062e6:	1e03      	subs	r3, r0, #0
 80062e8:	d013      	beq.n	8006312 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f4:	0018      	movs	r0, r3
 80062f6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80062f8:	e00b      	b.n	8006312 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	0018      	movs	r0, r3
 80062fe:	f000 f819 	bl	8006334 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006302:	e006      	b.n	8006312 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	0018      	movs	r0, r3
 8006308:	f000 f814 	bl	8006334 <I2C_TreatErrorCallback>
  }
}
 800630c:	e002      	b.n	8006314 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800630e:	46c0      	nop			; (mov r8, r8)
 8006310:	e000      	b.n	8006314 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006312:	46c0      	nop			; (mov r8, r8)
}
 8006314:	46c0      	nop			; (mov r8, r8)
 8006316:	46bd      	mov	sp, r7
 8006318:	b004      	add	sp, #16
 800631a:	bd80      	pop	{r7, pc}
 800631c:	ffff0000 	.word	0xffff0000
 8006320:	0800514d 	.word	0x0800514d
 8006324:	00008003 	.word	0x00008003
 8006328:	ffffbfff 	.word	0xffffbfff
 800632c:	0800649f 	.word	0x0800649f
 8006330:	ffff7fff 	.word	0xffff7fff

08006334 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2241      	movs	r2, #65	; 0x41
 8006340:	5c9b      	ldrb	r3, [r3, r2]
 8006342:	b2db      	uxtb	r3, r3
 8006344:	2b60      	cmp	r3, #96	; 0x60
 8006346:	d10f      	bne.n	8006368 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2241      	movs	r2, #65	; 0x41
 800634c:	2120      	movs	r1, #32
 800634e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2240      	movs	r2, #64	; 0x40
 800635a:	2100      	movs	r1, #0
 800635c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	0018      	movs	r0, r3
 8006362:	f7fe feea 	bl	800513a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006366:	e00a      	b.n	800637e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2240      	movs	r2, #64	; 0x40
 8006372:	2100      	movs	r1, #0
 8006374:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	0018      	movs	r0, r3
 800637a:	f7fe fed6 	bl	800512a <HAL_I2C_ErrorCallback>
}
 800637e:	46c0      	nop			; (mov r8, r8)
 8006380:	46bd      	mov	sp, r7
 8006382:	b002      	add	sp, #8
 8006384:	bd80      	pop	{r7, pc}

08006386 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b082      	sub	sp, #8
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	699b      	ldr	r3, [r3, #24]
 8006394:	2202      	movs	r2, #2
 8006396:	4013      	ands	r3, r2
 8006398:	2b02      	cmp	r3, #2
 800639a:	d103      	bne.n	80063a4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2200      	movs	r2, #0
 80063a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	2201      	movs	r2, #1
 80063ac:	4013      	ands	r3, r2
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d007      	beq.n	80063c2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	699a      	ldr	r2, [r3, #24]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2101      	movs	r1, #1
 80063be:	430a      	orrs	r2, r1
 80063c0:	619a      	str	r2, [r3, #24]
  }
}
 80063c2:	46c0      	nop			; (mov r8, r8)
 80063c4:	46bd      	mov	sp, r7
 80063c6:	b002      	add	sp, #8
 80063c8:	bd80      	pop	{r7, pc}
	...

080063cc <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d8:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4920      	ldr	r1, [pc, #128]	; (8006468 <I2C_DMAMasterTransmitCplt+0x9c>)
 80063e6:	400a      	ands	r2, r1
 80063e8:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d105      	bne.n	8006400 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2120      	movs	r1, #32
 80063f8:	0018      	movs	r0, r3
 80063fa:	f000 fa81 	bl	8006900 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80063fe:	e02e      	b.n	800645e <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006408:	189a      	adds	r2, r3, r2
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006412:	b29b      	uxth	r3, r3
 8006414:	2bff      	cmp	r3, #255	; 0xff
 8006416:	d903      	bls.n	8006420 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	22ff      	movs	r2, #255	; 0xff
 800641c:	851a      	strh	r2, [r3, #40]	; 0x28
 800641e:	e004      	b.n	800642a <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006424:	b29a      	uxth	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006432:	0019      	movs	r1, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	3328      	adds	r3, #40	; 0x28
 800643a:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006440:	f7fd ff80 	bl	8004344 <HAL_DMA_Start_IT>
 8006444:	1e03      	subs	r3, r0, #0
 8006446:	d005      	beq.n	8006454 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2110      	movs	r1, #16
 800644c:	0018      	movs	r0, r3
 800644e:	f7ff fe6f 	bl	8006130 <I2C_ITError>
}
 8006452:	e004      	b.n	800645e <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2140      	movs	r1, #64	; 0x40
 8006458:	0018      	movs	r0, r3
 800645a:	f000 fa51 	bl	8006900 <I2C_Enable_IRQ>
}
 800645e:	46c0      	nop			; (mov r8, r8)
 8006460:	46bd      	mov	sp, r7
 8006462:	b004      	add	sp, #16
 8006464:	bd80      	pop	{r7, pc}
 8006466:	46c0      	nop			; (mov r8, r8)
 8006468:	ffffbfff 	.word	0xffffbfff

0800646c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006478:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2180      	movs	r1, #128	; 0x80
 8006486:	0209      	lsls	r1, r1, #8
 8006488:	430a      	orrs	r2, r1
 800648a:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2110      	movs	r1, #16
 8006490:	0018      	movs	r0, r3
 8006492:	f7ff fe4d 	bl	8006130 <I2C_ITError>
}
 8006496:	46c0      	nop			; (mov r8, r8)
 8006498:	46bd      	mov	sp, r7
 800649a:	b004      	add	sp, #16
 800649c:	bd80      	pop	{r7, pc}

0800649e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b084      	sub	sp, #16
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d003      	beq.n	80064bc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b8:	2200      	movs	r2, #0
 80064ba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d003      	beq.n	80064cc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c8:	2200      	movs	r2, #0
 80064ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	0018      	movs	r0, r3
 80064d0:	f7ff ff30 	bl	8006334 <I2C_TreatErrorCallback>
}
 80064d4:	46c0      	nop			; (mov r8, r8)
 80064d6:	46bd      	mov	sp, r7
 80064d8:	b004      	add	sp, #16
 80064da:	bd80      	pop	{r7, pc}

080064dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	603b      	str	r3, [r7, #0]
 80064e8:	1dfb      	adds	r3, r7, #7
 80064ea:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064ec:	e030      	b.n	8006550 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	3301      	adds	r3, #1
 80064f2:	d02d      	beq.n	8006550 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064f4:	f7fd fa0c 	bl	8003910 <HAL_GetTick>
 80064f8:	0002      	movs	r2, r0
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	683a      	ldr	r2, [r7, #0]
 8006500:	429a      	cmp	r2, r3
 8006502:	d302      	bcc.n	800650a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d122      	bne.n	8006550 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	4013      	ands	r3, r2
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	425a      	negs	r2, r3
 800651a:	4153      	adcs	r3, r2
 800651c:	b2db      	uxtb	r3, r3
 800651e:	001a      	movs	r2, r3
 8006520:	1dfb      	adds	r3, r7, #7
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	429a      	cmp	r2, r3
 8006526:	d113      	bne.n	8006550 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800652c:	2220      	movs	r2, #32
 800652e:	431a      	orrs	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2241      	movs	r2, #65	; 0x41
 8006538:	2120      	movs	r1, #32
 800653a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2242      	movs	r2, #66	; 0x42
 8006540:	2100      	movs	r1, #0
 8006542:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2240      	movs	r2, #64	; 0x40
 8006548:	2100      	movs	r1, #0
 800654a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e00f      	b.n	8006570 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	4013      	ands	r3, r2
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	425a      	negs	r2, r3
 8006560:	4153      	adcs	r3, r2
 8006562:	b2db      	uxtb	r3, r3
 8006564:	001a      	movs	r2, r3
 8006566:	1dfb      	adds	r3, r7, #7
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	429a      	cmp	r2, r3
 800656c:	d0bf      	beq.n	80064ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	0018      	movs	r0, r3
 8006572:	46bd      	mov	sp, r7
 8006574:	b004      	add	sp, #16
 8006576:	bd80      	pop	{r7, pc}

08006578 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006584:	e032      	b.n	80065ec <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	68b9      	ldr	r1, [r7, #8]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	0018      	movs	r0, r3
 800658e:	f000 f87d 	bl	800668c <I2C_IsErrorOccurred>
 8006592:	1e03      	subs	r3, r0, #0
 8006594:	d001      	beq.n	800659a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e030      	b.n	80065fc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	3301      	adds	r3, #1
 800659e:	d025      	beq.n	80065ec <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065a0:	f7fd f9b6 	bl	8003910 <HAL_GetTick>
 80065a4:	0002      	movs	r2, r0
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d302      	bcc.n	80065b6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d11a      	bne.n	80065ec <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	2202      	movs	r2, #2
 80065be:	4013      	ands	r3, r2
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d013      	beq.n	80065ec <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c8:	2220      	movs	r2, #32
 80065ca:	431a      	orrs	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2241      	movs	r2, #65	; 0x41
 80065d4:	2120      	movs	r1, #32
 80065d6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2242      	movs	r2, #66	; 0x42
 80065dc:	2100      	movs	r1, #0
 80065de:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2240      	movs	r2, #64	; 0x40
 80065e4:	2100      	movs	r1, #0
 80065e6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e007      	b.n	80065fc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	2202      	movs	r2, #2
 80065f4:	4013      	ands	r3, r2
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d1c5      	bne.n	8006586 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	0018      	movs	r0, r3
 80065fe:	46bd      	mov	sp, r7
 8006600:	b004      	add	sp, #16
 8006602:	bd80      	pop	{r7, pc}

08006604 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006610:	e02f      	b.n	8006672 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	68b9      	ldr	r1, [r7, #8]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	0018      	movs	r0, r3
 800661a:	f000 f837 	bl	800668c <I2C_IsErrorOccurred>
 800661e:	1e03      	subs	r3, r0, #0
 8006620:	d001      	beq.n	8006626 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e02d      	b.n	8006682 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006626:	f7fd f973 	bl	8003910 <HAL_GetTick>
 800662a:	0002      	movs	r2, r0
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	68ba      	ldr	r2, [r7, #8]
 8006632:	429a      	cmp	r2, r3
 8006634:	d302      	bcc.n	800663c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d11a      	bne.n	8006672 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	2220      	movs	r2, #32
 8006644:	4013      	ands	r3, r2
 8006646:	2b20      	cmp	r3, #32
 8006648:	d013      	beq.n	8006672 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800664e:	2220      	movs	r2, #32
 8006650:	431a      	orrs	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2241      	movs	r2, #65	; 0x41
 800665a:	2120      	movs	r1, #32
 800665c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2242      	movs	r2, #66	; 0x42
 8006662:	2100      	movs	r1, #0
 8006664:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2240      	movs	r2, #64	; 0x40
 800666a:	2100      	movs	r1, #0
 800666c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e007      	b.n	8006682 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	2220      	movs	r2, #32
 800667a:	4013      	ands	r3, r2
 800667c:	2b20      	cmp	r3, #32
 800667e:	d1c8      	bne.n	8006612 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	0018      	movs	r0, r3
 8006684:	46bd      	mov	sp, r7
 8006686:	b004      	add	sp, #16
 8006688:	bd80      	pop	{r7, pc}
	...

0800668c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800668c:	b590      	push	{r4, r7, lr}
 800668e:	b08b      	sub	sp, #44	; 0x2c
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006698:	2327      	movs	r3, #39	; 0x27
 800669a:	18fb      	adds	r3, r7, r3
 800669c:	2200      	movs	r2, #0
 800669e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80066a8:	2300      	movs	r3, #0
 80066aa:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	2210      	movs	r2, #16
 80066b4:	4013      	ands	r3, r2
 80066b6:	d100      	bne.n	80066ba <I2C_IsErrorOccurred+0x2e>
 80066b8:	e082      	b.n	80067c0 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2210      	movs	r2, #16
 80066c0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80066c2:	e060      	b.n	8006786 <I2C_IsErrorOccurred+0xfa>
 80066c4:	2427      	movs	r4, #39	; 0x27
 80066c6:	193b      	adds	r3, r7, r4
 80066c8:	193a      	adds	r2, r7, r4
 80066ca:	7812      	ldrb	r2, [r2, #0]
 80066cc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	3301      	adds	r3, #1
 80066d2:	d058      	beq.n	8006786 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80066d4:	f7fd f91c 	bl	8003910 <HAL_GetTick>
 80066d8:	0002      	movs	r2, r0
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	68ba      	ldr	r2, [r7, #8]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d306      	bcc.n	80066f2 <I2C_IsErrorOccurred+0x66>
 80066e4:	193b      	adds	r3, r7, r4
 80066e6:	193a      	adds	r2, r7, r4
 80066e8:	7812      	ldrb	r2, [r2, #0]
 80066ea:	701a      	strb	r2, [r3, #0]
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d149      	bne.n	8006786 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	2380      	movs	r3, #128	; 0x80
 80066fa:	01db      	lsls	r3, r3, #7
 80066fc:	4013      	ands	r3, r2
 80066fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006700:	2013      	movs	r0, #19
 8006702:	183b      	adds	r3, r7, r0
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	2142      	movs	r1, #66	; 0x42
 8006708:	5c52      	ldrb	r2, [r2, r1]
 800670a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	699a      	ldr	r2, [r3, #24]
 8006712:	2380      	movs	r3, #128	; 0x80
 8006714:	021b      	lsls	r3, r3, #8
 8006716:	401a      	ands	r2, r3
 8006718:	2380      	movs	r3, #128	; 0x80
 800671a:	021b      	lsls	r3, r3, #8
 800671c:	429a      	cmp	r2, r3
 800671e:	d126      	bne.n	800676e <I2C_IsErrorOccurred+0xe2>
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	2380      	movs	r3, #128	; 0x80
 8006724:	01db      	lsls	r3, r3, #7
 8006726:	429a      	cmp	r2, r3
 8006728:	d021      	beq.n	800676e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800672a:	183b      	adds	r3, r7, r0
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	2b20      	cmp	r3, #32
 8006730:	d01d      	beq.n	800676e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	685a      	ldr	r2, [r3, #4]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2180      	movs	r1, #128	; 0x80
 800673e:	01c9      	lsls	r1, r1, #7
 8006740:	430a      	orrs	r2, r1
 8006742:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006744:	f7fd f8e4 	bl	8003910 <HAL_GetTick>
 8006748:	0003      	movs	r3, r0
 800674a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800674c:	e00f      	b.n	800676e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800674e:	f7fd f8df 	bl	8003910 <HAL_GetTick>
 8006752:	0002      	movs	r2, r0
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	2b19      	cmp	r3, #25
 800675a:	d908      	bls.n	800676e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800675c:	6a3b      	ldr	r3, [r7, #32]
 800675e:	2220      	movs	r2, #32
 8006760:	4313      	orrs	r3, r2
 8006762:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006764:	2327      	movs	r3, #39	; 0x27
 8006766:	18fb      	adds	r3, r7, r3
 8006768:	2201      	movs	r2, #1
 800676a:	701a      	strb	r2, [r3, #0]

              break;
 800676c:	e00b      	b.n	8006786 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	2220      	movs	r2, #32
 8006776:	4013      	ands	r3, r2
 8006778:	2127      	movs	r1, #39	; 0x27
 800677a:	187a      	adds	r2, r7, r1
 800677c:	1879      	adds	r1, r7, r1
 800677e:	7809      	ldrb	r1, [r1, #0]
 8006780:	7011      	strb	r1, [r2, #0]
 8006782:	2b20      	cmp	r3, #32
 8006784:	d1e3      	bne.n	800674e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	2220      	movs	r2, #32
 800678e:	4013      	ands	r3, r2
 8006790:	2b20      	cmp	r3, #32
 8006792:	d004      	beq.n	800679e <I2C_IsErrorOccurred+0x112>
 8006794:	2327      	movs	r3, #39	; 0x27
 8006796:	18fb      	adds	r3, r7, r3
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d092      	beq.n	80066c4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800679e:	2327      	movs	r3, #39	; 0x27
 80067a0:	18fb      	adds	r3, r7, r3
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d103      	bne.n	80067b0 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2220      	movs	r2, #32
 80067ae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80067b0:	6a3b      	ldr	r3, [r7, #32]
 80067b2:	2204      	movs	r2, #4
 80067b4:	4313      	orrs	r3, r2
 80067b6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80067b8:	2327      	movs	r3, #39	; 0x27
 80067ba:	18fb      	adds	r3, r7, r3
 80067bc:	2201      	movs	r2, #1
 80067be:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80067c8:	69ba      	ldr	r2, [r7, #24]
 80067ca:	2380      	movs	r3, #128	; 0x80
 80067cc:	005b      	lsls	r3, r3, #1
 80067ce:	4013      	ands	r3, r2
 80067d0:	d00c      	beq.n	80067ec <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80067d2:	6a3b      	ldr	r3, [r7, #32]
 80067d4:	2201      	movs	r2, #1
 80067d6:	4313      	orrs	r3, r2
 80067d8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2280      	movs	r2, #128	; 0x80
 80067e0:	0052      	lsls	r2, r2, #1
 80067e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80067e4:	2327      	movs	r3, #39	; 0x27
 80067e6:	18fb      	adds	r3, r7, r3
 80067e8:	2201      	movs	r2, #1
 80067ea:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80067ec:	69ba      	ldr	r2, [r7, #24]
 80067ee:	2380      	movs	r3, #128	; 0x80
 80067f0:	00db      	lsls	r3, r3, #3
 80067f2:	4013      	ands	r3, r2
 80067f4:	d00c      	beq.n	8006810 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80067f6:	6a3b      	ldr	r3, [r7, #32]
 80067f8:	2208      	movs	r2, #8
 80067fa:	4313      	orrs	r3, r2
 80067fc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2280      	movs	r2, #128	; 0x80
 8006804:	00d2      	lsls	r2, r2, #3
 8006806:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006808:	2327      	movs	r3, #39	; 0x27
 800680a:	18fb      	adds	r3, r7, r3
 800680c:	2201      	movs	r2, #1
 800680e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006810:	69ba      	ldr	r2, [r7, #24]
 8006812:	2380      	movs	r3, #128	; 0x80
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	4013      	ands	r3, r2
 8006818:	d00c      	beq.n	8006834 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800681a:	6a3b      	ldr	r3, [r7, #32]
 800681c:	2202      	movs	r2, #2
 800681e:	4313      	orrs	r3, r2
 8006820:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2280      	movs	r2, #128	; 0x80
 8006828:	0092      	lsls	r2, r2, #2
 800682a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800682c:	2327      	movs	r3, #39	; 0x27
 800682e:	18fb      	adds	r3, r7, r3
 8006830:	2201      	movs	r2, #1
 8006832:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8006834:	2327      	movs	r3, #39	; 0x27
 8006836:	18fb      	adds	r3, r7, r3
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d01d      	beq.n	800687a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	0018      	movs	r0, r3
 8006842:	f7ff fda0 	bl	8006386 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	685a      	ldr	r2, [r3, #4]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	490d      	ldr	r1, [pc, #52]	; (8006888 <I2C_IsErrorOccurred+0x1fc>)
 8006852:	400a      	ands	r2, r1
 8006854:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800685a:	6a3b      	ldr	r3, [r7, #32]
 800685c:	431a      	orrs	r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2241      	movs	r2, #65	; 0x41
 8006866:	2120      	movs	r1, #32
 8006868:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2242      	movs	r2, #66	; 0x42
 800686e:	2100      	movs	r1, #0
 8006870:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2240      	movs	r2, #64	; 0x40
 8006876:	2100      	movs	r1, #0
 8006878:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800687a:	2327      	movs	r3, #39	; 0x27
 800687c:	18fb      	adds	r3, r7, r3
 800687e:	781b      	ldrb	r3, [r3, #0]
}
 8006880:	0018      	movs	r0, r3
 8006882:	46bd      	mov	sp, r7
 8006884:	b00b      	add	sp, #44	; 0x2c
 8006886:	bd90      	pop	{r4, r7, pc}
 8006888:	fe00e800 	.word	0xfe00e800

0800688c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800688c:	b590      	push	{r4, r7, lr}
 800688e:	b087      	sub	sp, #28
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	0008      	movs	r0, r1
 8006896:	0011      	movs	r1, r2
 8006898:	607b      	str	r3, [r7, #4]
 800689a:	240a      	movs	r4, #10
 800689c:	193b      	adds	r3, r7, r4
 800689e:	1c02      	adds	r2, r0, #0
 80068a0:	801a      	strh	r2, [r3, #0]
 80068a2:	2009      	movs	r0, #9
 80068a4:	183b      	adds	r3, r7, r0
 80068a6:	1c0a      	adds	r2, r1, #0
 80068a8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80068aa:	193b      	adds	r3, r7, r4
 80068ac:	881b      	ldrh	r3, [r3, #0]
 80068ae:	059b      	lsls	r3, r3, #22
 80068b0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80068b2:	183b      	adds	r3, r7, r0
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	0419      	lsls	r1, r3, #16
 80068b8:	23ff      	movs	r3, #255	; 0xff
 80068ba:	041b      	lsls	r3, r3, #16
 80068bc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80068be:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80068c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c6:	4313      	orrs	r3, r2
 80068c8:	005b      	lsls	r3, r3, #1
 80068ca:	085b      	lsrs	r3, r3, #1
 80068cc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068d6:	0d51      	lsrs	r1, r2, #21
 80068d8:	2280      	movs	r2, #128	; 0x80
 80068da:	00d2      	lsls	r2, r2, #3
 80068dc:	400a      	ands	r2, r1
 80068de:	4907      	ldr	r1, [pc, #28]	; (80068fc <I2C_TransferConfig+0x70>)
 80068e0:	430a      	orrs	r2, r1
 80068e2:	43d2      	mvns	r2, r2
 80068e4:	401a      	ands	r2, r3
 80068e6:	0011      	movs	r1, r2
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80068f2:	46c0      	nop			; (mov r8, r8)
 80068f4:	46bd      	mov	sp, r7
 80068f6:	b007      	add	sp, #28
 80068f8:	bd90      	pop	{r4, r7, pc}
 80068fa:	46c0      	nop			; (mov r8, r8)
 80068fc:	03ff63ff 	.word	0x03ff63ff

08006900 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	000a      	movs	r2, r1
 800690a:	1cbb      	adds	r3, r7, #2
 800690c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800690e:	2300      	movs	r3, #0
 8006910:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006916:	4b3e      	ldr	r3, [pc, #248]	; (8006a10 <I2C_Enable_IRQ+0x110>)
 8006918:	429a      	cmp	r2, r3
 800691a:	d035      	beq.n	8006988 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006920:	4b3c      	ldr	r3, [pc, #240]	; (8006a14 <I2C_Enable_IRQ+0x114>)
 8006922:	429a      	cmp	r2, r3
 8006924:	d030      	beq.n	8006988 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800692a:	4b3b      	ldr	r3, [pc, #236]	; (8006a18 <I2C_Enable_IRQ+0x118>)
 800692c:	429a      	cmp	r2, r3
 800692e:	d02b      	beq.n	8006988 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006930:	1cbb      	adds	r3, r7, #2
 8006932:	2200      	movs	r2, #0
 8006934:	5e9b      	ldrsh	r3, [r3, r2]
 8006936:	2b00      	cmp	r3, #0
 8006938:	da03      	bge.n	8006942 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	22b8      	movs	r2, #184	; 0xb8
 800693e:	4313      	orrs	r3, r2
 8006940:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006942:	1cbb      	adds	r3, r7, #2
 8006944:	881b      	ldrh	r3, [r3, #0]
 8006946:	2201      	movs	r2, #1
 8006948:	4013      	ands	r3, r2
 800694a:	d003      	beq.n	8006954 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	22f2      	movs	r2, #242	; 0xf2
 8006950:	4313      	orrs	r3, r2
 8006952:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006954:	1cbb      	adds	r3, r7, #2
 8006956:	881b      	ldrh	r3, [r3, #0]
 8006958:	2202      	movs	r2, #2
 800695a:	4013      	ands	r3, r2
 800695c:	d003      	beq.n	8006966 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	22f4      	movs	r2, #244	; 0xf4
 8006962:	4313      	orrs	r3, r2
 8006964:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006966:	1cbb      	adds	r3, r7, #2
 8006968:	881b      	ldrh	r3, [r3, #0]
 800696a:	2b10      	cmp	r3, #16
 800696c:	d103      	bne.n	8006976 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2290      	movs	r2, #144	; 0x90
 8006972:	4313      	orrs	r3, r2
 8006974:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006976:	1cbb      	adds	r3, r7, #2
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	2b20      	cmp	r3, #32
 800697c:	d13c      	bne.n	80069f8 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2220      	movs	r2, #32
 8006982:	4313      	orrs	r3, r2
 8006984:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006986:	e037      	b.n	80069f8 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006988:	1cbb      	adds	r3, r7, #2
 800698a:	2200      	movs	r2, #0
 800698c:	5e9b      	ldrsh	r3, [r3, r2]
 800698e:	2b00      	cmp	r3, #0
 8006990:	da03      	bge.n	800699a <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	22b8      	movs	r2, #184	; 0xb8
 8006996:	4313      	orrs	r3, r2
 8006998:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800699a:	1cbb      	adds	r3, r7, #2
 800699c:	881b      	ldrh	r3, [r3, #0]
 800699e:	2201      	movs	r2, #1
 80069a0:	4013      	ands	r3, r2
 80069a2:	d003      	beq.n	80069ac <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	22f2      	movs	r2, #242	; 0xf2
 80069a8:	4313      	orrs	r3, r2
 80069aa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80069ac:	1cbb      	adds	r3, r7, #2
 80069ae:	881b      	ldrh	r3, [r3, #0]
 80069b0:	2202      	movs	r2, #2
 80069b2:	4013      	ands	r3, r2
 80069b4:	d003      	beq.n	80069be <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	22f4      	movs	r2, #244	; 0xf4
 80069ba:	4313      	orrs	r3, r2
 80069bc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80069be:	1cbb      	adds	r3, r7, #2
 80069c0:	881b      	ldrh	r3, [r3, #0]
 80069c2:	2b10      	cmp	r3, #16
 80069c4:	d103      	bne.n	80069ce <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2290      	movs	r2, #144	; 0x90
 80069ca:	4313      	orrs	r3, r2
 80069cc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80069ce:	1cbb      	adds	r3, r7, #2
 80069d0:	881b      	ldrh	r3, [r3, #0]
 80069d2:	2b20      	cmp	r3, #32
 80069d4:	d103      	bne.n	80069de <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2260      	movs	r2, #96	; 0x60
 80069da:	4313      	orrs	r3, r2
 80069dc:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069e2:	4b0d      	ldr	r3, [pc, #52]	; (8006a18 <I2C_Enable_IRQ+0x118>)
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d007      	beq.n	80069f8 <I2C_Enable_IRQ+0xf8>
 80069e8:	1cbb      	adds	r3, r7, #2
 80069ea:	881b      	ldrh	r3, [r3, #0]
 80069ec:	2b40      	cmp	r3, #64	; 0x40
 80069ee:	d103      	bne.n	80069f8 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2240      	movs	r2, #64	; 0x40
 80069f4:	4313      	orrs	r3, r2
 80069f6:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6819      	ldr	r1, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	601a      	str	r2, [r3, #0]
}
 8006a08:	46c0      	nop			; (mov r8, r8)
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	b004      	add	sp, #16
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	0800534d 	.word	0x0800534d
 8006a14:	0800577d 	.word	0x0800577d
 8006a18:	08005545 	.word	0x08005545

08006a1c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	000a      	movs	r2, r1
 8006a26:	1cbb      	adds	r3, r7, #2
 8006a28:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006a2e:	1cbb      	adds	r3, r7, #2
 8006a30:	881b      	ldrh	r3, [r3, #0]
 8006a32:	2201      	movs	r2, #1
 8006a34:	4013      	ands	r3, r2
 8006a36:	d010      	beq.n	8006a5a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2242      	movs	r2, #66	; 0x42
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2241      	movs	r2, #65	; 0x41
 8006a44:	5c9b      	ldrb	r3, [r3, r2]
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	001a      	movs	r2, r3
 8006a4a:	2328      	movs	r3, #40	; 0x28
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	2b28      	cmp	r3, #40	; 0x28
 8006a50:	d003      	beq.n	8006a5a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	22b0      	movs	r2, #176	; 0xb0
 8006a56:	4313      	orrs	r3, r2
 8006a58:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006a5a:	1cbb      	adds	r3, r7, #2
 8006a5c:	881b      	ldrh	r3, [r3, #0]
 8006a5e:	2202      	movs	r2, #2
 8006a60:	4013      	ands	r3, r2
 8006a62:	d010      	beq.n	8006a86 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2244      	movs	r2, #68	; 0x44
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2241      	movs	r2, #65	; 0x41
 8006a70:	5c9b      	ldrb	r3, [r3, r2]
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	001a      	movs	r2, r3
 8006a76:	2328      	movs	r3, #40	; 0x28
 8006a78:	4013      	ands	r3, r2
 8006a7a:	2b28      	cmp	r3, #40	; 0x28
 8006a7c:	d003      	beq.n	8006a86 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	22b0      	movs	r2, #176	; 0xb0
 8006a82:	4313      	orrs	r3, r2
 8006a84:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006a86:	1cbb      	adds	r3, r7, #2
 8006a88:	2200      	movs	r2, #0
 8006a8a:	5e9b      	ldrsh	r3, [r3, r2]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	da03      	bge.n	8006a98 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	22b8      	movs	r2, #184	; 0xb8
 8006a94:	4313      	orrs	r3, r2
 8006a96:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006a98:	1cbb      	adds	r3, r7, #2
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	2b10      	cmp	r3, #16
 8006a9e:	d103      	bne.n	8006aa8 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2290      	movs	r2, #144	; 0x90
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006aa8:	1cbb      	adds	r3, r7, #2
 8006aaa:	881b      	ldrh	r3, [r3, #0]
 8006aac:	2b20      	cmp	r3, #32
 8006aae:	d103      	bne.n	8006ab8 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2220      	movs	r2, #32
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006ab8:	1cbb      	adds	r3, r7, #2
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	2b40      	cmp	r3, #64	; 0x40
 8006abe:	d103      	bne.n	8006ac8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2240      	movs	r2, #64	; 0x40
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	43d9      	mvns	r1, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	400a      	ands	r2, r1
 8006ad8:	601a      	str	r2, [r3, #0]
}
 8006ada:	46c0      	nop			; (mov r8, r8)
 8006adc:	46bd      	mov	sp, r7
 8006ade:	b004      	add	sp, #16
 8006ae0:	bd80      	pop	{r7, pc}
	...

08006ae4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2241      	movs	r2, #65	; 0x41
 8006af2:	5c9b      	ldrb	r3, [r3, r2]
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b20      	cmp	r3, #32
 8006af8:	d138      	bne.n	8006b6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2240      	movs	r2, #64	; 0x40
 8006afe:	5c9b      	ldrb	r3, [r3, r2]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d101      	bne.n	8006b08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006b04:	2302      	movs	r3, #2
 8006b06:	e032      	b.n	8006b6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2240      	movs	r2, #64	; 0x40
 8006b0c:	2101      	movs	r1, #1
 8006b0e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2241      	movs	r2, #65	; 0x41
 8006b14:	2124      	movs	r1, #36	; 0x24
 8006b16:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2101      	movs	r1, #1
 8006b24:	438a      	bics	r2, r1
 8006b26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4911      	ldr	r1, [pc, #68]	; (8006b78 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006b34:	400a      	ands	r2, r1
 8006b36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6819      	ldr	r1, [r3, #0]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	430a      	orrs	r2, r1
 8006b46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2101      	movs	r1, #1
 8006b54:	430a      	orrs	r2, r1
 8006b56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2241      	movs	r2, #65	; 0x41
 8006b5c:	2120      	movs	r1, #32
 8006b5e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2240      	movs	r2, #64	; 0x40
 8006b64:	2100      	movs	r1, #0
 8006b66:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	e000      	b.n	8006b6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006b6c:	2302      	movs	r3, #2
  }
}
 8006b6e:	0018      	movs	r0, r3
 8006b70:	46bd      	mov	sp, r7
 8006b72:	b002      	add	sp, #8
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	46c0      	nop			; (mov r8, r8)
 8006b78:	ffffefff 	.word	0xffffefff

08006b7c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2241      	movs	r2, #65	; 0x41
 8006b8a:	5c9b      	ldrb	r3, [r3, r2]
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	2b20      	cmp	r3, #32
 8006b90:	d139      	bne.n	8006c06 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2240      	movs	r2, #64	; 0x40
 8006b96:	5c9b      	ldrb	r3, [r3, r2]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d101      	bne.n	8006ba0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	e033      	b.n	8006c08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2240      	movs	r2, #64	; 0x40
 8006ba4:	2101      	movs	r1, #1
 8006ba6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2241      	movs	r2, #65	; 0x41
 8006bac:	2124      	movs	r1, #36	; 0x24
 8006bae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2101      	movs	r1, #1
 8006bbc:	438a      	bics	r2, r1
 8006bbe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	4a11      	ldr	r2, [pc, #68]	; (8006c10 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006bcc:	4013      	ands	r3, r2
 8006bce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	021b      	lsls	r3, r3, #8
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2101      	movs	r1, #1
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2241      	movs	r2, #65	; 0x41
 8006bf6:	2120      	movs	r1, #32
 8006bf8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2240      	movs	r2, #64	; 0x40
 8006bfe:	2100      	movs	r1, #0
 8006c00:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006c02:	2300      	movs	r3, #0
 8006c04:	e000      	b.n	8006c08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006c06:	2302      	movs	r3, #2
  }
}
 8006c08:	0018      	movs	r0, r3
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	b004      	add	sp, #16
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	fffff0ff 	.word	0xfffff0ff

08006c14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c14:	b5b0      	push	{r4, r5, r7, lr}
 8006c16:	b08a      	sub	sp, #40	; 0x28
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d102      	bne.n	8006c28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	f000 fbbf 	bl	80073a6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c28:	4bc9      	ldr	r3, [pc, #804]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	220c      	movs	r2, #12
 8006c2e:	4013      	ands	r3, r2
 8006c30:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c32:	4bc7      	ldr	r3, [pc, #796]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006c34:	68da      	ldr	r2, [r3, #12]
 8006c36:	2380      	movs	r3, #128	; 0x80
 8006c38:	025b      	lsls	r3, r3, #9
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2201      	movs	r2, #1
 8006c44:	4013      	ands	r3, r2
 8006c46:	d100      	bne.n	8006c4a <HAL_RCC_OscConfig+0x36>
 8006c48:	e07e      	b.n	8006d48 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	2b08      	cmp	r3, #8
 8006c4e:	d007      	beq.n	8006c60 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	2b0c      	cmp	r3, #12
 8006c54:	d112      	bne.n	8006c7c <HAL_RCC_OscConfig+0x68>
 8006c56:	69ba      	ldr	r2, [r7, #24]
 8006c58:	2380      	movs	r3, #128	; 0x80
 8006c5a:	025b      	lsls	r3, r3, #9
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d10d      	bne.n	8006c7c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c60:	4bbb      	ldr	r3, [pc, #748]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	2380      	movs	r3, #128	; 0x80
 8006c66:	029b      	lsls	r3, r3, #10
 8006c68:	4013      	ands	r3, r2
 8006c6a:	d100      	bne.n	8006c6e <HAL_RCC_OscConfig+0x5a>
 8006c6c:	e06b      	b.n	8006d46 <HAL_RCC_OscConfig+0x132>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d167      	bne.n	8006d46 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	f000 fb95 	bl	80073a6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685a      	ldr	r2, [r3, #4]
 8006c80:	2380      	movs	r3, #128	; 0x80
 8006c82:	025b      	lsls	r3, r3, #9
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d107      	bne.n	8006c98 <HAL_RCC_OscConfig+0x84>
 8006c88:	4bb1      	ldr	r3, [pc, #708]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	4bb0      	ldr	r3, [pc, #704]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006c8e:	2180      	movs	r1, #128	; 0x80
 8006c90:	0249      	lsls	r1, r1, #9
 8006c92:	430a      	orrs	r2, r1
 8006c94:	601a      	str	r2, [r3, #0]
 8006c96:	e027      	b.n	8006ce8 <HAL_RCC_OscConfig+0xd4>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685a      	ldr	r2, [r3, #4]
 8006c9c:	23a0      	movs	r3, #160	; 0xa0
 8006c9e:	02db      	lsls	r3, r3, #11
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d10e      	bne.n	8006cc2 <HAL_RCC_OscConfig+0xae>
 8006ca4:	4baa      	ldr	r3, [pc, #680]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	4ba9      	ldr	r3, [pc, #676]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006caa:	2180      	movs	r1, #128	; 0x80
 8006cac:	02c9      	lsls	r1, r1, #11
 8006cae:	430a      	orrs	r2, r1
 8006cb0:	601a      	str	r2, [r3, #0]
 8006cb2:	4ba7      	ldr	r3, [pc, #668]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	4ba6      	ldr	r3, [pc, #664]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006cb8:	2180      	movs	r1, #128	; 0x80
 8006cba:	0249      	lsls	r1, r1, #9
 8006cbc:	430a      	orrs	r2, r1
 8006cbe:	601a      	str	r2, [r3, #0]
 8006cc0:	e012      	b.n	8006ce8 <HAL_RCC_OscConfig+0xd4>
 8006cc2:	4ba3      	ldr	r3, [pc, #652]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	4ba2      	ldr	r3, [pc, #648]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006cc8:	49a2      	ldr	r1, [pc, #648]	; (8006f54 <HAL_RCC_OscConfig+0x340>)
 8006cca:	400a      	ands	r2, r1
 8006ccc:	601a      	str	r2, [r3, #0]
 8006cce:	4ba0      	ldr	r3, [pc, #640]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	2380      	movs	r3, #128	; 0x80
 8006cd4:	025b      	lsls	r3, r3, #9
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	60fb      	str	r3, [r7, #12]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	4b9c      	ldr	r3, [pc, #624]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	4b9b      	ldr	r3, [pc, #620]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006ce2:	499d      	ldr	r1, [pc, #628]	; (8006f58 <HAL_RCC_OscConfig+0x344>)
 8006ce4:	400a      	ands	r2, r1
 8006ce6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d015      	beq.n	8006d1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cf0:	f7fc fe0e 	bl	8003910 <HAL_GetTick>
 8006cf4:	0003      	movs	r3, r0
 8006cf6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006cf8:	e009      	b.n	8006d0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006cfa:	f7fc fe09 	bl	8003910 <HAL_GetTick>
 8006cfe:	0002      	movs	r2, r0
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	2b64      	cmp	r3, #100	; 0x64
 8006d06:	d902      	bls.n	8006d0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	f000 fb4c 	bl	80073a6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d0e:	4b90      	ldr	r3, [pc, #576]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	2380      	movs	r3, #128	; 0x80
 8006d14:	029b      	lsls	r3, r3, #10
 8006d16:	4013      	ands	r3, r2
 8006d18:	d0ef      	beq.n	8006cfa <HAL_RCC_OscConfig+0xe6>
 8006d1a:	e015      	b.n	8006d48 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d1c:	f7fc fdf8 	bl	8003910 <HAL_GetTick>
 8006d20:	0003      	movs	r3, r0
 8006d22:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006d24:	e008      	b.n	8006d38 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d26:	f7fc fdf3 	bl	8003910 <HAL_GetTick>
 8006d2a:	0002      	movs	r2, r0
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	2b64      	cmp	r3, #100	; 0x64
 8006d32:	d901      	bls.n	8006d38 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e336      	b.n	80073a6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006d38:	4b85      	ldr	r3, [pc, #532]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	2380      	movs	r3, #128	; 0x80
 8006d3e:	029b      	lsls	r3, r3, #10
 8006d40:	4013      	ands	r3, r2
 8006d42:	d1f0      	bne.n	8006d26 <HAL_RCC_OscConfig+0x112>
 8006d44:	e000      	b.n	8006d48 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d46:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	4013      	ands	r3, r2
 8006d50:	d100      	bne.n	8006d54 <HAL_RCC_OscConfig+0x140>
 8006d52:	e099      	b.n	8006e88 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5c:	2220      	movs	r2, #32
 8006d5e:	4013      	ands	r3, r2
 8006d60:	d009      	beq.n	8006d76 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8006d62:	4b7b      	ldr	r3, [pc, #492]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	4b7a      	ldr	r3, [pc, #488]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006d68:	2120      	movs	r1, #32
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d70:	2220      	movs	r2, #32
 8006d72:	4393      	bics	r3, r2
 8006d74:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	2b04      	cmp	r3, #4
 8006d7a:	d005      	beq.n	8006d88 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	2b0c      	cmp	r3, #12
 8006d80:	d13e      	bne.n	8006e00 <HAL_RCC_OscConfig+0x1ec>
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d13b      	bne.n	8006e00 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8006d88:	4b71      	ldr	r3, [pc, #452]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2204      	movs	r2, #4
 8006d8e:	4013      	ands	r3, r2
 8006d90:	d004      	beq.n	8006d9c <HAL_RCC_OscConfig+0x188>
 8006d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d101      	bne.n	8006d9c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e304      	b.n	80073a6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d9c:	4b6c      	ldr	r3, [pc, #432]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	4a6e      	ldr	r2, [pc, #440]	; (8006f5c <HAL_RCC_OscConfig+0x348>)
 8006da2:	4013      	ands	r3, r2
 8006da4:	0019      	movs	r1, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	021a      	lsls	r2, r3, #8
 8006dac:	4b68      	ldr	r3, [pc, #416]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006dae:	430a      	orrs	r2, r1
 8006db0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006db2:	4b67      	ldr	r3, [pc, #412]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2209      	movs	r2, #9
 8006db8:	4393      	bics	r3, r2
 8006dba:	0019      	movs	r1, r3
 8006dbc:	4b64      	ldr	r3, [pc, #400]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dc0:	430a      	orrs	r2, r1
 8006dc2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006dc4:	f000 fc42 	bl	800764c <HAL_RCC_GetSysClockFreq>
 8006dc8:	0001      	movs	r1, r0
 8006dca:	4b61      	ldr	r3, [pc, #388]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	091b      	lsrs	r3, r3, #4
 8006dd0:	220f      	movs	r2, #15
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	4a62      	ldr	r2, [pc, #392]	; (8006f60 <HAL_RCC_OscConfig+0x34c>)
 8006dd6:	5cd3      	ldrb	r3, [r2, r3]
 8006dd8:	000a      	movs	r2, r1
 8006dda:	40da      	lsrs	r2, r3
 8006ddc:	4b61      	ldr	r3, [pc, #388]	; (8006f64 <HAL_RCC_OscConfig+0x350>)
 8006dde:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8006de0:	4b61      	ldr	r3, [pc, #388]	; (8006f68 <HAL_RCC_OscConfig+0x354>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2513      	movs	r5, #19
 8006de6:	197c      	adds	r4, r7, r5
 8006de8:	0018      	movs	r0, r3
 8006dea:	f7fc fd4b 	bl	8003884 <HAL_InitTick>
 8006dee:	0003      	movs	r3, r0
 8006df0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8006df2:	197b      	adds	r3, r7, r5
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d046      	beq.n	8006e88 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8006dfa:	197b      	adds	r3, r7, r5
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	e2d2      	b.n	80073a6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8006e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d027      	beq.n	8006e56 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006e06:	4b52      	ldr	r3, [pc, #328]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2209      	movs	r2, #9
 8006e0c:	4393      	bics	r3, r2
 8006e0e:	0019      	movs	r1, r3
 8006e10:	4b4f      	ldr	r3, [pc, #316]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e14:	430a      	orrs	r2, r1
 8006e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e18:	f7fc fd7a 	bl	8003910 <HAL_GetTick>
 8006e1c:	0003      	movs	r3, r0
 8006e1e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e20:	e008      	b.n	8006e34 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e22:	f7fc fd75 	bl	8003910 <HAL_GetTick>
 8006e26:	0002      	movs	r2, r0
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d901      	bls.n	8006e34 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e2b8      	b.n	80073a6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e34:	4b46      	ldr	r3, [pc, #280]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2204      	movs	r2, #4
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	d0f1      	beq.n	8006e22 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e3e:	4b44      	ldr	r3, [pc, #272]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	4a46      	ldr	r2, [pc, #280]	; (8006f5c <HAL_RCC_OscConfig+0x348>)
 8006e44:	4013      	ands	r3, r2
 8006e46:	0019      	movs	r1, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	021a      	lsls	r2, r3, #8
 8006e4e:	4b40      	ldr	r3, [pc, #256]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006e50:	430a      	orrs	r2, r1
 8006e52:	605a      	str	r2, [r3, #4]
 8006e54:	e018      	b.n	8006e88 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e56:	4b3e      	ldr	r3, [pc, #248]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	4b3d      	ldr	r3, [pc, #244]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	438a      	bics	r2, r1
 8006e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e62:	f7fc fd55 	bl	8003910 <HAL_GetTick>
 8006e66:	0003      	movs	r3, r0
 8006e68:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006e6a:	e008      	b.n	8006e7e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e6c:	f7fc fd50 	bl	8003910 <HAL_GetTick>
 8006e70:	0002      	movs	r2, r0
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d901      	bls.n	8006e7e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e293      	b.n	80073a6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006e7e:	4b34      	ldr	r3, [pc, #208]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2204      	movs	r2, #4
 8006e84:	4013      	ands	r3, r2
 8006e86:	d1f1      	bne.n	8006e6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2210      	movs	r2, #16
 8006e8e:	4013      	ands	r3, r2
 8006e90:	d100      	bne.n	8006e94 <HAL_RCC_OscConfig+0x280>
 8006e92:	e0a2      	b.n	8006fda <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d140      	bne.n	8006f1c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006e9a:	4b2d      	ldr	r3, [pc, #180]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	2380      	movs	r3, #128	; 0x80
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	d005      	beq.n	8006eb2 <HAL_RCC_OscConfig+0x29e>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	69db      	ldr	r3, [r3, #28]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d101      	bne.n	8006eb2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e279      	b.n	80073a6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006eb2:	4b27      	ldr	r3, [pc, #156]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	4a2d      	ldr	r2, [pc, #180]	; (8006f6c <HAL_RCC_OscConfig+0x358>)
 8006eb8:	4013      	ands	r3, r2
 8006eba:	0019      	movs	r1, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ec0:	4b23      	ldr	r3, [pc, #140]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006ec6:	4b22      	ldr	r3, [pc, #136]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	021b      	lsls	r3, r3, #8
 8006ecc:	0a19      	lsrs	r1, r3, #8
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	061a      	lsls	r2, r3, #24
 8006ed4:	4b1e      	ldr	r3, [pc, #120]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ede:	0b5b      	lsrs	r3, r3, #13
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	2280      	movs	r2, #128	; 0x80
 8006ee4:	0212      	lsls	r2, r2, #8
 8006ee6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006ee8:	4b19      	ldr	r3, [pc, #100]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	091b      	lsrs	r3, r3, #4
 8006eee:	210f      	movs	r1, #15
 8006ef0:	400b      	ands	r3, r1
 8006ef2:	491b      	ldr	r1, [pc, #108]	; (8006f60 <HAL_RCC_OscConfig+0x34c>)
 8006ef4:	5ccb      	ldrb	r3, [r1, r3]
 8006ef6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006ef8:	4b1a      	ldr	r3, [pc, #104]	; (8006f64 <HAL_RCC_OscConfig+0x350>)
 8006efa:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8006efc:	4b1a      	ldr	r3, [pc, #104]	; (8006f68 <HAL_RCC_OscConfig+0x354>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2513      	movs	r5, #19
 8006f02:	197c      	adds	r4, r7, r5
 8006f04:	0018      	movs	r0, r3
 8006f06:	f7fc fcbd 	bl	8003884 <HAL_InitTick>
 8006f0a:	0003      	movs	r3, r0
 8006f0c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8006f0e:	197b      	adds	r3, r7, r5
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d061      	beq.n	8006fda <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8006f16:	197b      	adds	r3, r7, r5
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	e244      	b.n	80073a6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	69db      	ldr	r3, [r3, #28]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d040      	beq.n	8006fa6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006f24:	4b0a      	ldr	r3, [pc, #40]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	4b09      	ldr	r3, [pc, #36]	; (8006f50 <HAL_RCC_OscConfig+0x33c>)
 8006f2a:	2180      	movs	r1, #128	; 0x80
 8006f2c:	0049      	lsls	r1, r1, #1
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f32:	f7fc fced 	bl	8003910 <HAL_GetTick>
 8006f36:	0003      	movs	r3, r0
 8006f38:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006f3a:	e019      	b.n	8006f70 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006f3c:	f7fc fce8 	bl	8003910 <HAL_GetTick>
 8006f40:	0002      	movs	r2, r0
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d912      	bls.n	8006f70 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e22b      	b.n	80073a6 <HAL_RCC_OscConfig+0x792>
 8006f4e:	46c0      	nop			; (mov r8, r8)
 8006f50:	40021000 	.word	0x40021000
 8006f54:	fffeffff 	.word	0xfffeffff
 8006f58:	fffbffff 	.word	0xfffbffff
 8006f5c:	ffffe0ff 	.word	0xffffe0ff
 8006f60:	0800a68c 	.word	0x0800a68c
 8006f64:	20000000 	.word	0x20000000
 8006f68:	20000004 	.word	0x20000004
 8006f6c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006f70:	4bca      	ldr	r3, [pc, #808]	; (800729c <HAL_RCC_OscConfig+0x688>)
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	2380      	movs	r3, #128	; 0x80
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	4013      	ands	r3, r2
 8006f7a:	d0df      	beq.n	8006f3c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f7c:	4bc7      	ldr	r3, [pc, #796]	; (800729c <HAL_RCC_OscConfig+0x688>)
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	4ac7      	ldr	r2, [pc, #796]	; (80072a0 <HAL_RCC_OscConfig+0x68c>)
 8006f82:	4013      	ands	r3, r2
 8006f84:	0019      	movs	r1, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f8a:	4bc4      	ldr	r3, [pc, #784]	; (800729c <HAL_RCC_OscConfig+0x688>)
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f90:	4bc2      	ldr	r3, [pc, #776]	; (800729c <HAL_RCC_OscConfig+0x688>)
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	021b      	lsls	r3, r3, #8
 8006f96:	0a19      	lsrs	r1, r3, #8
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a1b      	ldr	r3, [r3, #32]
 8006f9c:	061a      	lsls	r2, r3, #24
 8006f9e:	4bbf      	ldr	r3, [pc, #764]	; (800729c <HAL_RCC_OscConfig+0x688>)
 8006fa0:	430a      	orrs	r2, r1
 8006fa2:	605a      	str	r2, [r3, #4]
 8006fa4:	e019      	b.n	8006fda <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006fa6:	4bbd      	ldr	r3, [pc, #756]	; (800729c <HAL_RCC_OscConfig+0x688>)
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	4bbc      	ldr	r3, [pc, #752]	; (800729c <HAL_RCC_OscConfig+0x688>)
 8006fac:	49bd      	ldr	r1, [pc, #756]	; (80072a4 <HAL_RCC_OscConfig+0x690>)
 8006fae:	400a      	ands	r2, r1
 8006fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fb2:	f7fc fcad 	bl	8003910 <HAL_GetTick>
 8006fb6:	0003      	movs	r3, r0
 8006fb8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006fba:	e008      	b.n	8006fce <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006fbc:	f7fc fca8 	bl	8003910 <HAL_GetTick>
 8006fc0:	0002      	movs	r2, r0
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d901      	bls.n	8006fce <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e1eb      	b.n	80073a6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006fce:	4bb3      	ldr	r3, [pc, #716]	; (800729c <HAL_RCC_OscConfig+0x688>)
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	2380      	movs	r3, #128	; 0x80
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	d1f0      	bne.n	8006fbc <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2208      	movs	r2, #8
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	d036      	beq.n	8007052 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	695b      	ldr	r3, [r3, #20]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d019      	beq.n	8007020 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006fec:	4bab      	ldr	r3, [pc, #684]	; (800729c <HAL_RCC_OscConfig+0x688>)
 8006fee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ff0:	4baa      	ldr	r3, [pc, #680]	; (800729c <HAL_RCC_OscConfig+0x688>)
 8006ff2:	2101      	movs	r1, #1
 8006ff4:	430a      	orrs	r2, r1
 8006ff6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ff8:	f7fc fc8a 	bl	8003910 <HAL_GetTick>
 8006ffc:	0003      	movs	r3, r0
 8006ffe:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007000:	e008      	b.n	8007014 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007002:	f7fc fc85 	bl	8003910 <HAL_GetTick>
 8007006:	0002      	movs	r2, r0
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	2b02      	cmp	r3, #2
 800700e:	d901      	bls.n	8007014 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8007010:	2303      	movs	r3, #3
 8007012:	e1c8      	b.n	80073a6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007014:	4ba1      	ldr	r3, [pc, #644]	; (800729c <HAL_RCC_OscConfig+0x688>)
 8007016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007018:	2202      	movs	r2, #2
 800701a:	4013      	ands	r3, r2
 800701c:	d0f1      	beq.n	8007002 <HAL_RCC_OscConfig+0x3ee>
 800701e:	e018      	b.n	8007052 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007020:	4b9e      	ldr	r3, [pc, #632]	; (800729c <HAL_RCC_OscConfig+0x688>)
 8007022:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007024:	4b9d      	ldr	r3, [pc, #628]	; (800729c <HAL_RCC_OscConfig+0x688>)
 8007026:	2101      	movs	r1, #1
 8007028:	438a      	bics	r2, r1
 800702a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800702c:	f7fc fc70 	bl	8003910 <HAL_GetTick>
 8007030:	0003      	movs	r3, r0
 8007032:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007034:	e008      	b.n	8007048 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007036:	f7fc fc6b 	bl	8003910 <HAL_GetTick>
 800703a:	0002      	movs	r2, r0
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	1ad3      	subs	r3, r2, r3
 8007040:	2b02      	cmp	r3, #2
 8007042:	d901      	bls.n	8007048 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8007044:	2303      	movs	r3, #3
 8007046:	e1ae      	b.n	80073a6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007048:	4b94      	ldr	r3, [pc, #592]	; (800729c <HAL_RCC_OscConfig+0x688>)
 800704a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800704c:	2202      	movs	r2, #2
 800704e:	4013      	ands	r3, r2
 8007050:	d1f1      	bne.n	8007036 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2204      	movs	r2, #4
 8007058:	4013      	ands	r3, r2
 800705a:	d100      	bne.n	800705e <HAL_RCC_OscConfig+0x44a>
 800705c:	e0ae      	b.n	80071bc <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800705e:	2023      	movs	r0, #35	; 0x23
 8007060:	183b      	adds	r3, r7, r0
 8007062:	2200      	movs	r2, #0
 8007064:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007066:	4b8d      	ldr	r3, [pc, #564]	; (800729c <HAL_RCC_OscConfig+0x688>)
 8007068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800706a:	2380      	movs	r3, #128	; 0x80
 800706c:	055b      	lsls	r3, r3, #21
 800706e:	4013      	ands	r3, r2
 8007070:	d109      	bne.n	8007086 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007072:	4b8a      	ldr	r3, [pc, #552]	; (800729c <HAL_RCC_OscConfig+0x688>)
 8007074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007076:	4b89      	ldr	r3, [pc, #548]	; (800729c <HAL_RCC_OscConfig+0x688>)
 8007078:	2180      	movs	r1, #128	; 0x80
 800707a:	0549      	lsls	r1, r1, #21
 800707c:	430a      	orrs	r2, r1
 800707e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8007080:	183b      	adds	r3, r7, r0
 8007082:	2201      	movs	r2, #1
 8007084:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007086:	4b88      	ldr	r3, [pc, #544]	; (80072a8 <HAL_RCC_OscConfig+0x694>)
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	2380      	movs	r3, #128	; 0x80
 800708c:	005b      	lsls	r3, r3, #1
 800708e:	4013      	ands	r3, r2
 8007090:	d11a      	bne.n	80070c8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007092:	4b85      	ldr	r3, [pc, #532]	; (80072a8 <HAL_RCC_OscConfig+0x694>)
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	4b84      	ldr	r3, [pc, #528]	; (80072a8 <HAL_RCC_OscConfig+0x694>)
 8007098:	2180      	movs	r1, #128	; 0x80
 800709a:	0049      	lsls	r1, r1, #1
 800709c:	430a      	orrs	r2, r1
 800709e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070a0:	f7fc fc36 	bl	8003910 <HAL_GetTick>
 80070a4:	0003      	movs	r3, r0
 80070a6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070a8:	e008      	b.n	80070bc <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070aa:	f7fc fc31 	bl	8003910 <HAL_GetTick>
 80070ae:	0002      	movs	r2, r0
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	2b64      	cmp	r3, #100	; 0x64
 80070b6:	d901      	bls.n	80070bc <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80070b8:	2303      	movs	r3, #3
 80070ba:	e174      	b.n	80073a6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070bc:	4b7a      	ldr	r3, [pc, #488]	; (80072a8 <HAL_RCC_OscConfig+0x694>)
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	2380      	movs	r3, #128	; 0x80
 80070c2:	005b      	lsls	r3, r3, #1
 80070c4:	4013      	ands	r3, r2
 80070c6:	d0f0      	beq.n	80070aa <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	689a      	ldr	r2, [r3, #8]
 80070cc:	2380      	movs	r3, #128	; 0x80
 80070ce:	005b      	lsls	r3, r3, #1
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d107      	bne.n	80070e4 <HAL_RCC_OscConfig+0x4d0>
 80070d4:	4b71      	ldr	r3, [pc, #452]	; (800729c <HAL_RCC_OscConfig+0x688>)
 80070d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80070d8:	4b70      	ldr	r3, [pc, #448]	; (800729c <HAL_RCC_OscConfig+0x688>)
 80070da:	2180      	movs	r1, #128	; 0x80
 80070dc:	0049      	lsls	r1, r1, #1
 80070de:	430a      	orrs	r2, r1
 80070e0:	651a      	str	r2, [r3, #80]	; 0x50
 80070e2:	e031      	b.n	8007148 <HAL_RCC_OscConfig+0x534>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10c      	bne.n	8007106 <HAL_RCC_OscConfig+0x4f2>
 80070ec:	4b6b      	ldr	r3, [pc, #428]	; (800729c <HAL_RCC_OscConfig+0x688>)
 80070ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80070f0:	4b6a      	ldr	r3, [pc, #424]	; (800729c <HAL_RCC_OscConfig+0x688>)
 80070f2:	496c      	ldr	r1, [pc, #432]	; (80072a4 <HAL_RCC_OscConfig+0x690>)
 80070f4:	400a      	ands	r2, r1
 80070f6:	651a      	str	r2, [r3, #80]	; 0x50
 80070f8:	4b68      	ldr	r3, [pc, #416]	; (800729c <HAL_RCC_OscConfig+0x688>)
 80070fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80070fc:	4b67      	ldr	r3, [pc, #412]	; (800729c <HAL_RCC_OscConfig+0x688>)
 80070fe:	496b      	ldr	r1, [pc, #428]	; (80072ac <HAL_RCC_OscConfig+0x698>)
 8007100:	400a      	ands	r2, r1
 8007102:	651a      	str	r2, [r3, #80]	; 0x50
 8007104:	e020      	b.n	8007148 <HAL_RCC_OscConfig+0x534>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	689a      	ldr	r2, [r3, #8]
 800710a:	23a0      	movs	r3, #160	; 0xa0
 800710c:	00db      	lsls	r3, r3, #3
 800710e:	429a      	cmp	r2, r3
 8007110:	d10e      	bne.n	8007130 <HAL_RCC_OscConfig+0x51c>
 8007112:	4b62      	ldr	r3, [pc, #392]	; (800729c <HAL_RCC_OscConfig+0x688>)
 8007114:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007116:	4b61      	ldr	r3, [pc, #388]	; (800729c <HAL_RCC_OscConfig+0x688>)
 8007118:	2180      	movs	r1, #128	; 0x80
 800711a:	00c9      	lsls	r1, r1, #3
 800711c:	430a      	orrs	r2, r1
 800711e:	651a      	str	r2, [r3, #80]	; 0x50
 8007120:	4b5e      	ldr	r3, [pc, #376]	; (800729c <HAL_RCC_OscConfig+0x688>)
 8007122:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007124:	4b5d      	ldr	r3, [pc, #372]	; (800729c <HAL_RCC_OscConfig+0x688>)
 8007126:	2180      	movs	r1, #128	; 0x80
 8007128:	0049      	lsls	r1, r1, #1
 800712a:	430a      	orrs	r2, r1
 800712c:	651a      	str	r2, [r3, #80]	; 0x50
 800712e:	e00b      	b.n	8007148 <HAL_RCC_OscConfig+0x534>
 8007130:	4b5a      	ldr	r3, [pc, #360]	; (800729c <HAL_RCC_OscConfig+0x688>)
 8007132:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007134:	4b59      	ldr	r3, [pc, #356]	; (800729c <HAL_RCC_OscConfig+0x688>)
 8007136:	495b      	ldr	r1, [pc, #364]	; (80072a4 <HAL_RCC_OscConfig+0x690>)
 8007138:	400a      	ands	r2, r1
 800713a:	651a      	str	r2, [r3, #80]	; 0x50
 800713c:	4b57      	ldr	r3, [pc, #348]	; (800729c <HAL_RCC_OscConfig+0x688>)
 800713e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007140:	4b56      	ldr	r3, [pc, #344]	; (800729c <HAL_RCC_OscConfig+0x688>)
 8007142:	495a      	ldr	r1, [pc, #360]	; (80072ac <HAL_RCC_OscConfig+0x698>)
 8007144:	400a      	ands	r2, r1
 8007146:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d015      	beq.n	800717c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007150:	f7fc fbde 	bl	8003910 <HAL_GetTick>
 8007154:	0003      	movs	r3, r0
 8007156:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007158:	e009      	b.n	800716e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800715a:	f7fc fbd9 	bl	8003910 <HAL_GetTick>
 800715e:	0002      	movs	r2, r0
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	4a52      	ldr	r2, [pc, #328]	; (80072b0 <HAL_RCC_OscConfig+0x69c>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d901      	bls.n	800716e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e11b      	b.n	80073a6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800716e:	4b4b      	ldr	r3, [pc, #300]	; (800729c <HAL_RCC_OscConfig+0x688>)
 8007170:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007172:	2380      	movs	r3, #128	; 0x80
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4013      	ands	r3, r2
 8007178:	d0ef      	beq.n	800715a <HAL_RCC_OscConfig+0x546>
 800717a:	e014      	b.n	80071a6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800717c:	f7fc fbc8 	bl	8003910 <HAL_GetTick>
 8007180:	0003      	movs	r3, r0
 8007182:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007184:	e009      	b.n	800719a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007186:	f7fc fbc3 	bl	8003910 <HAL_GetTick>
 800718a:	0002      	movs	r2, r0
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	4a47      	ldr	r2, [pc, #284]	; (80072b0 <HAL_RCC_OscConfig+0x69c>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d901      	bls.n	800719a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8007196:	2303      	movs	r3, #3
 8007198:	e105      	b.n	80073a6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800719a:	4b40      	ldr	r3, [pc, #256]	; (800729c <HAL_RCC_OscConfig+0x688>)
 800719c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800719e:	2380      	movs	r3, #128	; 0x80
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4013      	ands	r3, r2
 80071a4:	d1ef      	bne.n	8007186 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80071a6:	2323      	movs	r3, #35	; 0x23
 80071a8:	18fb      	adds	r3, r7, r3
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d105      	bne.n	80071bc <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071b0:	4b3a      	ldr	r3, [pc, #232]	; (800729c <HAL_RCC_OscConfig+0x688>)
 80071b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071b4:	4b39      	ldr	r3, [pc, #228]	; (800729c <HAL_RCC_OscConfig+0x688>)
 80071b6:	493f      	ldr	r1, [pc, #252]	; (80072b4 <HAL_RCC_OscConfig+0x6a0>)
 80071b8:	400a      	ands	r2, r1
 80071ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2220      	movs	r2, #32
 80071c2:	4013      	ands	r3, r2
 80071c4:	d049      	beq.n	800725a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d026      	beq.n	800721c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80071ce:	4b33      	ldr	r3, [pc, #204]	; (800729c <HAL_RCC_OscConfig+0x688>)
 80071d0:	689a      	ldr	r2, [r3, #8]
 80071d2:	4b32      	ldr	r3, [pc, #200]	; (800729c <HAL_RCC_OscConfig+0x688>)
 80071d4:	2101      	movs	r1, #1
 80071d6:	430a      	orrs	r2, r1
 80071d8:	609a      	str	r2, [r3, #8]
 80071da:	4b30      	ldr	r3, [pc, #192]	; (800729c <HAL_RCC_OscConfig+0x688>)
 80071dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071de:	4b2f      	ldr	r3, [pc, #188]	; (800729c <HAL_RCC_OscConfig+0x688>)
 80071e0:	2101      	movs	r1, #1
 80071e2:	430a      	orrs	r2, r1
 80071e4:	635a      	str	r2, [r3, #52]	; 0x34
 80071e6:	4b34      	ldr	r3, [pc, #208]	; (80072b8 <HAL_RCC_OscConfig+0x6a4>)
 80071e8:	6a1a      	ldr	r2, [r3, #32]
 80071ea:	4b33      	ldr	r3, [pc, #204]	; (80072b8 <HAL_RCC_OscConfig+0x6a4>)
 80071ec:	2180      	movs	r1, #128	; 0x80
 80071ee:	0189      	lsls	r1, r1, #6
 80071f0:	430a      	orrs	r2, r1
 80071f2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071f4:	f7fc fb8c 	bl	8003910 <HAL_GetTick>
 80071f8:	0003      	movs	r3, r0
 80071fa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80071fc:	e008      	b.n	8007210 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80071fe:	f7fc fb87 	bl	8003910 <HAL_GetTick>
 8007202:	0002      	movs	r2, r0
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	2b02      	cmp	r3, #2
 800720a:	d901      	bls.n	8007210 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	e0ca      	b.n	80073a6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007210:	4b22      	ldr	r3, [pc, #136]	; (800729c <HAL_RCC_OscConfig+0x688>)
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	2202      	movs	r2, #2
 8007216:	4013      	ands	r3, r2
 8007218:	d0f1      	beq.n	80071fe <HAL_RCC_OscConfig+0x5ea>
 800721a:	e01e      	b.n	800725a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800721c:	4b1f      	ldr	r3, [pc, #124]	; (800729c <HAL_RCC_OscConfig+0x688>)
 800721e:	689a      	ldr	r2, [r3, #8]
 8007220:	4b1e      	ldr	r3, [pc, #120]	; (800729c <HAL_RCC_OscConfig+0x688>)
 8007222:	2101      	movs	r1, #1
 8007224:	438a      	bics	r2, r1
 8007226:	609a      	str	r2, [r3, #8]
 8007228:	4b23      	ldr	r3, [pc, #140]	; (80072b8 <HAL_RCC_OscConfig+0x6a4>)
 800722a:	6a1a      	ldr	r2, [r3, #32]
 800722c:	4b22      	ldr	r3, [pc, #136]	; (80072b8 <HAL_RCC_OscConfig+0x6a4>)
 800722e:	4923      	ldr	r1, [pc, #140]	; (80072bc <HAL_RCC_OscConfig+0x6a8>)
 8007230:	400a      	ands	r2, r1
 8007232:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007234:	f7fc fb6c 	bl	8003910 <HAL_GetTick>
 8007238:	0003      	movs	r3, r0
 800723a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800723c:	e008      	b.n	8007250 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800723e:	f7fc fb67 	bl	8003910 <HAL_GetTick>
 8007242:	0002      	movs	r2, r0
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	2b02      	cmp	r3, #2
 800724a:	d901      	bls.n	8007250 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800724c:	2303      	movs	r3, #3
 800724e:	e0aa      	b.n	80073a6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007250:	4b12      	ldr	r3, [pc, #72]	; (800729c <HAL_RCC_OscConfig+0x688>)
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	2202      	movs	r2, #2
 8007256:	4013      	ands	r3, r2
 8007258:	d1f1      	bne.n	800723e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725e:	2b00      	cmp	r3, #0
 8007260:	d100      	bne.n	8007264 <HAL_RCC_OscConfig+0x650>
 8007262:	e09f      	b.n	80073a4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	2b0c      	cmp	r3, #12
 8007268:	d100      	bne.n	800726c <HAL_RCC_OscConfig+0x658>
 800726a:	e078      	b.n	800735e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007270:	2b02      	cmp	r3, #2
 8007272:	d159      	bne.n	8007328 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007274:	4b09      	ldr	r3, [pc, #36]	; (800729c <HAL_RCC_OscConfig+0x688>)
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	4b08      	ldr	r3, [pc, #32]	; (800729c <HAL_RCC_OscConfig+0x688>)
 800727a:	4911      	ldr	r1, [pc, #68]	; (80072c0 <HAL_RCC_OscConfig+0x6ac>)
 800727c:	400a      	ands	r2, r1
 800727e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007280:	f7fc fb46 	bl	8003910 <HAL_GetTick>
 8007284:	0003      	movs	r3, r0
 8007286:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007288:	e01c      	b.n	80072c4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800728a:	f7fc fb41 	bl	8003910 <HAL_GetTick>
 800728e:	0002      	movs	r2, r0
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	2b02      	cmp	r3, #2
 8007296:	d915      	bls.n	80072c4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	e084      	b.n	80073a6 <HAL_RCC_OscConfig+0x792>
 800729c:	40021000 	.word	0x40021000
 80072a0:	ffff1fff 	.word	0xffff1fff
 80072a4:	fffffeff 	.word	0xfffffeff
 80072a8:	40007000 	.word	0x40007000
 80072ac:	fffffbff 	.word	0xfffffbff
 80072b0:	00001388 	.word	0x00001388
 80072b4:	efffffff 	.word	0xefffffff
 80072b8:	40010000 	.word	0x40010000
 80072bc:	ffffdfff 	.word	0xffffdfff
 80072c0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80072c4:	4b3a      	ldr	r3, [pc, #232]	; (80073b0 <HAL_RCC_OscConfig+0x79c>)
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	2380      	movs	r3, #128	; 0x80
 80072ca:	049b      	lsls	r3, r3, #18
 80072cc:	4013      	ands	r3, r2
 80072ce:	d1dc      	bne.n	800728a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072d0:	4b37      	ldr	r3, [pc, #220]	; (80073b0 <HAL_RCC_OscConfig+0x79c>)
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	4a37      	ldr	r2, [pc, #220]	; (80073b4 <HAL_RCC_OscConfig+0x7a0>)
 80072d6:	4013      	ands	r3, r2
 80072d8:	0019      	movs	r1, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e2:	431a      	orrs	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072e8:	431a      	orrs	r2, r3
 80072ea:	4b31      	ldr	r3, [pc, #196]	; (80073b0 <HAL_RCC_OscConfig+0x79c>)
 80072ec:	430a      	orrs	r2, r1
 80072ee:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072f0:	4b2f      	ldr	r3, [pc, #188]	; (80073b0 <HAL_RCC_OscConfig+0x79c>)
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	4b2e      	ldr	r3, [pc, #184]	; (80073b0 <HAL_RCC_OscConfig+0x79c>)
 80072f6:	2180      	movs	r1, #128	; 0x80
 80072f8:	0449      	lsls	r1, r1, #17
 80072fa:	430a      	orrs	r2, r1
 80072fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072fe:	f7fc fb07 	bl	8003910 <HAL_GetTick>
 8007302:	0003      	movs	r3, r0
 8007304:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8007306:	e008      	b.n	800731a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007308:	f7fc fb02 	bl	8003910 <HAL_GetTick>
 800730c:	0002      	movs	r2, r0
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	1ad3      	subs	r3, r2, r3
 8007312:	2b02      	cmp	r3, #2
 8007314:	d901      	bls.n	800731a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	e045      	b.n	80073a6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800731a:	4b25      	ldr	r3, [pc, #148]	; (80073b0 <HAL_RCC_OscConfig+0x79c>)
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	2380      	movs	r3, #128	; 0x80
 8007320:	049b      	lsls	r3, r3, #18
 8007322:	4013      	ands	r3, r2
 8007324:	d0f0      	beq.n	8007308 <HAL_RCC_OscConfig+0x6f4>
 8007326:	e03d      	b.n	80073a4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007328:	4b21      	ldr	r3, [pc, #132]	; (80073b0 <HAL_RCC_OscConfig+0x79c>)
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	4b20      	ldr	r3, [pc, #128]	; (80073b0 <HAL_RCC_OscConfig+0x79c>)
 800732e:	4922      	ldr	r1, [pc, #136]	; (80073b8 <HAL_RCC_OscConfig+0x7a4>)
 8007330:	400a      	ands	r2, r1
 8007332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007334:	f7fc faec 	bl	8003910 <HAL_GetTick>
 8007338:	0003      	movs	r3, r0
 800733a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800733c:	e008      	b.n	8007350 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800733e:	f7fc fae7 	bl	8003910 <HAL_GetTick>
 8007342:	0002      	movs	r2, r0
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	2b02      	cmp	r3, #2
 800734a:	d901      	bls.n	8007350 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800734c:	2303      	movs	r3, #3
 800734e:	e02a      	b.n	80073a6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007350:	4b17      	ldr	r3, [pc, #92]	; (80073b0 <HAL_RCC_OscConfig+0x79c>)
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	2380      	movs	r3, #128	; 0x80
 8007356:	049b      	lsls	r3, r3, #18
 8007358:	4013      	ands	r3, r2
 800735a:	d1f0      	bne.n	800733e <HAL_RCC_OscConfig+0x72a>
 800735c:	e022      	b.n	80073a4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007362:	2b01      	cmp	r3, #1
 8007364:	d101      	bne.n	800736a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e01d      	b.n	80073a6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800736a:	4b11      	ldr	r3, [pc, #68]	; (80073b0 <HAL_RCC_OscConfig+0x79c>)
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007370:	69ba      	ldr	r2, [r7, #24]
 8007372:	2380      	movs	r3, #128	; 0x80
 8007374:	025b      	lsls	r3, r3, #9
 8007376:	401a      	ands	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737c:	429a      	cmp	r2, r3
 800737e:	d10f      	bne.n	80073a0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007380:	69ba      	ldr	r2, [r7, #24]
 8007382:	23f0      	movs	r3, #240	; 0xf0
 8007384:	039b      	lsls	r3, r3, #14
 8007386:	401a      	ands	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800738c:	429a      	cmp	r2, r3
 800738e:	d107      	bne.n	80073a0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8007390:	69ba      	ldr	r2, [r7, #24]
 8007392:	23c0      	movs	r3, #192	; 0xc0
 8007394:	041b      	lsls	r3, r3, #16
 8007396:	401a      	ands	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800739c:	429a      	cmp	r2, r3
 800739e:	d001      	beq.n	80073a4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	e000      	b.n	80073a6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	0018      	movs	r0, r3
 80073a8:	46bd      	mov	sp, r7
 80073aa:	b00a      	add	sp, #40	; 0x28
 80073ac:	bdb0      	pop	{r4, r5, r7, pc}
 80073ae:	46c0      	nop			; (mov r8, r8)
 80073b0:	40021000 	.word	0x40021000
 80073b4:	ff02ffff 	.word	0xff02ffff
 80073b8:	feffffff 	.word	0xfeffffff

080073bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073bc:	b5b0      	push	{r4, r5, r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d101      	bne.n	80073d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e128      	b.n	8007622 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80073d0:	4b96      	ldr	r3, [pc, #600]	; (800762c <HAL_RCC_ClockConfig+0x270>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2201      	movs	r2, #1
 80073d6:	4013      	ands	r3, r2
 80073d8:	683a      	ldr	r2, [r7, #0]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d91e      	bls.n	800741c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073de:	4b93      	ldr	r3, [pc, #588]	; (800762c <HAL_RCC_ClockConfig+0x270>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2201      	movs	r2, #1
 80073e4:	4393      	bics	r3, r2
 80073e6:	0019      	movs	r1, r3
 80073e8:	4b90      	ldr	r3, [pc, #576]	; (800762c <HAL_RCC_ClockConfig+0x270>)
 80073ea:	683a      	ldr	r2, [r7, #0]
 80073ec:	430a      	orrs	r2, r1
 80073ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80073f0:	f7fc fa8e 	bl	8003910 <HAL_GetTick>
 80073f4:	0003      	movs	r3, r0
 80073f6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073f8:	e009      	b.n	800740e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073fa:	f7fc fa89 	bl	8003910 <HAL_GetTick>
 80073fe:	0002      	movs	r2, r0
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	4a8a      	ldr	r2, [pc, #552]	; (8007630 <HAL_RCC_ClockConfig+0x274>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d901      	bls.n	800740e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	e109      	b.n	8007622 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800740e:	4b87      	ldr	r3, [pc, #540]	; (800762c <HAL_RCC_ClockConfig+0x270>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2201      	movs	r2, #1
 8007414:	4013      	ands	r3, r2
 8007416:	683a      	ldr	r2, [r7, #0]
 8007418:	429a      	cmp	r2, r3
 800741a:	d1ee      	bne.n	80073fa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2202      	movs	r2, #2
 8007422:	4013      	ands	r3, r2
 8007424:	d009      	beq.n	800743a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007426:	4b83      	ldr	r3, [pc, #524]	; (8007634 <HAL_RCC_ClockConfig+0x278>)
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	22f0      	movs	r2, #240	; 0xf0
 800742c:	4393      	bics	r3, r2
 800742e:	0019      	movs	r1, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	689a      	ldr	r2, [r3, #8]
 8007434:	4b7f      	ldr	r3, [pc, #508]	; (8007634 <HAL_RCC_ClockConfig+0x278>)
 8007436:	430a      	orrs	r2, r1
 8007438:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2201      	movs	r2, #1
 8007440:	4013      	ands	r3, r2
 8007442:	d100      	bne.n	8007446 <HAL_RCC_ClockConfig+0x8a>
 8007444:	e089      	b.n	800755a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	2b02      	cmp	r3, #2
 800744c:	d107      	bne.n	800745e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800744e:	4b79      	ldr	r3, [pc, #484]	; (8007634 <HAL_RCC_ClockConfig+0x278>)
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	2380      	movs	r3, #128	; 0x80
 8007454:	029b      	lsls	r3, r3, #10
 8007456:	4013      	ands	r3, r2
 8007458:	d120      	bne.n	800749c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e0e1      	b.n	8007622 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	2b03      	cmp	r3, #3
 8007464:	d107      	bne.n	8007476 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007466:	4b73      	ldr	r3, [pc, #460]	; (8007634 <HAL_RCC_ClockConfig+0x278>)
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	2380      	movs	r3, #128	; 0x80
 800746c:	049b      	lsls	r3, r3, #18
 800746e:	4013      	ands	r3, r2
 8007470:	d114      	bne.n	800749c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e0d5      	b.n	8007622 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d106      	bne.n	800748c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800747e:	4b6d      	ldr	r3, [pc, #436]	; (8007634 <HAL_RCC_ClockConfig+0x278>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2204      	movs	r2, #4
 8007484:	4013      	ands	r3, r2
 8007486:	d109      	bne.n	800749c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e0ca      	b.n	8007622 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800748c:	4b69      	ldr	r3, [pc, #420]	; (8007634 <HAL_RCC_ClockConfig+0x278>)
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	2380      	movs	r3, #128	; 0x80
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4013      	ands	r3, r2
 8007496:	d101      	bne.n	800749c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e0c2      	b.n	8007622 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800749c:	4b65      	ldr	r3, [pc, #404]	; (8007634 <HAL_RCC_ClockConfig+0x278>)
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	2203      	movs	r2, #3
 80074a2:	4393      	bics	r3, r2
 80074a4:	0019      	movs	r1, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	685a      	ldr	r2, [r3, #4]
 80074aa:	4b62      	ldr	r3, [pc, #392]	; (8007634 <HAL_RCC_ClockConfig+0x278>)
 80074ac:	430a      	orrs	r2, r1
 80074ae:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80074b0:	f7fc fa2e 	bl	8003910 <HAL_GetTick>
 80074b4:	0003      	movs	r3, r0
 80074b6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	2b02      	cmp	r3, #2
 80074be:	d111      	bne.n	80074e4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80074c0:	e009      	b.n	80074d6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074c2:	f7fc fa25 	bl	8003910 <HAL_GetTick>
 80074c6:	0002      	movs	r2, r0
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	4a58      	ldr	r2, [pc, #352]	; (8007630 <HAL_RCC_ClockConfig+0x274>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d901      	bls.n	80074d6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e0a5      	b.n	8007622 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80074d6:	4b57      	ldr	r3, [pc, #348]	; (8007634 <HAL_RCC_ClockConfig+0x278>)
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	220c      	movs	r2, #12
 80074dc:	4013      	ands	r3, r2
 80074de:	2b08      	cmp	r3, #8
 80074e0:	d1ef      	bne.n	80074c2 <HAL_RCC_ClockConfig+0x106>
 80074e2:	e03a      	b.n	800755a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	2b03      	cmp	r3, #3
 80074ea:	d111      	bne.n	8007510 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80074ec:	e009      	b.n	8007502 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074ee:	f7fc fa0f 	bl	8003910 <HAL_GetTick>
 80074f2:	0002      	movs	r2, r0
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	4a4d      	ldr	r2, [pc, #308]	; (8007630 <HAL_RCC_ClockConfig+0x274>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d901      	bls.n	8007502 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e08f      	b.n	8007622 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007502:	4b4c      	ldr	r3, [pc, #304]	; (8007634 <HAL_RCC_ClockConfig+0x278>)
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	220c      	movs	r2, #12
 8007508:	4013      	ands	r3, r2
 800750a:	2b0c      	cmp	r3, #12
 800750c:	d1ef      	bne.n	80074ee <HAL_RCC_ClockConfig+0x132>
 800750e:	e024      	b.n	800755a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	2b01      	cmp	r3, #1
 8007516:	d11b      	bne.n	8007550 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007518:	e009      	b.n	800752e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800751a:	f7fc f9f9 	bl	8003910 <HAL_GetTick>
 800751e:	0002      	movs	r2, r0
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	4a42      	ldr	r2, [pc, #264]	; (8007630 <HAL_RCC_ClockConfig+0x274>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d901      	bls.n	800752e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	e079      	b.n	8007622 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800752e:	4b41      	ldr	r3, [pc, #260]	; (8007634 <HAL_RCC_ClockConfig+0x278>)
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	220c      	movs	r2, #12
 8007534:	4013      	ands	r3, r2
 8007536:	2b04      	cmp	r3, #4
 8007538:	d1ef      	bne.n	800751a <HAL_RCC_ClockConfig+0x15e>
 800753a:	e00e      	b.n	800755a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800753c:	f7fc f9e8 	bl	8003910 <HAL_GetTick>
 8007540:	0002      	movs	r2, r0
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	1ad3      	subs	r3, r2, r3
 8007546:	4a3a      	ldr	r2, [pc, #232]	; (8007630 <HAL_RCC_ClockConfig+0x274>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d901      	bls.n	8007550 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e068      	b.n	8007622 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007550:	4b38      	ldr	r3, [pc, #224]	; (8007634 <HAL_RCC_ClockConfig+0x278>)
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	220c      	movs	r2, #12
 8007556:	4013      	ands	r3, r2
 8007558:	d1f0      	bne.n	800753c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800755a:	4b34      	ldr	r3, [pc, #208]	; (800762c <HAL_RCC_ClockConfig+0x270>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2201      	movs	r2, #1
 8007560:	4013      	ands	r3, r2
 8007562:	683a      	ldr	r2, [r7, #0]
 8007564:	429a      	cmp	r2, r3
 8007566:	d21e      	bcs.n	80075a6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007568:	4b30      	ldr	r3, [pc, #192]	; (800762c <HAL_RCC_ClockConfig+0x270>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2201      	movs	r2, #1
 800756e:	4393      	bics	r3, r2
 8007570:	0019      	movs	r1, r3
 8007572:	4b2e      	ldr	r3, [pc, #184]	; (800762c <HAL_RCC_ClockConfig+0x270>)
 8007574:	683a      	ldr	r2, [r7, #0]
 8007576:	430a      	orrs	r2, r1
 8007578:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800757a:	f7fc f9c9 	bl	8003910 <HAL_GetTick>
 800757e:	0003      	movs	r3, r0
 8007580:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007582:	e009      	b.n	8007598 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007584:	f7fc f9c4 	bl	8003910 <HAL_GetTick>
 8007588:	0002      	movs	r2, r0
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	4a28      	ldr	r2, [pc, #160]	; (8007630 <HAL_RCC_ClockConfig+0x274>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d901      	bls.n	8007598 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	e044      	b.n	8007622 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007598:	4b24      	ldr	r3, [pc, #144]	; (800762c <HAL_RCC_ClockConfig+0x270>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2201      	movs	r2, #1
 800759e:	4013      	ands	r3, r2
 80075a0:	683a      	ldr	r2, [r7, #0]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d1ee      	bne.n	8007584 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2204      	movs	r2, #4
 80075ac:	4013      	ands	r3, r2
 80075ae:	d009      	beq.n	80075c4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075b0:	4b20      	ldr	r3, [pc, #128]	; (8007634 <HAL_RCC_ClockConfig+0x278>)
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	4a20      	ldr	r2, [pc, #128]	; (8007638 <HAL_RCC_ClockConfig+0x27c>)
 80075b6:	4013      	ands	r3, r2
 80075b8:	0019      	movs	r1, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	68da      	ldr	r2, [r3, #12]
 80075be:	4b1d      	ldr	r3, [pc, #116]	; (8007634 <HAL_RCC_ClockConfig+0x278>)
 80075c0:	430a      	orrs	r2, r1
 80075c2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2208      	movs	r2, #8
 80075ca:	4013      	ands	r3, r2
 80075cc:	d00a      	beq.n	80075e4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80075ce:	4b19      	ldr	r3, [pc, #100]	; (8007634 <HAL_RCC_ClockConfig+0x278>)
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	4a1a      	ldr	r2, [pc, #104]	; (800763c <HAL_RCC_ClockConfig+0x280>)
 80075d4:	4013      	ands	r3, r2
 80075d6:	0019      	movs	r1, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	00da      	lsls	r2, r3, #3
 80075de:	4b15      	ldr	r3, [pc, #84]	; (8007634 <HAL_RCC_ClockConfig+0x278>)
 80075e0:	430a      	orrs	r2, r1
 80075e2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80075e4:	f000 f832 	bl	800764c <HAL_RCC_GetSysClockFreq>
 80075e8:	0001      	movs	r1, r0
 80075ea:	4b12      	ldr	r3, [pc, #72]	; (8007634 <HAL_RCC_ClockConfig+0x278>)
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	091b      	lsrs	r3, r3, #4
 80075f0:	220f      	movs	r2, #15
 80075f2:	4013      	ands	r3, r2
 80075f4:	4a12      	ldr	r2, [pc, #72]	; (8007640 <HAL_RCC_ClockConfig+0x284>)
 80075f6:	5cd3      	ldrb	r3, [r2, r3]
 80075f8:	000a      	movs	r2, r1
 80075fa:	40da      	lsrs	r2, r3
 80075fc:	4b11      	ldr	r3, [pc, #68]	; (8007644 <HAL_RCC_ClockConfig+0x288>)
 80075fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007600:	4b11      	ldr	r3, [pc, #68]	; (8007648 <HAL_RCC_ClockConfig+0x28c>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	250b      	movs	r5, #11
 8007606:	197c      	adds	r4, r7, r5
 8007608:	0018      	movs	r0, r3
 800760a:	f7fc f93b 	bl	8003884 <HAL_InitTick>
 800760e:	0003      	movs	r3, r0
 8007610:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8007612:	197b      	adds	r3, r7, r5
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d002      	beq.n	8007620 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800761a:	197b      	adds	r3, r7, r5
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	e000      	b.n	8007622 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	0018      	movs	r0, r3
 8007624:	46bd      	mov	sp, r7
 8007626:	b004      	add	sp, #16
 8007628:	bdb0      	pop	{r4, r5, r7, pc}
 800762a:	46c0      	nop			; (mov r8, r8)
 800762c:	40022000 	.word	0x40022000
 8007630:	00001388 	.word	0x00001388
 8007634:	40021000 	.word	0x40021000
 8007638:	fffff8ff 	.word	0xfffff8ff
 800763c:	ffffc7ff 	.word	0xffffc7ff
 8007640:	0800a68c 	.word	0x0800a68c
 8007644:	20000000 	.word	0x20000000
 8007648:	20000004 	.word	0x20000004

0800764c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800764c:	b5b0      	push	{r4, r5, r7, lr}
 800764e:	b08e      	sub	sp, #56	; 0x38
 8007650:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8007652:	4b4c      	ldr	r3, [pc, #304]	; (8007784 <HAL_RCC_GetSysClockFreq+0x138>)
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800765a:	230c      	movs	r3, #12
 800765c:	4013      	ands	r3, r2
 800765e:	2b0c      	cmp	r3, #12
 8007660:	d014      	beq.n	800768c <HAL_RCC_GetSysClockFreq+0x40>
 8007662:	d900      	bls.n	8007666 <HAL_RCC_GetSysClockFreq+0x1a>
 8007664:	e07b      	b.n	800775e <HAL_RCC_GetSysClockFreq+0x112>
 8007666:	2b04      	cmp	r3, #4
 8007668:	d002      	beq.n	8007670 <HAL_RCC_GetSysClockFreq+0x24>
 800766a:	2b08      	cmp	r3, #8
 800766c:	d00b      	beq.n	8007686 <HAL_RCC_GetSysClockFreq+0x3a>
 800766e:	e076      	b.n	800775e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8007670:	4b44      	ldr	r3, [pc, #272]	; (8007784 <HAL_RCC_GetSysClockFreq+0x138>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2210      	movs	r2, #16
 8007676:	4013      	ands	r3, r2
 8007678:	d002      	beq.n	8007680 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800767a:	4b43      	ldr	r3, [pc, #268]	; (8007788 <HAL_RCC_GetSysClockFreq+0x13c>)
 800767c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800767e:	e07c      	b.n	800777a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8007680:	4b42      	ldr	r3, [pc, #264]	; (800778c <HAL_RCC_GetSysClockFreq+0x140>)
 8007682:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007684:	e079      	b.n	800777a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007686:	4b42      	ldr	r3, [pc, #264]	; (8007790 <HAL_RCC_GetSysClockFreq+0x144>)
 8007688:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800768a:	e076      	b.n	800777a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800768c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800768e:	0c9a      	lsrs	r2, r3, #18
 8007690:	230f      	movs	r3, #15
 8007692:	401a      	ands	r2, r3
 8007694:	4b3f      	ldr	r3, [pc, #252]	; (8007794 <HAL_RCC_GetSysClockFreq+0x148>)
 8007696:	5c9b      	ldrb	r3, [r3, r2]
 8007698:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800769a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800769c:	0d9a      	lsrs	r2, r3, #22
 800769e:	2303      	movs	r3, #3
 80076a0:	4013      	ands	r3, r2
 80076a2:	3301      	adds	r3, #1
 80076a4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80076a6:	4b37      	ldr	r3, [pc, #220]	; (8007784 <HAL_RCC_GetSysClockFreq+0x138>)
 80076a8:	68da      	ldr	r2, [r3, #12]
 80076aa:	2380      	movs	r3, #128	; 0x80
 80076ac:	025b      	lsls	r3, r3, #9
 80076ae:	4013      	ands	r3, r2
 80076b0:	d01a      	beq.n	80076e8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80076b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b4:	61bb      	str	r3, [r7, #24]
 80076b6:	2300      	movs	r3, #0
 80076b8:	61fb      	str	r3, [r7, #28]
 80076ba:	4a35      	ldr	r2, [pc, #212]	; (8007790 <HAL_RCC_GetSysClockFreq+0x144>)
 80076bc:	2300      	movs	r3, #0
 80076be:	69b8      	ldr	r0, [r7, #24]
 80076c0:	69f9      	ldr	r1, [r7, #28]
 80076c2:	f7f8 feb7 	bl	8000434 <__aeabi_lmul>
 80076c6:	0002      	movs	r2, r0
 80076c8:	000b      	movs	r3, r1
 80076ca:	0010      	movs	r0, r2
 80076cc:	0019      	movs	r1, r3
 80076ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d0:	613b      	str	r3, [r7, #16]
 80076d2:	2300      	movs	r3, #0
 80076d4:	617b      	str	r3, [r7, #20]
 80076d6:	693a      	ldr	r2, [r7, #16]
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	f7f8 fe8b 	bl	80003f4 <__aeabi_uldivmod>
 80076de:	0002      	movs	r2, r0
 80076e0:	000b      	movs	r3, r1
 80076e2:	0013      	movs	r3, r2
 80076e4:	637b      	str	r3, [r7, #52]	; 0x34
 80076e6:	e037      	b.n	8007758 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80076e8:	4b26      	ldr	r3, [pc, #152]	; (8007784 <HAL_RCC_GetSysClockFreq+0x138>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2210      	movs	r2, #16
 80076ee:	4013      	ands	r3, r2
 80076f0:	d01a      	beq.n	8007728 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80076f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f4:	60bb      	str	r3, [r7, #8]
 80076f6:	2300      	movs	r3, #0
 80076f8:	60fb      	str	r3, [r7, #12]
 80076fa:	4a23      	ldr	r2, [pc, #140]	; (8007788 <HAL_RCC_GetSysClockFreq+0x13c>)
 80076fc:	2300      	movs	r3, #0
 80076fe:	68b8      	ldr	r0, [r7, #8]
 8007700:	68f9      	ldr	r1, [r7, #12]
 8007702:	f7f8 fe97 	bl	8000434 <__aeabi_lmul>
 8007706:	0002      	movs	r2, r0
 8007708:	000b      	movs	r3, r1
 800770a:	0010      	movs	r0, r2
 800770c:	0019      	movs	r1, r3
 800770e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007710:	603b      	str	r3, [r7, #0]
 8007712:	2300      	movs	r3, #0
 8007714:	607b      	str	r3, [r7, #4]
 8007716:	683a      	ldr	r2, [r7, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f7f8 fe6b 	bl	80003f4 <__aeabi_uldivmod>
 800771e:	0002      	movs	r2, r0
 8007720:	000b      	movs	r3, r1
 8007722:	0013      	movs	r3, r2
 8007724:	637b      	str	r3, [r7, #52]	; 0x34
 8007726:	e017      	b.n	8007758 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772a:	0018      	movs	r0, r3
 800772c:	2300      	movs	r3, #0
 800772e:	0019      	movs	r1, r3
 8007730:	4a16      	ldr	r2, [pc, #88]	; (800778c <HAL_RCC_GetSysClockFreq+0x140>)
 8007732:	2300      	movs	r3, #0
 8007734:	f7f8 fe7e 	bl	8000434 <__aeabi_lmul>
 8007738:	0002      	movs	r2, r0
 800773a:	000b      	movs	r3, r1
 800773c:	0010      	movs	r0, r2
 800773e:	0019      	movs	r1, r3
 8007740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007742:	001c      	movs	r4, r3
 8007744:	2300      	movs	r3, #0
 8007746:	001d      	movs	r5, r3
 8007748:	0022      	movs	r2, r4
 800774a:	002b      	movs	r3, r5
 800774c:	f7f8 fe52 	bl	80003f4 <__aeabi_uldivmod>
 8007750:	0002      	movs	r2, r0
 8007752:	000b      	movs	r3, r1
 8007754:	0013      	movs	r3, r2
 8007756:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8007758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800775a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800775c:	e00d      	b.n	800777a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800775e:	4b09      	ldr	r3, [pc, #36]	; (8007784 <HAL_RCC_GetSysClockFreq+0x138>)
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	0b5b      	lsrs	r3, r3, #13
 8007764:	2207      	movs	r2, #7
 8007766:	4013      	ands	r3, r2
 8007768:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800776a:	6a3b      	ldr	r3, [r7, #32]
 800776c:	3301      	adds	r3, #1
 800776e:	2280      	movs	r2, #128	; 0x80
 8007770:	0212      	lsls	r2, r2, #8
 8007772:	409a      	lsls	r2, r3
 8007774:	0013      	movs	r3, r2
 8007776:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007778:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800777a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800777c:	0018      	movs	r0, r3
 800777e:	46bd      	mov	sp, r7
 8007780:	b00e      	add	sp, #56	; 0x38
 8007782:	bdb0      	pop	{r4, r5, r7, pc}
 8007784:	40021000 	.word	0x40021000
 8007788:	003d0900 	.word	0x003d0900
 800778c:	00f42400 	.word	0x00f42400
 8007790:	007a1200 	.word	0x007a1200
 8007794:	0800a6a4 	.word	0x0800a6a4

08007798 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800779c:	4b02      	ldr	r3, [pc, #8]	; (80077a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800779e:	681b      	ldr	r3, [r3, #0]
}
 80077a0:	0018      	movs	r0, r3
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	46c0      	nop			; (mov r8, r8)
 80077a8:	20000000 	.word	0x20000000

080077ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80077b0:	f7ff fff2 	bl	8007798 <HAL_RCC_GetHCLKFreq>
 80077b4:	0001      	movs	r1, r0
 80077b6:	4b06      	ldr	r3, [pc, #24]	; (80077d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	0a1b      	lsrs	r3, r3, #8
 80077bc:	2207      	movs	r2, #7
 80077be:	4013      	ands	r3, r2
 80077c0:	4a04      	ldr	r2, [pc, #16]	; (80077d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80077c2:	5cd3      	ldrb	r3, [r2, r3]
 80077c4:	40d9      	lsrs	r1, r3
 80077c6:	000b      	movs	r3, r1
}
 80077c8:	0018      	movs	r0, r3
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	46c0      	nop			; (mov r8, r8)
 80077d0:	40021000 	.word	0x40021000
 80077d4:	0800a69c 	.word	0x0800a69c

080077d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80077dc:	f7ff ffdc 	bl	8007798 <HAL_RCC_GetHCLKFreq>
 80077e0:	0001      	movs	r1, r0
 80077e2:	4b06      	ldr	r3, [pc, #24]	; (80077fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	0adb      	lsrs	r3, r3, #11
 80077e8:	2207      	movs	r2, #7
 80077ea:	4013      	ands	r3, r2
 80077ec:	4a04      	ldr	r2, [pc, #16]	; (8007800 <HAL_RCC_GetPCLK2Freq+0x28>)
 80077ee:	5cd3      	ldrb	r3, [r2, r3]
 80077f0:	40d9      	lsrs	r1, r3
 80077f2:	000b      	movs	r3, r1
}
 80077f4:	0018      	movs	r0, r3
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	46c0      	nop			; (mov r8, r8)
 80077fc:	40021000 	.word	0x40021000
 8007800:	0800a69c 	.word	0x0800a69c

08007804 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b086      	sub	sp, #24
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800780c:	2317      	movs	r3, #23
 800780e:	18fb      	adds	r3, r7, r3
 8007810:	2200      	movs	r2, #0
 8007812:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2220      	movs	r2, #32
 800781a:	4013      	ands	r3, r2
 800781c:	d106      	bne.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	2380      	movs	r3, #128	; 0x80
 8007824:	011b      	lsls	r3, r3, #4
 8007826:	4013      	ands	r3, r2
 8007828:	d100      	bne.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x28>
 800782a:	e104      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800782c:	4bb9      	ldr	r3, [pc, #740]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800782e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007830:	2380      	movs	r3, #128	; 0x80
 8007832:	055b      	lsls	r3, r3, #21
 8007834:	4013      	ands	r3, r2
 8007836:	d10a      	bne.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007838:	4bb6      	ldr	r3, [pc, #728]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800783a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800783c:	4bb5      	ldr	r3, [pc, #724]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800783e:	2180      	movs	r1, #128	; 0x80
 8007840:	0549      	lsls	r1, r1, #21
 8007842:	430a      	orrs	r2, r1
 8007844:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8007846:	2317      	movs	r3, #23
 8007848:	18fb      	adds	r3, r7, r3
 800784a:	2201      	movs	r2, #1
 800784c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800784e:	4bb2      	ldr	r3, [pc, #712]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	2380      	movs	r3, #128	; 0x80
 8007854:	005b      	lsls	r3, r3, #1
 8007856:	4013      	ands	r3, r2
 8007858:	d11a      	bne.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800785a:	4baf      	ldr	r3, [pc, #700]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	4bae      	ldr	r3, [pc, #696]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8007860:	2180      	movs	r1, #128	; 0x80
 8007862:	0049      	lsls	r1, r1, #1
 8007864:	430a      	orrs	r2, r1
 8007866:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007868:	f7fc f852 	bl	8003910 <HAL_GetTick>
 800786c:	0003      	movs	r3, r0
 800786e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007870:	e008      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007872:	f7fc f84d 	bl	8003910 <HAL_GetTick>
 8007876:	0002      	movs	r2, r0
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	2b64      	cmp	r3, #100	; 0x64
 800787e:	d901      	bls.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007880:	2303      	movs	r3, #3
 8007882:	e143      	b.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007884:	4ba4      	ldr	r3, [pc, #656]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	2380      	movs	r3, #128	; 0x80
 800788a:	005b      	lsls	r3, r3, #1
 800788c:	4013      	ands	r3, r2
 800788e:	d0f0      	beq.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8007890:	4ba0      	ldr	r3, [pc, #640]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	23c0      	movs	r3, #192	; 0xc0
 8007896:	039b      	lsls	r3, r3, #14
 8007898:	4013      	ands	r3, r2
 800789a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	685a      	ldr	r2, [r3, #4]
 80078a0:	23c0      	movs	r3, #192	; 0xc0
 80078a2:	039b      	lsls	r3, r3, #14
 80078a4:	4013      	ands	r3, r2
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d107      	bne.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	689a      	ldr	r2, [r3, #8]
 80078b0:	23c0      	movs	r3, #192	; 0xc0
 80078b2:	039b      	lsls	r3, r3, #14
 80078b4:	4013      	ands	r3, r2
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d013      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	685a      	ldr	r2, [r3, #4]
 80078c0:	23c0      	movs	r3, #192	; 0xc0
 80078c2:	029b      	lsls	r3, r3, #10
 80078c4:	401a      	ands	r2, r3
 80078c6:	23c0      	movs	r3, #192	; 0xc0
 80078c8:	029b      	lsls	r3, r3, #10
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d10a      	bne.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80078ce:	4b91      	ldr	r3, [pc, #580]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	2380      	movs	r3, #128	; 0x80
 80078d4:	029b      	lsls	r3, r3, #10
 80078d6:	401a      	ands	r2, r3
 80078d8:	2380      	movs	r3, #128	; 0x80
 80078da:	029b      	lsls	r3, r3, #10
 80078dc:	429a      	cmp	r2, r3
 80078de:	d101      	bne.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	e113      	b.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80078e4:	4b8b      	ldr	r3, [pc, #556]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80078e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80078e8:	23c0      	movs	r3, #192	; 0xc0
 80078ea:	029b      	lsls	r3, r3, #10
 80078ec:	4013      	ands	r3, r2
 80078ee:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d049      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	685a      	ldr	r2, [r3, #4]
 80078fa:	23c0      	movs	r3, #192	; 0xc0
 80078fc:	029b      	lsls	r3, r3, #10
 80078fe:	4013      	ands	r3, r2
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	429a      	cmp	r2, r3
 8007904:	d004      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2220      	movs	r2, #32
 800790c:	4013      	ands	r3, r2
 800790e:	d10d      	bne.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	689a      	ldr	r2, [r3, #8]
 8007914:	23c0      	movs	r3, #192	; 0xc0
 8007916:	029b      	lsls	r3, r3, #10
 8007918:	4013      	ands	r3, r2
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	429a      	cmp	r2, r3
 800791e:	d034      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	2380      	movs	r3, #128	; 0x80
 8007926:	011b      	lsls	r3, r3, #4
 8007928:	4013      	ands	r3, r2
 800792a:	d02e      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800792c:	4b79      	ldr	r3, [pc, #484]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800792e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007930:	4a7a      	ldr	r2, [pc, #488]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8007932:	4013      	ands	r3, r2
 8007934:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007936:	4b77      	ldr	r3, [pc, #476]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007938:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800793a:	4b76      	ldr	r3, [pc, #472]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800793c:	2180      	movs	r1, #128	; 0x80
 800793e:	0309      	lsls	r1, r1, #12
 8007940:	430a      	orrs	r2, r1
 8007942:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007944:	4b73      	ldr	r3, [pc, #460]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007946:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007948:	4b72      	ldr	r3, [pc, #456]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800794a:	4975      	ldr	r1, [pc, #468]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800794c:	400a      	ands	r2, r1
 800794e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8007950:	4b70      	ldr	r3, [pc, #448]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	2380      	movs	r3, #128	; 0x80
 800795a:	005b      	lsls	r3, r3, #1
 800795c:	4013      	ands	r3, r2
 800795e:	d014      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007960:	f7fb ffd6 	bl	8003910 <HAL_GetTick>
 8007964:	0003      	movs	r3, r0
 8007966:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007968:	e009      	b.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800796a:	f7fb ffd1 	bl	8003910 <HAL_GetTick>
 800796e:	0002      	movs	r2, r0
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	1ad3      	subs	r3, r2, r3
 8007974:	4a6b      	ldr	r2, [pc, #428]	; (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d901      	bls.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800797a:	2303      	movs	r3, #3
 800797c:	e0c6      	b.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800797e:	4b65      	ldr	r3, [pc, #404]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007980:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007982:	2380      	movs	r3, #128	; 0x80
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	4013      	ands	r3, r2
 8007988:	d0ef      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	2380      	movs	r3, #128	; 0x80
 8007990:	011b      	lsls	r3, r3, #4
 8007992:	4013      	ands	r3, r2
 8007994:	d01f      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	689a      	ldr	r2, [r3, #8]
 800799a:	23c0      	movs	r3, #192	; 0xc0
 800799c:	029b      	lsls	r3, r3, #10
 800799e:	401a      	ands	r2, r3
 80079a0:	23c0      	movs	r3, #192	; 0xc0
 80079a2:	029b      	lsls	r3, r3, #10
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d10c      	bne.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80079a8:	4b5a      	ldr	r3, [pc, #360]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a5e      	ldr	r2, [pc, #376]	; (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80079ae:	4013      	ands	r3, r2
 80079b0:	0019      	movs	r1, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	689a      	ldr	r2, [r3, #8]
 80079b6:	23c0      	movs	r3, #192	; 0xc0
 80079b8:	039b      	lsls	r3, r3, #14
 80079ba:	401a      	ands	r2, r3
 80079bc:	4b55      	ldr	r3, [pc, #340]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80079be:	430a      	orrs	r2, r1
 80079c0:	601a      	str	r2, [r3, #0]
 80079c2:	4b54      	ldr	r3, [pc, #336]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80079c4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	689a      	ldr	r2, [r3, #8]
 80079ca:	23c0      	movs	r3, #192	; 0xc0
 80079cc:	029b      	lsls	r3, r3, #10
 80079ce:	401a      	ands	r2, r3
 80079d0:	4b50      	ldr	r3, [pc, #320]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80079d2:	430a      	orrs	r2, r1
 80079d4:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2220      	movs	r2, #32
 80079dc:	4013      	ands	r3, r2
 80079de:	d01f      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	685a      	ldr	r2, [r3, #4]
 80079e4:	23c0      	movs	r3, #192	; 0xc0
 80079e6:	029b      	lsls	r3, r3, #10
 80079e8:	401a      	ands	r2, r3
 80079ea:	23c0      	movs	r3, #192	; 0xc0
 80079ec:	029b      	lsls	r3, r3, #10
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d10c      	bne.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x208>
 80079f2:	4b48      	ldr	r3, [pc, #288]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a4c      	ldr	r2, [pc, #304]	; (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80079f8:	4013      	ands	r3, r2
 80079fa:	0019      	movs	r1, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685a      	ldr	r2, [r3, #4]
 8007a00:	23c0      	movs	r3, #192	; 0xc0
 8007a02:	039b      	lsls	r3, r3, #14
 8007a04:	401a      	ands	r2, r3
 8007a06:	4b43      	ldr	r3, [pc, #268]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007a08:	430a      	orrs	r2, r1
 8007a0a:	601a      	str	r2, [r3, #0]
 8007a0c:	4b41      	ldr	r3, [pc, #260]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007a0e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685a      	ldr	r2, [r3, #4]
 8007a14:	23c0      	movs	r3, #192	; 0xc0
 8007a16:	029b      	lsls	r3, r3, #10
 8007a18:	401a      	ands	r2, r3
 8007a1a:	4b3e      	ldr	r3, [pc, #248]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007a20:	2317      	movs	r3, #23
 8007a22:	18fb      	adds	r3, r7, r3
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d105      	bne.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a2a:	4b3a      	ldr	r3, [pc, #232]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007a2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a2e:	4b39      	ldr	r3, [pc, #228]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007a30:	493e      	ldr	r1, [pc, #248]	; (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8007a32:	400a      	ands	r2, r1
 8007a34:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	d009      	beq.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007a40:	4b34      	ldr	r3, [pc, #208]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a44:	2203      	movs	r2, #3
 8007a46:	4393      	bics	r3, r2
 8007a48:	0019      	movs	r1, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	68da      	ldr	r2, [r3, #12]
 8007a4e:	4b31      	ldr	r3, [pc, #196]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007a50:	430a      	orrs	r2, r1
 8007a52:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2202      	movs	r2, #2
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	d009      	beq.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007a5e:	4b2d      	ldr	r3, [pc, #180]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a62:	220c      	movs	r2, #12
 8007a64:	4393      	bics	r3, r2
 8007a66:	0019      	movs	r1, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	691a      	ldr	r2, [r3, #16]
 8007a6c:	4b29      	ldr	r3, [pc, #164]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007a6e:	430a      	orrs	r2, r1
 8007a70:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2204      	movs	r2, #4
 8007a78:	4013      	ands	r3, r2
 8007a7a:	d009      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007a7c:	4b25      	ldr	r3, [pc, #148]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a80:	4a2b      	ldr	r2, [pc, #172]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8007a82:	4013      	ands	r3, r2
 8007a84:	0019      	movs	r1, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	695a      	ldr	r2, [r3, #20]
 8007a8a:	4b22      	ldr	r3, [pc, #136]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007a8c:	430a      	orrs	r2, r1
 8007a8e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2208      	movs	r2, #8
 8007a96:	4013      	ands	r3, r2
 8007a98:	d009      	beq.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007a9a:	4b1e      	ldr	r3, [pc, #120]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a9e:	4a25      	ldr	r2, [pc, #148]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	0019      	movs	r1, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	699a      	ldr	r2, [r3, #24]
 8007aa8:	4b1a      	ldr	r3, [pc, #104]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007aaa:	430a      	orrs	r2, r1
 8007aac:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	2380      	movs	r3, #128	; 0x80
 8007ab4:	005b      	lsls	r3, r3, #1
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	d009      	beq.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007aba:	4b16      	ldr	r3, [pc, #88]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007abe:	4a17      	ldr	r2, [pc, #92]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	0019      	movs	r1, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	69da      	ldr	r2, [r3, #28]
 8007ac8:	4b12      	ldr	r3, [pc, #72]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007aca:	430a      	orrs	r2, r1
 8007acc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2240      	movs	r2, #64	; 0x40
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	d009      	beq.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ad8:	4b0e      	ldr	r3, [pc, #56]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007adc:	4a16      	ldr	r2, [pc, #88]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8007ade:	4013      	ands	r3, r2
 8007ae0:	0019      	movs	r1, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ae6:	4b0b      	ldr	r3, [pc, #44]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007ae8:	430a      	orrs	r2, r1
 8007aea:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2280      	movs	r2, #128	; 0x80
 8007af2:	4013      	ands	r3, r2
 8007af4:	d009      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8007af6:	4b07      	ldr	r3, [pc, #28]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007afa:	4a10      	ldr	r2, [pc, #64]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007afc:	4013      	ands	r3, r2
 8007afe:	0019      	movs	r1, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a1a      	ldr	r2, [r3, #32]
 8007b04:	4b03      	ldr	r3, [pc, #12]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007b06:	430a      	orrs	r2, r1
 8007b08:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	0018      	movs	r0, r3
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	b006      	add	sp, #24
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	40021000 	.word	0x40021000
 8007b18:	40007000 	.word	0x40007000
 8007b1c:	fffcffff 	.word	0xfffcffff
 8007b20:	fff7ffff 	.word	0xfff7ffff
 8007b24:	00001388 	.word	0x00001388
 8007b28:	ffcfffff 	.word	0xffcfffff
 8007b2c:	efffffff 	.word	0xefffffff
 8007b30:	fffff3ff 	.word	0xfffff3ff
 8007b34:	ffffcfff 	.word	0xffffcfff
 8007b38:	fbffffff 	.word	0xfbffffff
 8007b3c:	fff3ffff 	.word	0xfff3ffff

08007b40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d101      	bne.n	8007b52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e032      	b.n	8007bb8 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2239      	movs	r2, #57	; 0x39
 8007b56:	5c9b      	ldrb	r3, [r3, r2]
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d107      	bne.n	8007b6e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2238      	movs	r2, #56	; 0x38
 8007b62:	2100      	movs	r1, #0
 8007b64:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	0018      	movs	r0, r3
 8007b6a:	f7fb fd2f 	bl	80035cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2239      	movs	r2, #57	; 0x39
 8007b72:	2102      	movs	r1, #2
 8007b74:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	3304      	adds	r3, #4
 8007b7e:	0019      	movs	r1, r3
 8007b80:	0010      	movs	r0, r2
 8007b82:	f000 fbeb 	bl	800835c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	223e      	movs	r2, #62	; 0x3e
 8007b8a:	2101      	movs	r1, #1
 8007b8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	223a      	movs	r2, #58	; 0x3a
 8007b92:	2101      	movs	r1, #1
 8007b94:	5499      	strb	r1, [r3, r2]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	223b      	movs	r2, #59	; 0x3b
 8007b9a:	2101      	movs	r1, #1
 8007b9c:	5499      	strb	r1, [r3, r2]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	223c      	movs	r2, #60	; 0x3c
 8007ba2:	2101      	movs	r1, #1
 8007ba4:	5499      	strb	r1, [r3, r2]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	223d      	movs	r2, #61	; 0x3d
 8007baa:	2101      	movs	r1, #1
 8007bac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2239      	movs	r2, #57	; 0x39
 8007bb2:	2101      	movs	r1, #1
 8007bb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	0018      	movs	r0, r3
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	b002      	add	sp, #8
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2239      	movs	r2, #57	; 0x39
 8007bcc:	5c9b      	ldrb	r3, [r3, r2]
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d001      	beq.n	8007bd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e03b      	b.n	8007c50 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2239      	movs	r2, #57	; 0x39
 8007bdc:	2102      	movs	r1, #2
 8007bde:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68da      	ldr	r2, [r3, #12]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2101      	movs	r1, #1
 8007bec:	430a      	orrs	r2, r1
 8007bee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	2380      	movs	r3, #128	; 0x80
 8007bf6:	05db      	lsls	r3, r3, #23
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d00e      	beq.n	8007c1a <HAL_TIM_Base_Start_IT+0x5a>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a15      	ldr	r2, [pc, #84]	; (8007c58 <HAL_TIM_Base_Start_IT+0x98>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d009      	beq.n	8007c1a <HAL_TIM_Base_Start_IT+0x5a>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a14      	ldr	r2, [pc, #80]	; (8007c5c <HAL_TIM_Base_Start_IT+0x9c>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d004      	beq.n	8007c1a <HAL_TIM_Base_Start_IT+0x5a>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a12      	ldr	r2, [pc, #72]	; (8007c60 <HAL_TIM_Base_Start_IT+0xa0>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d111      	bne.n	8007c3e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	2207      	movs	r2, #7
 8007c22:	4013      	ands	r3, r2
 8007c24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2b06      	cmp	r3, #6
 8007c2a:	d010      	beq.n	8007c4e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2101      	movs	r1, #1
 8007c38:	430a      	orrs	r2, r1
 8007c3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c3c:	e007      	b.n	8007c4e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2101      	movs	r1, #1
 8007c4a:	430a      	orrs	r2, r1
 8007c4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	0018      	movs	r0, r3
 8007c52:	46bd      	mov	sp, r7
 8007c54:	b004      	add	sp, #16
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	40000400 	.word	0x40000400
 8007c5c:	40010800 	.word	0x40010800
 8007c60:	40011400 	.word	0x40011400

08007c64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d101      	bne.n	8007c76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e032      	b.n	8007cdc <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2239      	movs	r2, #57	; 0x39
 8007c7a:	5c9b      	ldrb	r3, [r3, r2]
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d107      	bne.n	8007c92 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2238      	movs	r2, #56	; 0x38
 8007c86:	2100      	movs	r1, #0
 8007c88:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	0018      	movs	r0, r3
 8007c8e:	f7fb fcbb 	bl	8003608 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2239      	movs	r2, #57	; 0x39
 8007c96:	2102      	movs	r1, #2
 8007c98:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	3304      	adds	r3, #4
 8007ca2:	0019      	movs	r1, r3
 8007ca4:	0010      	movs	r0, r2
 8007ca6:	f000 fb59 	bl	800835c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	223e      	movs	r2, #62	; 0x3e
 8007cae:	2101      	movs	r1, #1
 8007cb0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	223a      	movs	r2, #58	; 0x3a
 8007cb6:	2101      	movs	r1, #1
 8007cb8:	5499      	strb	r1, [r3, r2]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	223b      	movs	r2, #59	; 0x3b
 8007cbe:	2101      	movs	r1, #1
 8007cc0:	5499      	strb	r1, [r3, r2]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	223c      	movs	r2, #60	; 0x3c
 8007cc6:	2101      	movs	r1, #1
 8007cc8:	5499      	strb	r1, [r3, r2]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	223d      	movs	r2, #61	; 0x3d
 8007cce:	2101      	movs	r1, #1
 8007cd0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2239      	movs	r2, #57	; 0x39
 8007cd6:	2101      	movs	r1, #1
 8007cd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	0018      	movs	r0, r3
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	b002      	add	sp, #8
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d108      	bne.n	8007d06 <HAL_TIM_PWM_Start+0x22>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	223a      	movs	r2, #58	; 0x3a
 8007cf8:	5c9b      	ldrb	r3, [r3, r2]
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	1e5a      	subs	r2, r3, #1
 8007d00:	4193      	sbcs	r3, r2
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	e01f      	b.n	8007d46 <HAL_TIM_PWM_Start+0x62>
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	2b04      	cmp	r3, #4
 8007d0a:	d108      	bne.n	8007d1e <HAL_TIM_PWM_Start+0x3a>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	223b      	movs	r2, #59	; 0x3b
 8007d10:	5c9b      	ldrb	r3, [r3, r2]
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	3b01      	subs	r3, #1
 8007d16:	1e5a      	subs	r2, r3, #1
 8007d18:	4193      	sbcs	r3, r2
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	e013      	b.n	8007d46 <HAL_TIM_PWM_Start+0x62>
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	2b08      	cmp	r3, #8
 8007d22:	d108      	bne.n	8007d36 <HAL_TIM_PWM_Start+0x52>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	223c      	movs	r2, #60	; 0x3c
 8007d28:	5c9b      	ldrb	r3, [r3, r2]
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	1e5a      	subs	r2, r3, #1
 8007d30:	4193      	sbcs	r3, r2
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	e007      	b.n	8007d46 <HAL_TIM_PWM_Start+0x62>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	223d      	movs	r2, #61	; 0x3d
 8007d3a:	5c9b      	ldrb	r3, [r3, r2]
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	1e5a      	subs	r2, r3, #1
 8007d42:	4193      	sbcs	r3, r2
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d001      	beq.n	8007d4e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e052      	b.n	8007df4 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d104      	bne.n	8007d5e <HAL_TIM_PWM_Start+0x7a>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	223a      	movs	r2, #58	; 0x3a
 8007d58:	2102      	movs	r1, #2
 8007d5a:	5499      	strb	r1, [r3, r2]
 8007d5c:	e013      	b.n	8007d86 <HAL_TIM_PWM_Start+0xa2>
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	2b04      	cmp	r3, #4
 8007d62:	d104      	bne.n	8007d6e <HAL_TIM_PWM_Start+0x8a>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	223b      	movs	r2, #59	; 0x3b
 8007d68:	2102      	movs	r1, #2
 8007d6a:	5499      	strb	r1, [r3, r2]
 8007d6c:	e00b      	b.n	8007d86 <HAL_TIM_PWM_Start+0xa2>
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	2b08      	cmp	r3, #8
 8007d72:	d104      	bne.n	8007d7e <HAL_TIM_PWM_Start+0x9a>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	223c      	movs	r2, #60	; 0x3c
 8007d78:	2102      	movs	r1, #2
 8007d7a:	5499      	strb	r1, [r3, r2]
 8007d7c:	e003      	b.n	8007d86 <HAL_TIM_PWM_Start+0xa2>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	223d      	movs	r2, #61	; 0x3d
 8007d82:	2102      	movs	r1, #2
 8007d84:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	6839      	ldr	r1, [r7, #0]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	0018      	movs	r0, r3
 8007d90:	f000 fce0 	bl	8008754 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	2380      	movs	r3, #128	; 0x80
 8007d9a:	05db      	lsls	r3, r3, #23
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d00e      	beq.n	8007dbe <HAL_TIM_PWM_Start+0xda>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a15      	ldr	r2, [pc, #84]	; (8007dfc <HAL_TIM_PWM_Start+0x118>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d009      	beq.n	8007dbe <HAL_TIM_PWM_Start+0xda>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a14      	ldr	r2, [pc, #80]	; (8007e00 <HAL_TIM_PWM_Start+0x11c>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d004      	beq.n	8007dbe <HAL_TIM_PWM_Start+0xda>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a12      	ldr	r2, [pc, #72]	; (8007e04 <HAL_TIM_PWM_Start+0x120>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d111      	bne.n	8007de2 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	2207      	movs	r2, #7
 8007dc6:	4013      	ands	r3, r2
 8007dc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2b06      	cmp	r3, #6
 8007dce:	d010      	beq.n	8007df2 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2101      	movs	r1, #1
 8007ddc:	430a      	orrs	r2, r1
 8007dde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007de0:	e007      	b.n	8007df2 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2101      	movs	r1, #1
 8007dee:	430a      	orrs	r2, r1
 8007df0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	0018      	movs	r0, r3
 8007df6:	46bd      	mov	sp, r7
 8007df8:	b004      	add	sp, #16
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	40000400 	.word	0x40000400
 8007e00:	40010800 	.word	0x40010800
 8007e04:	40011400 	.word	0x40011400

08007e08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	2202      	movs	r2, #2
 8007e18:	4013      	ands	r3, r2
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	d124      	bne.n	8007e68 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	2202      	movs	r2, #2
 8007e26:	4013      	ands	r3, r2
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d11d      	bne.n	8007e68 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2203      	movs	r2, #3
 8007e32:	4252      	negs	r2, r2
 8007e34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	2203      	movs	r2, #3
 8007e44:	4013      	ands	r3, r2
 8007e46:	d004      	beq.n	8007e52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	0018      	movs	r0, r3
 8007e4c:	f000 fa6e 	bl	800832c <HAL_TIM_IC_CaptureCallback>
 8007e50:	e007      	b.n	8007e62 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	0018      	movs	r0, r3
 8007e56:	f000 fa61 	bl	800831c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	0018      	movs	r0, r3
 8007e5e:	f000 fa6d 	bl	800833c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	2204      	movs	r2, #4
 8007e70:	4013      	ands	r3, r2
 8007e72:	2b04      	cmp	r3, #4
 8007e74:	d125      	bne.n	8007ec2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	2204      	movs	r2, #4
 8007e7e:	4013      	ands	r3, r2
 8007e80:	2b04      	cmp	r3, #4
 8007e82:	d11e      	bne.n	8007ec2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2205      	movs	r2, #5
 8007e8a:	4252      	negs	r2, r2
 8007e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2202      	movs	r2, #2
 8007e92:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	699a      	ldr	r2, [r3, #24]
 8007e9a:	23c0      	movs	r3, #192	; 0xc0
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	d004      	beq.n	8007eac <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	0018      	movs	r0, r3
 8007ea6:	f000 fa41 	bl	800832c <HAL_TIM_IC_CaptureCallback>
 8007eaa:	e007      	b.n	8007ebc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	0018      	movs	r0, r3
 8007eb0:	f000 fa34 	bl	800831c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	0018      	movs	r0, r3
 8007eb8:	f000 fa40 	bl	800833c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	691b      	ldr	r3, [r3, #16]
 8007ec8:	2208      	movs	r2, #8
 8007eca:	4013      	ands	r3, r2
 8007ecc:	2b08      	cmp	r3, #8
 8007ece:	d124      	bne.n	8007f1a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	2208      	movs	r2, #8
 8007ed8:	4013      	ands	r3, r2
 8007eda:	2b08      	cmp	r3, #8
 8007edc:	d11d      	bne.n	8007f1a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2209      	movs	r2, #9
 8007ee4:	4252      	negs	r2, r2
 8007ee6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2204      	movs	r2, #4
 8007eec:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	69db      	ldr	r3, [r3, #28]
 8007ef4:	2203      	movs	r2, #3
 8007ef6:	4013      	ands	r3, r2
 8007ef8:	d004      	beq.n	8007f04 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	0018      	movs	r0, r3
 8007efe:	f000 fa15 	bl	800832c <HAL_TIM_IC_CaptureCallback>
 8007f02:	e007      	b.n	8007f14 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	0018      	movs	r0, r3
 8007f08:	f000 fa08 	bl	800831c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	0018      	movs	r0, r3
 8007f10:	f000 fa14 	bl	800833c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	2210      	movs	r2, #16
 8007f22:	4013      	ands	r3, r2
 8007f24:	2b10      	cmp	r3, #16
 8007f26:	d125      	bne.n	8007f74 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	2210      	movs	r2, #16
 8007f30:	4013      	ands	r3, r2
 8007f32:	2b10      	cmp	r3, #16
 8007f34:	d11e      	bne.n	8007f74 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2211      	movs	r2, #17
 8007f3c:	4252      	negs	r2, r2
 8007f3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2208      	movs	r2, #8
 8007f44:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	69da      	ldr	r2, [r3, #28]
 8007f4c:	23c0      	movs	r3, #192	; 0xc0
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4013      	ands	r3, r2
 8007f52:	d004      	beq.n	8007f5e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	0018      	movs	r0, r3
 8007f58:	f000 f9e8 	bl	800832c <HAL_TIM_IC_CaptureCallback>
 8007f5c:	e007      	b.n	8007f6e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	0018      	movs	r0, r3
 8007f62:	f000 f9db 	bl	800831c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	0018      	movs	r0, r3
 8007f6a:	f000 f9e7 	bl	800833c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d10f      	bne.n	8007fa2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d108      	bne.n	8007fa2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2202      	movs	r2, #2
 8007f96:	4252      	negs	r2, r2
 8007f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	0018      	movs	r0, r3
 8007f9e:	f000 f9b5 	bl	800830c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	691b      	ldr	r3, [r3, #16]
 8007fa8:	2240      	movs	r2, #64	; 0x40
 8007faa:	4013      	ands	r3, r2
 8007fac:	2b40      	cmp	r3, #64	; 0x40
 8007fae:	d10f      	bne.n	8007fd0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	2240      	movs	r2, #64	; 0x40
 8007fb8:	4013      	ands	r3, r2
 8007fba:	2b40      	cmp	r3, #64	; 0x40
 8007fbc:	d108      	bne.n	8007fd0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2241      	movs	r2, #65	; 0x41
 8007fc4:	4252      	negs	r2, r2
 8007fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	0018      	movs	r0, r3
 8007fcc:	f000 f9be 	bl	800834c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007fd0:	46c0      	nop			; (mov r8, r8)
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	b002      	add	sp, #8
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b086      	sub	sp, #24
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fe4:	2317      	movs	r3, #23
 8007fe6:	18fb      	adds	r3, r7, r3
 8007fe8:	2200      	movs	r2, #0
 8007fea:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2238      	movs	r2, #56	; 0x38
 8007ff0:	5c9b      	ldrb	r3, [r3, r2]
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d101      	bne.n	8007ffa <HAL_TIM_PWM_ConfigChannel+0x22>
 8007ff6:	2302      	movs	r3, #2
 8007ff8:	e0ad      	b.n	8008156 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2238      	movs	r2, #56	; 0x38
 8007ffe:	2101      	movs	r1, #1
 8008000:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2b0c      	cmp	r3, #12
 8008006:	d100      	bne.n	800800a <HAL_TIM_PWM_ConfigChannel+0x32>
 8008008:	e076      	b.n	80080f8 <HAL_TIM_PWM_ConfigChannel+0x120>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2b0c      	cmp	r3, #12
 800800e:	d900      	bls.n	8008012 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8008010:	e095      	b.n	800813e <HAL_TIM_PWM_ConfigChannel+0x166>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2b08      	cmp	r3, #8
 8008016:	d04e      	beq.n	80080b6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2b08      	cmp	r3, #8
 800801c:	d900      	bls.n	8008020 <HAL_TIM_PWM_ConfigChannel+0x48>
 800801e:	e08e      	b.n	800813e <HAL_TIM_PWM_ConfigChannel+0x166>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d003      	beq.n	800802e <HAL_TIM_PWM_ConfigChannel+0x56>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2b04      	cmp	r3, #4
 800802a:	d021      	beq.n	8008070 <HAL_TIM_PWM_ConfigChannel+0x98>
 800802c:	e087      	b.n	800813e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	0011      	movs	r1, r2
 8008036:	0018      	movs	r0, r3
 8008038:	f000 f9ee 	bl	8008418 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	699a      	ldr	r2, [r3, #24]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2108      	movs	r1, #8
 8008048:	430a      	orrs	r2, r1
 800804a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	699a      	ldr	r2, [r3, #24]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2104      	movs	r1, #4
 8008058:	438a      	bics	r2, r1
 800805a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	6999      	ldr	r1, [r3, #24]
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	68da      	ldr	r2, [r3, #12]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	430a      	orrs	r2, r1
 800806c:	619a      	str	r2, [r3, #24]
      break;
 800806e:	e06b      	b.n	8008148 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	68ba      	ldr	r2, [r7, #8]
 8008076:	0011      	movs	r1, r2
 8008078:	0018      	movs	r0, r3
 800807a:	f000 fa09 	bl	8008490 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	699a      	ldr	r2, [r3, #24]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2180      	movs	r1, #128	; 0x80
 800808a:	0109      	lsls	r1, r1, #4
 800808c:	430a      	orrs	r2, r1
 800808e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	699a      	ldr	r2, [r3, #24]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4931      	ldr	r1, [pc, #196]	; (8008160 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800809c:	400a      	ands	r2, r1
 800809e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	6999      	ldr	r1, [r3, #24]
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	021a      	lsls	r2, r3, #8
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	430a      	orrs	r2, r1
 80080b2:	619a      	str	r2, [r3, #24]
      break;
 80080b4:	e048      	b.n	8008148 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	68ba      	ldr	r2, [r7, #8]
 80080bc:	0011      	movs	r1, r2
 80080be:	0018      	movs	r0, r3
 80080c0:	f000 fa28 	bl	8008514 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	69da      	ldr	r2, [r3, #28]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2108      	movs	r1, #8
 80080d0:	430a      	orrs	r2, r1
 80080d2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	69da      	ldr	r2, [r3, #28]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2104      	movs	r1, #4
 80080e0:	438a      	bics	r2, r1
 80080e2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	69d9      	ldr	r1, [r3, #28]
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	68da      	ldr	r2, [r3, #12]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	430a      	orrs	r2, r1
 80080f4:	61da      	str	r2, [r3, #28]
      break;
 80080f6:	e027      	b.n	8008148 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	0011      	movs	r1, r2
 8008100:	0018      	movs	r0, r3
 8008102:	f000 fa47 	bl	8008594 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	69da      	ldr	r2, [r3, #28]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2180      	movs	r1, #128	; 0x80
 8008112:	0109      	lsls	r1, r1, #4
 8008114:	430a      	orrs	r2, r1
 8008116:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	69da      	ldr	r2, [r3, #28]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	490f      	ldr	r1, [pc, #60]	; (8008160 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8008124:	400a      	ands	r2, r1
 8008126:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	69d9      	ldr	r1, [r3, #28]
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	021a      	lsls	r2, r3, #8
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	430a      	orrs	r2, r1
 800813a:	61da      	str	r2, [r3, #28]
      break;
 800813c:	e004      	b.n	8008148 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800813e:	2317      	movs	r3, #23
 8008140:	18fb      	adds	r3, r7, r3
 8008142:	2201      	movs	r2, #1
 8008144:	701a      	strb	r2, [r3, #0]
      break;
 8008146:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2238      	movs	r2, #56	; 0x38
 800814c:	2100      	movs	r1, #0
 800814e:	5499      	strb	r1, [r3, r2]

  return status;
 8008150:	2317      	movs	r3, #23
 8008152:	18fb      	adds	r3, r7, r3
 8008154:	781b      	ldrb	r3, [r3, #0]
}
 8008156:	0018      	movs	r0, r3
 8008158:	46bd      	mov	sp, r7
 800815a:	b006      	add	sp, #24
 800815c:	bd80      	pop	{r7, pc}
 800815e:	46c0      	nop			; (mov r8, r8)
 8008160:	fffffbff 	.word	0xfffffbff

08008164 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800816e:	230f      	movs	r3, #15
 8008170:	18fb      	adds	r3, r7, r3
 8008172:	2200      	movs	r2, #0
 8008174:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2238      	movs	r2, #56	; 0x38
 800817a:	5c9b      	ldrb	r3, [r3, r2]
 800817c:	2b01      	cmp	r3, #1
 800817e:	d101      	bne.n	8008184 <HAL_TIM_ConfigClockSource+0x20>
 8008180:	2302      	movs	r3, #2
 8008182:	e0bc      	b.n	80082fe <HAL_TIM_ConfigClockSource+0x19a>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2238      	movs	r2, #56	; 0x38
 8008188:	2101      	movs	r1, #1
 800818a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2239      	movs	r2, #57	; 0x39
 8008190:	2102      	movs	r1, #2
 8008192:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	2277      	movs	r2, #119	; 0x77
 80081a0:	4393      	bics	r3, r2
 80081a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	4a58      	ldr	r2, [pc, #352]	; (8008308 <HAL_TIM_ConfigClockSource+0x1a4>)
 80081a8:	4013      	ands	r3, r2
 80081aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	68ba      	ldr	r2, [r7, #8]
 80081b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2280      	movs	r2, #128	; 0x80
 80081ba:	0192      	lsls	r2, r2, #6
 80081bc:	4293      	cmp	r3, r2
 80081be:	d040      	beq.n	8008242 <HAL_TIM_ConfigClockSource+0xde>
 80081c0:	2280      	movs	r2, #128	; 0x80
 80081c2:	0192      	lsls	r2, r2, #6
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d900      	bls.n	80081ca <HAL_TIM_ConfigClockSource+0x66>
 80081c8:	e088      	b.n	80082dc <HAL_TIM_ConfigClockSource+0x178>
 80081ca:	2280      	movs	r2, #128	; 0x80
 80081cc:	0152      	lsls	r2, r2, #5
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d100      	bne.n	80081d4 <HAL_TIM_ConfigClockSource+0x70>
 80081d2:	e088      	b.n	80082e6 <HAL_TIM_ConfigClockSource+0x182>
 80081d4:	2280      	movs	r2, #128	; 0x80
 80081d6:	0152      	lsls	r2, r2, #5
 80081d8:	4293      	cmp	r3, r2
 80081da:	d900      	bls.n	80081de <HAL_TIM_ConfigClockSource+0x7a>
 80081dc:	e07e      	b.n	80082dc <HAL_TIM_ConfigClockSource+0x178>
 80081de:	2b70      	cmp	r3, #112	; 0x70
 80081e0:	d018      	beq.n	8008214 <HAL_TIM_ConfigClockSource+0xb0>
 80081e2:	d900      	bls.n	80081e6 <HAL_TIM_ConfigClockSource+0x82>
 80081e4:	e07a      	b.n	80082dc <HAL_TIM_ConfigClockSource+0x178>
 80081e6:	2b60      	cmp	r3, #96	; 0x60
 80081e8:	d04f      	beq.n	800828a <HAL_TIM_ConfigClockSource+0x126>
 80081ea:	d900      	bls.n	80081ee <HAL_TIM_ConfigClockSource+0x8a>
 80081ec:	e076      	b.n	80082dc <HAL_TIM_ConfigClockSource+0x178>
 80081ee:	2b50      	cmp	r3, #80	; 0x50
 80081f0:	d03b      	beq.n	800826a <HAL_TIM_ConfigClockSource+0x106>
 80081f2:	d900      	bls.n	80081f6 <HAL_TIM_ConfigClockSource+0x92>
 80081f4:	e072      	b.n	80082dc <HAL_TIM_ConfigClockSource+0x178>
 80081f6:	2b40      	cmp	r3, #64	; 0x40
 80081f8:	d057      	beq.n	80082aa <HAL_TIM_ConfigClockSource+0x146>
 80081fa:	d900      	bls.n	80081fe <HAL_TIM_ConfigClockSource+0x9a>
 80081fc:	e06e      	b.n	80082dc <HAL_TIM_ConfigClockSource+0x178>
 80081fe:	2b30      	cmp	r3, #48	; 0x30
 8008200:	d063      	beq.n	80082ca <HAL_TIM_ConfigClockSource+0x166>
 8008202:	d86b      	bhi.n	80082dc <HAL_TIM_ConfigClockSource+0x178>
 8008204:	2b20      	cmp	r3, #32
 8008206:	d060      	beq.n	80082ca <HAL_TIM_ConfigClockSource+0x166>
 8008208:	d868      	bhi.n	80082dc <HAL_TIM_ConfigClockSource+0x178>
 800820a:	2b00      	cmp	r3, #0
 800820c:	d05d      	beq.n	80082ca <HAL_TIM_ConfigClockSource+0x166>
 800820e:	2b10      	cmp	r3, #16
 8008210:	d05b      	beq.n	80082ca <HAL_TIM_ConfigClockSource+0x166>
 8008212:	e063      	b.n	80082dc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008224:	f000 fa76 	bl	8008714 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	2277      	movs	r2, #119	; 0x77
 8008234:	4313      	orrs	r3, r2
 8008236:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	68ba      	ldr	r2, [r7, #8]
 800823e:	609a      	str	r2, [r3, #8]
      break;
 8008240:	e052      	b.n	80082e8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008252:	f000 fa5f 	bl	8008714 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	689a      	ldr	r2, [r3, #8]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2180      	movs	r1, #128	; 0x80
 8008262:	01c9      	lsls	r1, r1, #7
 8008264:	430a      	orrs	r2, r1
 8008266:	609a      	str	r2, [r3, #8]
      break;
 8008268:	e03e      	b.n	80082e8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008276:	001a      	movs	r2, r3
 8008278:	f000 f9d2 	bl	8008620 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2150      	movs	r1, #80	; 0x50
 8008282:	0018      	movs	r0, r3
 8008284:	f000 fa2c 	bl	80086e0 <TIM_ITRx_SetConfig>
      break;
 8008288:	e02e      	b.n	80082e8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008296:	001a      	movs	r2, r3
 8008298:	f000 f9f0 	bl	800867c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2160      	movs	r1, #96	; 0x60
 80082a2:	0018      	movs	r0, r3
 80082a4:	f000 fa1c 	bl	80086e0 <TIM_ITRx_SetConfig>
      break;
 80082a8:	e01e      	b.n	80082e8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082b6:	001a      	movs	r2, r3
 80082b8:	f000 f9b2 	bl	8008620 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2140      	movs	r1, #64	; 0x40
 80082c2:	0018      	movs	r0, r3
 80082c4:	f000 fa0c 	bl	80086e0 <TIM_ITRx_SetConfig>
      break;
 80082c8:	e00e      	b.n	80082e8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	0019      	movs	r1, r3
 80082d4:	0010      	movs	r0, r2
 80082d6:	f000 fa03 	bl	80086e0 <TIM_ITRx_SetConfig>
      break;
 80082da:	e005      	b.n	80082e8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80082dc:	230f      	movs	r3, #15
 80082de:	18fb      	adds	r3, r7, r3
 80082e0:	2201      	movs	r2, #1
 80082e2:	701a      	strb	r2, [r3, #0]
      break;
 80082e4:	e000      	b.n	80082e8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80082e6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2239      	movs	r2, #57	; 0x39
 80082ec:	2101      	movs	r1, #1
 80082ee:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2238      	movs	r2, #56	; 0x38
 80082f4:	2100      	movs	r1, #0
 80082f6:	5499      	strb	r1, [r3, r2]

  return status;
 80082f8:	230f      	movs	r3, #15
 80082fa:	18fb      	adds	r3, r7, r3
 80082fc:	781b      	ldrb	r3, [r3, #0]
}
 80082fe:	0018      	movs	r0, r3
 8008300:	46bd      	mov	sp, r7
 8008302:	b004      	add	sp, #16
 8008304:	bd80      	pop	{r7, pc}
 8008306:	46c0      	nop			; (mov r8, r8)
 8008308:	ffff00ff 	.word	0xffff00ff

0800830c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008314:	46c0      	nop			; (mov r8, r8)
 8008316:	46bd      	mov	sp, r7
 8008318:	b002      	add	sp, #8
 800831a:	bd80      	pop	{r7, pc}

0800831c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008324:	46c0      	nop			; (mov r8, r8)
 8008326:	46bd      	mov	sp, r7
 8008328:	b002      	add	sp, #8
 800832a:	bd80      	pop	{r7, pc}

0800832c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008334:	46c0      	nop			; (mov r8, r8)
 8008336:	46bd      	mov	sp, r7
 8008338:	b002      	add	sp, #8
 800833a:	bd80      	pop	{r7, pc}

0800833c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008344:	46c0      	nop			; (mov r8, r8)
 8008346:	46bd      	mov	sp, r7
 8008348:	b002      	add	sp, #8
 800834a:	bd80      	pop	{r7, pc}

0800834c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008354:	46c0      	nop			; (mov r8, r8)
 8008356:	46bd      	mov	sp, r7
 8008358:	b002      	add	sp, #8
 800835a:	bd80      	pop	{r7, pc}

0800835c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	2380      	movs	r3, #128	; 0x80
 8008370:	05db      	lsls	r3, r3, #23
 8008372:	429a      	cmp	r2, r3
 8008374:	d00b      	beq.n	800838e <TIM_Base_SetConfig+0x32>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a23      	ldr	r2, [pc, #140]	; (8008408 <TIM_Base_SetConfig+0xac>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d007      	beq.n	800838e <TIM_Base_SetConfig+0x32>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a22      	ldr	r2, [pc, #136]	; (800840c <TIM_Base_SetConfig+0xb0>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d003      	beq.n	800838e <TIM_Base_SetConfig+0x32>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a21      	ldr	r2, [pc, #132]	; (8008410 <TIM_Base_SetConfig+0xb4>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d108      	bne.n	80083a0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2270      	movs	r2, #112	; 0x70
 8008392:	4393      	bics	r3, r2
 8008394:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	4313      	orrs	r3, r2
 800839e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	2380      	movs	r3, #128	; 0x80
 80083a4:	05db      	lsls	r3, r3, #23
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d00b      	beq.n	80083c2 <TIM_Base_SetConfig+0x66>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a16      	ldr	r2, [pc, #88]	; (8008408 <TIM_Base_SetConfig+0xac>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d007      	beq.n	80083c2 <TIM_Base_SetConfig+0x66>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a15      	ldr	r2, [pc, #84]	; (800840c <TIM_Base_SetConfig+0xb0>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d003      	beq.n	80083c2 <TIM_Base_SetConfig+0x66>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4a14      	ldr	r2, [pc, #80]	; (8008410 <TIM_Base_SetConfig+0xb4>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d108      	bne.n	80083d4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	4a13      	ldr	r2, [pc, #76]	; (8008414 <TIM_Base_SetConfig+0xb8>)
 80083c6:	4013      	ands	r3, r2
 80083c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	68fa      	ldr	r2, [r7, #12]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2280      	movs	r2, #128	; 0x80
 80083d8:	4393      	bics	r3, r2
 80083da:	001a      	movs	r2, r3
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	689a      	ldr	r2, [r3, #8]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2201      	movs	r2, #1
 80083fe:	615a      	str	r2, [r3, #20]
}
 8008400:	46c0      	nop			; (mov r8, r8)
 8008402:	46bd      	mov	sp, r7
 8008404:	b004      	add	sp, #16
 8008406:	bd80      	pop	{r7, pc}
 8008408:	40000400 	.word	0x40000400
 800840c:	40010800 	.word	0x40010800
 8008410:	40011400 	.word	0x40011400
 8008414:	fffffcff 	.word	0xfffffcff

08008418 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b086      	sub	sp, #24
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a1b      	ldr	r3, [r3, #32]
 8008426:	2201      	movs	r2, #1
 8008428:	4393      	bics	r3, r2
 800842a:	001a      	movs	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6a1b      	ldr	r3, [r3, #32]
 8008434:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	699b      	ldr	r3, [r3, #24]
 8008440:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2270      	movs	r2, #112	; 0x70
 8008446:	4393      	bics	r3, r2
 8008448:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2203      	movs	r2, #3
 800844e:	4393      	bics	r3, r2
 8008450:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	4313      	orrs	r3, r2
 800845a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	2202      	movs	r2, #2
 8008460:	4393      	bics	r3, r2
 8008462:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	697a      	ldr	r2, [r7, #20]
 800846a:	4313      	orrs	r3, r2
 800846c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	693a      	ldr	r2, [r7, #16]
 8008472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	685a      	ldr	r2, [r3, #4]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	697a      	ldr	r2, [r7, #20]
 8008486:	621a      	str	r2, [r3, #32]
}
 8008488:	46c0      	nop			; (mov r8, r8)
 800848a:	46bd      	mov	sp, r7
 800848c:	b006      	add	sp, #24
 800848e:	bd80      	pop	{r7, pc}

08008490 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a1b      	ldr	r3, [r3, #32]
 800849e:	2210      	movs	r2, #16
 80084a0:	4393      	bics	r3, r2
 80084a2:	001a      	movs	r2, r3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a1b      	ldr	r3, [r3, #32]
 80084ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	699b      	ldr	r3, [r3, #24]
 80084b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	4a13      	ldr	r2, [pc, #76]	; (800850c <TIM_OC2_SetConfig+0x7c>)
 80084be:	4013      	ands	r3, r2
 80084c0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	4a12      	ldr	r2, [pc, #72]	; (8008510 <TIM_OC2_SetConfig+0x80>)
 80084c6:	4013      	ands	r3, r2
 80084c8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	021b      	lsls	r3, r3, #8
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	2220      	movs	r2, #32
 80084da:	4393      	bics	r3, r2
 80084dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	011b      	lsls	r3, r3, #4
 80084e4:	697a      	ldr	r2, [r7, #20]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	693a      	ldr	r2, [r7, #16]
 80084ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	685a      	ldr	r2, [r3, #4]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	697a      	ldr	r2, [r7, #20]
 8008502:	621a      	str	r2, [r3, #32]
}
 8008504:	46c0      	nop			; (mov r8, r8)
 8008506:	46bd      	mov	sp, r7
 8008508:	b006      	add	sp, #24
 800850a:	bd80      	pop	{r7, pc}
 800850c:	ffff8fff 	.word	0xffff8fff
 8008510:	fffffcff 	.word	0xfffffcff

08008514 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b086      	sub	sp, #24
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a1b      	ldr	r3, [r3, #32]
 8008522:	4a1a      	ldr	r2, [pc, #104]	; (800858c <TIM_OC3_SetConfig+0x78>)
 8008524:	401a      	ands	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a1b      	ldr	r3, [r3, #32]
 800852e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	69db      	ldr	r3, [r3, #28]
 800853a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2270      	movs	r2, #112	; 0x70
 8008540:	4393      	bics	r3, r2
 8008542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2203      	movs	r2, #3
 8008548:	4393      	bics	r3, r2
 800854a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	4313      	orrs	r3, r2
 8008554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	4a0d      	ldr	r2, [pc, #52]	; (8008590 <TIM_OC3_SetConfig+0x7c>)
 800855a:	4013      	ands	r3, r2
 800855c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	021b      	lsls	r3, r3, #8
 8008564:	697a      	ldr	r2, [r7, #20]
 8008566:	4313      	orrs	r3, r2
 8008568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	693a      	ldr	r2, [r7, #16]
 800856e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	685a      	ldr	r2, [r3, #4]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	697a      	ldr	r2, [r7, #20]
 8008582:	621a      	str	r2, [r3, #32]
}
 8008584:	46c0      	nop			; (mov r8, r8)
 8008586:	46bd      	mov	sp, r7
 8008588:	b006      	add	sp, #24
 800858a:	bd80      	pop	{r7, pc}
 800858c:	fffffeff 	.word	0xfffffeff
 8008590:	fffffdff 	.word	0xfffffdff

08008594 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6a1b      	ldr	r3, [r3, #32]
 80085a2:	4a1b      	ldr	r2, [pc, #108]	; (8008610 <TIM_OC4_SetConfig+0x7c>)
 80085a4:	401a      	ands	r2, r3
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6a1b      	ldr	r3, [r3, #32]
 80085ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	69db      	ldr	r3, [r3, #28]
 80085ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	4a15      	ldr	r2, [pc, #84]	; (8008614 <TIM_OC4_SetConfig+0x80>)
 80085c0:	4013      	ands	r3, r2
 80085c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	4a14      	ldr	r2, [pc, #80]	; (8008618 <TIM_OC4_SetConfig+0x84>)
 80085c8:	4013      	ands	r3, r2
 80085ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	021b      	lsls	r3, r3, #8
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	4a10      	ldr	r2, [pc, #64]	; (800861c <TIM_OC4_SetConfig+0x88>)
 80085dc:	4013      	ands	r3, r2
 80085de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	031b      	lsls	r3, r3, #12
 80085e6:	697a      	ldr	r2, [r7, #20]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	693a      	ldr	r2, [r7, #16]
 80085f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	685a      	ldr	r2, [r3, #4]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	697a      	ldr	r2, [r7, #20]
 8008604:	621a      	str	r2, [r3, #32]
}
 8008606:	46c0      	nop			; (mov r8, r8)
 8008608:	46bd      	mov	sp, r7
 800860a:	b006      	add	sp, #24
 800860c:	bd80      	pop	{r7, pc}
 800860e:	46c0      	nop			; (mov r8, r8)
 8008610:	ffffefff 	.word	0xffffefff
 8008614:	ffff8fff 	.word	0xffff8fff
 8008618:	fffffcff 	.word	0xfffffcff
 800861c:	ffffdfff 	.word	0xffffdfff

08008620 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b086      	sub	sp, #24
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6a1b      	ldr	r3, [r3, #32]
 8008630:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	6a1b      	ldr	r3, [r3, #32]
 8008636:	2201      	movs	r2, #1
 8008638:	4393      	bics	r3, r2
 800863a:	001a      	movs	r2, r3
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	699b      	ldr	r3, [r3, #24]
 8008644:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	22f0      	movs	r2, #240	; 0xf0
 800864a:	4393      	bics	r3, r2
 800864c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	011b      	lsls	r3, r3, #4
 8008652:	693a      	ldr	r2, [r7, #16]
 8008654:	4313      	orrs	r3, r2
 8008656:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	220a      	movs	r2, #10
 800865c:	4393      	bics	r3, r2
 800865e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	4313      	orrs	r3, r2
 8008666:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	693a      	ldr	r2, [r7, #16]
 800866c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	697a      	ldr	r2, [r7, #20]
 8008672:	621a      	str	r2, [r3, #32]
}
 8008674:	46c0      	nop			; (mov r8, r8)
 8008676:	46bd      	mov	sp, r7
 8008678:	b006      	add	sp, #24
 800867a:	bd80      	pop	{r7, pc}

0800867c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b086      	sub	sp, #24
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6a1b      	ldr	r3, [r3, #32]
 800868c:	2210      	movs	r2, #16
 800868e:	4393      	bics	r3, r2
 8008690:	001a      	movs	r2, r3
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	699b      	ldr	r3, [r3, #24]
 800869a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6a1b      	ldr	r3, [r3, #32]
 80086a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	4a0d      	ldr	r2, [pc, #52]	; (80086dc <TIM_TI2_ConfigInputStage+0x60>)
 80086a6:	4013      	ands	r3, r2
 80086a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	031b      	lsls	r3, r3, #12
 80086ae:	697a      	ldr	r2, [r7, #20]
 80086b0:	4313      	orrs	r3, r2
 80086b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	22a0      	movs	r2, #160	; 0xa0
 80086b8:	4393      	bics	r3, r2
 80086ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	011b      	lsls	r3, r3, #4
 80086c0:	693a      	ldr	r2, [r7, #16]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	697a      	ldr	r2, [r7, #20]
 80086ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	693a      	ldr	r2, [r7, #16]
 80086d0:	621a      	str	r2, [r3, #32]
}
 80086d2:	46c0      	nop			; (mov r8, r8)
 80086d4:	46bd      	mov	sp, r7
 80086d6:	b006      	add	sp, #24
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	46c0      	nop			; (mov r8, r8)
 80086dc:	ffff0fff 	.word	0xffff0fff

080086e0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2270      	movs	r2, #112	; 0x70
 80086f4:	4393      	bics	r3, r2
 80086f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086f8:	683a      	ldr	r2, [r7, #0]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	2207      	movs	r2, #7
 8008700:	4313      	orrs	r3, r2
 8008702:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	609a      	str	r2, [r3, #8]
}
 800870a:	46c0      	nop			; (mov r8, r8)
 800870c:	46bd      	mov	sp, r7
 800870e:	b004      	add	sp, #16
 8008710:	bd80      	pop	{r7, pc}
	...

08008714 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b086      	sub	sp, #24
 8008718:	af00      	add	r7, sp, #0
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	60b9      	str	r1, [r7, #8]
 800871e:	607a      	str	r2, [r7, #4]
 8008720:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	4a09      	ldr	r2, [pc, #36]	; (8008750 <TIM_ETR_SetConfig+0x3c>)
 800872c:	4013      	ands	r3, r2
 800872e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	021a      	lsls	r2, r3, #8
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	431a      	orrs	r2, r3
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	4313      	orrs	r3, r2
 800873c:	697a      	ldr	r2, [r7, #20]
 800873e:	4313      	orrs	r3, r2
 8008740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	697a      	ldr	r2, [r7, #20]
 8008746:	609a      	str	r2, [r3, #8]
}
 8008748:	46c0      	nop			; (mov r8, r8)
 800874a:	46bd      	mov	sp, r7
 800874c:	b006      	add	sp, #24
 800874e:	bd80      	pop	{r7, pc}
 8008750:	ffff00ff 	.word	0xffff00ff

08008754 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b086      	sub	sp, #24
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	221f      	movs	r2, #31
 8008764:	4013      	ands	r3, r2
 8008766:	2201      	movs	r2, #1
 8008768:	409a      	lsls	r2, r3
 800876a:	0013      	movs	r3, r2
 800876c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6a1b      	ldr	r3, [r3, #32]
 8008772:	697a      	ldr	r2, [r7, #20]
 8008774:	43d2      	mvns	r2, r2
 8008776:	401a      	ands	r2, r3
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6a1a      	ldr	r2, [r3, #32]
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	211f      	movs	r1, #31
 8008784:	400b      	ands	r3, r1
 8008786:	6879      	ldr	r1, [r7, #4]
 8008788:	4099      	lsls	r1, r3
 800878a:	000b      	movs	r3, r1
 800878c:	431a      	orrs	r2, r3
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	621a      	str	r2, [r3, #32]
}
 8008792:	46c0      	nop			; (mov r8, r8)
 8008794:	46bd      	mov	sp, r7
 8008796:	b006      	add	sp, #24
 8008798:	bd80      	pop	{r7, pc}
	...

0800879c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2238      	movs	r2, #56	; 0x38
 80087aa:	5c9b      	ldrb	r3, [r3, r2]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d101      	bne.n	80087b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087b0:	2302      	movs	r3, #2
 80087b2:	e047      	b.n	8008844 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2238      	movs	r2, #56	; 0x38
 80087b8:	2101      	movs	r1, #1
 80087ba:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2239      	movs	r2, #57	; 0x39
 80087c0:	2102      	movs	r1, #2
 80087c2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2270      	movs	r2, #112	; 0x70
 80087d8:	4393      	bics	r3, r2
 80087da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	68fa      	ldr	r2, [r7, #12]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	68fa      	ldr	r2, [r7, #12]
 80087ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	2380      	movs	r3, #128	; 0x80
 80087f4:	05db      	lsls	r3, r3, #23
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d00e      	beq.n	8008818 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a13      	ldr	r2, [pc, #76]	; (800884c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d009      	beq.n	8008818 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a11      	ldr	r2, [pc, #68]	; (8008850 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d004      	beq.n	8008818 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a10      	ldr	r2, [pc, #64]	; (8008854 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d10c      	bne.n	8008832 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	2280      	movs	r2, #128	; 0x80
 800881c:	4393      	bics	r3, r2
 800881e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	68ba      	ldr	r2, [r7, #8]
 8008826:	4313      	orrs	r3, r2
 8008828:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	68ba      	ldr	r2, [r7, #8]
 8008830:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2239      	movs	r2, #57	; 0x39
 8008836:	2101      	movs	r1, #1
 8008838:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2238      	movs	r2, #56	; 0x38
 800883e:	2100      	movs	r1, #0
 8008840:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008842:	2300      	movs	r3, #0
}
 8008844:	0018      	movs	r0, r3
 8008846:	46bd      	mov	sp, r7
 8008848:	b004      	add	sp, #16
 800884a:	bd80      	pop	{r7, pc}
 800884c:	40000400 	.word	0x40000400
 8008850:	40010800 	.word	0x40010800
 8008854:	40011400 	.word	0x40011400

08008858 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d101      	bne.n	800886a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	e044      	b.n	80088f4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800886e:	2b00      	cmp	r3, #0
 8008870:	d107      	bne.n	8008882 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2278      	movs	r2, #120	; 0x78
 8008876:	2100      	movs	r1, #0
 8008878:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	0018      	movs	r0, r3
 800887e:	f7fa ff6b 	bl	8003758 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2224      	movs	r2, #36	; 0x24
 8008886:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2101      	movs	r1, #1
 8008894:	438a      	bics	r2, r1
 8008896:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	0018      	movs	r0, r3
 800889c:	f000 fb8c 	bl	8008fb8 <UART_SetConfig>
 80088a0:	0003      	movs	r3, r0
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d101      	bne.n	80088aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	e024      	b.n	80088f4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d003      	beq.n	80088ba <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	0018      	movs	r0, r3
 80088b6:	f000 fe1d 	bl	80094f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	685a      	ldr	r2, [r3, #4]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	490d      	ldr	r1, [pc, #52]	; (80088fc <HAL_UART_Init+0xa4>)
 80088c6:	400a      	ands	r2, r1
 80088c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	689a      	ldr	r2, [r3, #8]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	212a      	movs	r1, #42	; 0x2a
 80088d6:	438a      	bics	r2, r1
 80088d8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2101      	movs	r1, #1
 80088e6:	430a      	orrs	r2, r1
 80088e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	0018      	movs	r0, r3
 80088ee:	f000 feb5 	bl	800965c <UART_CheckIdleState>
 80088f2:	0003      	movs	r3, r0
}
 80088f4:	0018      	movs	r0, r3
 80088f6:	46bd      	mov	sp, r7
 80088f8:	b002      	add	sp, #8
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	ffffb7ff 	.word	0xffffb7ff

08008900 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b088      	sub	sp, #32
 8008904:	af00      	add	r7, sp, #0
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	1dbb      	adds	r3, r7, #6
 800890c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2280      	movs	r2, #128	; 0x80
 8008912:	589b      	ldr	r3, [r3, r2]
 8008914:	2b20      	cmp	r3, #32
 8008916:	d14a      	bne.n	80089ae <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d003      	beq.n	8008926 <HAL_UART_Receive_IT+0x26>
 800891e:	1dbb      	adds	r3, r7, #6
 8008920:	881b      	ldrh	r3, [r3, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d101      	bne.n	800892a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e042      	b.n	80089b0 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	689a      	ldr	r2, [r3, #8]
 800892e:	2380      	movs	r3, #128	; 0x80
 8008930:	015b      	lsls	r3, r3, #5
 8008932:	429a      	cmp	r2, r3
 8008934:	d109      	bne.n	800894a <HAL_UART_Receive_IT+0x4a>
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	691b      	ldr	r3, [r3, #16]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d105      	bne.n	800894a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	2201      	movs	r2, #1
 8008942:	4013      	ands	r3, r2
 8008944:	d001      	beq.n	800894a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	e032      	b.n	80089b0 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2200      	movs	r2, #0
 800894e:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a18      	ldr	r2, [pc, #96]	; (80089b8 <HAL_UART_Receive_IT+0xb8>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d020      	beq.n	800899c <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	685a      	ldr	r2, [r3, #4]
 8008960:	2380      	movs	r3, #128	; 0x80
 8008962:	041b      	lsls	r3, r3, #16
 8008964:	4013      	ands	r3, r2
 8008966:	d019      	beq.n	800899c <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008968:	f3ef 8310 	mrs	r3, PRIMASK
 800896c:	613b      	str	r3, [r7, #16]
  return(result);
 800896e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008970:	61fb      	str	r3, [r7, #28]
 8008972:	2301      	movs	r3, #1
 8008974:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	f383 8810 	msr	PRIMASK, r3
}
 800897c:	46c0      	nop			; (mov r8, r8)
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2180      	movs	r1, #128	; 0x80
 800898a:	04c9      	lsls	r1, r1, #19
 800898c:	430a      	orrs	r2, r1
 800898e:	601a      	str	r2, [r3, #0]
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008994:	69bb      	ldr	r3, [r7, #24]
 8008996:	f383 8810 	msr	PRIMASK, r3
}
 800899a:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800899c:	1dbb      	adds	r3, r7, #6
 800899e:	881a      	ldrh	r2, [r3, #0]
 80089a0:	68b9      	ldr	r1, [r7, #8]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	0018      	movs	r0, r3
 80089a6:	f000 ff6b 	bl	8009880 <UART_Start_Receive_IT>
 80089aa:	0003      	movs	r3, r0
 80089ac:	e000      	b.n	80089b0 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80089ae:	2302      	movs	r3, #2
  }
}
 80089b0:	0018      	movs	r0, r3
 80089b2:	46bd      	mov	sp, r7
 80089b4:	b008      	add	sp, #32
 80089b6:	bd80      	pop	{r7, pc}
 80089b8:	40004800 	.word	0x40004800

080089bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80089bc:	b590      	push	{r4, r7, lr}
 80089be:	b0ab      	sub	sp, #172	; 0xac
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	69db      	ldr	r3, [r3, #28]
 80089ca:	22a4      	movs	r2, #164	; 0xa4
 80089cc:	18b9      	adds	r1, r7, r2
 80089ce:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	20a0      	movs	r0, #160	; 0xa0
 80089d8:	1839      	adds	r1, r7, r0
 80089da:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	219c      	movs	r1, #156	; 0x9c
 80089e4:	1879      	adds	r1, r7, r1
 80089e6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80089e8:	0011      	movs	r1, r2
 80089ea:	18bb      	adds	r3, r7, r2
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a99      	ldr	r2, [pc, #612]	; (8008c54 <HAL_UART_IRQHandler+0x298>)
 80089f0:	4013      	ands	r3, r2
 80089f2:	2298      	movs	r2, #152	; 0x98
 80089f4:	18bc      	adds	r4, r7, r2
 80089f6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80089f8:	18bb      	adds	r3, r7, r2
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d114      	bne.n	8008a2a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008a00:	187b      	adds	r3, r7, r1
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2220      	movs	r2, #32
 8008a06:	4013      	ands	r3, r2
 8008a08:	d00f      	beq.n	8008a2a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008a0a:	183b      	adds	r3, r7, r0
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2220      	movs	r2, #32
 8008a10:	4013      	ands	r3, r2
 8008a12:	d00a      	beq.n	8008a2a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d100      	bne.n	8008a1e <HAL_UART_IRQHandler+0x62>
 8008a1c:	e2a0      	b.n	8008f60 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	0010      	movs	r0, r2
 8008a26:	4798      	blx	r3
      }
      return;
 8008a28:	e29a      	b.n	8008f60 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008a2a:	2398      	movs	r3, #152	; 0x98
 8008a2c:	18fb      	adds	r3, r7, r3
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d100      	bne.n	8008a36 <HAL_UART_IRQHandler+0x7a>
 8008a34:	e114      	b.n	8008c60 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008a36:	239c      	movs	r3, #156	; 0x9c
 8008a38:	18fb      	adds	r3, r7, r3
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	4013      	ands	r3, r2
 8008a40:	d106      	bne.n	8008a50 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008a42:	23a0      	movs	r3, #160	; 0xa0
 8008a44:	18fb      	adds	r3, r7, r3
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a83      	ldr	r2, [pc, #524]	; (8008c58 <HAL_UART_IRQHandler+0x29c>)
 8008a4a:	4013      	ands	r3, r2
 8008a4c:	d100      	bne.n	8008a50 <HAL_UART_IRQHandler+0x94>
 8008a4e:	e107      	b.n	8008c60 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a50:	23a4      	movs	r3, #164	; 0xa4
 8008a52:	18fb      	adds	r3, r7, r3
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2201      	movs	r2, #1
 8008a58:	4013      	ands	r3, r2
 8008a5a:	d012      	beq.n	8008a82 <HAL_UART_IRQHandler+0xc6>
 8008a5c:	23a0      	movs	r3, #160	; 0xa0
 8008a5e:	18fb      	adds	r3, r7, r3
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	2380      	movs	r3, #128	; 0x80
 8008a64:	005b      	lsls	r3, r3, #1
 8008a66:	4013      	ands	r3, r2
 8008a68:	d00b      	beq.n	8008a82 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2284      	movs	r2, #132	; 0x84
 8008a76:	589b      	ldr	r3, [r3, r2]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	431a      	orrs	r2, r3
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2184      	movs	r1, #132	; 0x84
 8008a80:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a82:	23a4      	movs	r3, #164	; 0xa4
 8008a84:	18fb      	adds	r3, r7, r3
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2202      	movs	r2, #2
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	d011      	beq.n	8008ab2 <HAL_UART_IRQHandler+0xf6>
 8008a8e:	239c      	movs	r3, #156	; 0x9c
 8008a90:	18fb      	adds	r3, r7, r3
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2201      	movs	r2, #1
 8008a96:	4013      	ands	r3, r2
 8008a98:	d00b      	beq.n	8008ab2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2202      	movs	r2, #2
 8008aa0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2284      	movs	r2, #132	; 0x84
 8008aa6:	589b      	ldr	r3, [r3, r2]
 8008aa8:	2204      	movs	r2, #4
 8008aaa:	431a      	orrs	r2, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2184      	movs	r1, #132	; 0x84
 8008ab0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ab2:	23a4      	movs	r3, #164	; 0xa4
 8008ab4:	18fb      	adds	r3, r7, r3
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2204      	movs	r2, #4
 8008aba:	4013      	ands	r3, r2
 8008abc:	d011      	beq.n	8008ae2 <HAL_UART_IRQHandler+0x126>
 8008abe:	239c      	movs	r3, #156	; 0x9c
 8008ac0:	18fb      	adds	r3, r7, r3
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	4013      	ands	r3, r2
 8008ac8:	d00b      	beq.n	8008ae2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2204      	movs	r2, #4
 8008ad0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2284      	movs	r2, #132	; 0x84
 8008ad6:	589b      	ldr	r3, [r3, r2]
 8008ad8:	2202      	movs	r2, #2
 8008ada:	431a      	orrs	r2, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2184      	movs	r1, #132	; 0x84
 8008ae0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008ae2:	23a4      	movs	r3, #164	; 0xa4
 8008ae4:	18fb      	adds	r3, r7, r3
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2208      	movs	r2, #8
 8008aea:	4013      	ands	r3, r2
 8008aec:	d017      	beq.n	8008b1e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008aee:	23a0      	movs	r3, #160	; 0xa0
 8008af0:	18fb      	adds	r3, r7, r3
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2220      	movs	r2, #32
 8008af6:	4013      	ands	r3, r2
 8008af8:	d105      	bne.n	8008b06 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008afa:	239c      	movs	r3, #156	; 0x9c
 8008afc:	18fb      	adds	r3, r7, r3
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2201      	movs	r2, #1
 8008b02:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008b04:	d00b      	beq.n	8008b1e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	2208      	movs	r2, #8
 8008b0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2284      	movs	r2, #132	; 0x84
 8008b12:	589b      	ldr	r3, [r3, r2]
 8008b14:	2208      	movs	r2, #8
 8008b16:	431a      	orrs	r2, r3
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2184      	movs	r1, #132	; 0x84
 8008b1c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008b1e:	23a4      	movs	r3, #164	; 0xa4
 8008b20:	18fb      	adds	r3, r7, r3
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	2380      	movs	r3, #128	; 0x80
 8008b26:	011b      	lsls	r3, r3, #4
 8008b28:	4013      	ands	r3, r2
 8008b2a:	d013      	beq.n	8008b54 <HAL_UART_IRQHandler+0x198>
 8008b2c:	23a0      	movs	r3, #160	; 0xa0
 8008b2e:	18fb      	adds	r3, r7, r3
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	2380      	movs	r3, #128	; 0x80
 8008b34:	04db      	lsls	r3, r3, #19
 8008b36:	4013      	ands	r3, r2
 8008b38:	d00c      	beq.n	8008b54 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2280      	movs	r2, #128	; 0x80
 8008b40:	0112      	lsls	r2, r2, #4
 8008b42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2284      	movs	r2, #132	; 0x84
 8008b48:	589b      	ldr	r3, [r3, r2]
 8008b4a:	2220      	movs	r2, #32
 8008b4c:	431a      	orrs	r2, r3
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2184      	movs	r1, #132	; 0x84
 8008b52:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2284      	movs	r2, #132	; 0x84
 8008b58:	589b      	ldr	r3, [r3, r2]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d100      	bne.n	8008b60 <HAL_UART_IRQHandler+0x1a4>
 8008b5e:	e201      	b.n	8008f64 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008b60:	23a4      	movs	r3, #164	; 0xa4
 8008b62:	18fb      	adds	r3, r7, r3
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2220      	movs	r2, #32
 8008b68:	4013      	ands	r3, r2
 8008b6a:	d00e      	beq.n	8008b8a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008b6c:	23a0      	movs	r3, #160	; 0xa0
 8008b6e:	18fb      	adds	r3, r7, r3
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2220      	movs	r2, #32
 8008b74:	4013      	ands	r3, r2
 8008b76:	d008      	beq.n	8008b8a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d004      	beq.n	8008b8a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	0010      	movs	r0, r2
 8008b88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2284      	movs	r2, #132	; 0x84
 8008b8e:	589b      	ldr	r3, [r3, r2]
 8008b90:	2194      	movs	r1, #148	; 0x94
 8008b92:	187a      	adds	r2, r7, r1
 8008b94:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	2240      	movs	r2, #64	; 0x40
 8008b9e:	4013      	ands	r3, r2
 8008ba0:	2b40      	cmp	r3, #64	; 0x40
 8008ba2:	d004      	beq.n	8008bae <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008ba4:	187b      	adds	r3, r7, r1
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2228      	movs	r2, #40	; 0x28
 8008baa:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008bac:	d047      	beq.n	8008c3e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	0018      	movs	r0, r3
 8008bb2:	f000 ff2f 	bl	8009a14 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	2240      	movs	r2, #64	; 0x40
 8008bbe:	4013      	ands	r3, r2
 8008bc0:	2b40      	cmp	r3, #64	; 0x40
 8008bc2:	d137      	bne.n	8008c34 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bc4:	f3ef 8310 	mrs	r3, PRIMASK
 8008bc8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8008bca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bcc:	2090      	movs	r0, #144	; 0x90
 8008bce:	183a      	adds	r2, r7, r0
 8008bd0:	6013      	str	r3, [r2, #0]
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bd8:	f383 8810 	msr	PRIMASK, r3
}
 8008bdc:	46c0      	nop			; (mov r8, r8)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	689a      	ldr	r2, [r3, #8]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2140      	movs	r1, #64	; 0x40
 8008bea:	438a      	bics	r2, r1
 8008bec:	609a      	str	r2, [r3, #8]
 8008bee:	183b      	adds	r3, r7, r0
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008bf6:	f383 8810 	msr	PRIMASK, r3
}
 8008bfa:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d012      	beq.n	8008c2a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c08:	4a14      	ldr	r2, [pc, #80]	; (8008c5c <HAL_UART_IRQHandler+0x2a0>)
 8008c0a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c10:	0018      	movs	r0, r3
 8008c12:	f7fb fc3d 	bl	8004490 <HAL_DMA_Abort_IT>
 8008c16:	1e03      	subs	r3, r0, #0
 8008c18:	d01a      	beq.n	8008c50 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c24:	0018      	movs	r0, r3
 8008c26:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c28:	e012      	b.n	8008c50 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	0018      	movs	r0, r3
 8008c2e:	f000 f9af 	bl	8008f90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c32:	e00d      	b.n	8008c50 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	0018      	movs	r0, r3
 8008c38:	f000 f9aa 	bl	8008f90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c3c:	e008      	b.n	8008c50 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	0018      	movs	r0, r3
 8008c42:	f000 f9a5 	bl	8008f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2284      	movs	r2, #132	; 0x84
 8008c4a:	2100      	movs	r1, #0
 8008c4c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8008c4e:	e189      	b.n	8008f64 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c50:	46c0      	nop			; (mov r8, r8)
    return;
 8008c52:	e187      	b.n	8008f64 <HAL_UART_IRQHandler+0x5a8>
 8008c54:	0000080f 	.word	0x0000080f
 8008c58:	04000120 	.word	0x04000120
 8008c5c:	08009add 	.word	0x08009add

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d000      	beq.n	8008c6a <HAL_UART_IRQHandler+0x2ae>
 8008c68:	e13b      	b.n	8008ee2 <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008c6a:	23a4      	movs	r3, #164	; 0xa4
 8008c6c:	18fb      	adds	r3, r7, r3
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2210      	movs	r2, #16
 8008c72:	4013      	ands	r3, r2
 8008c74:	d100      	bne.n	8008c78 <HAL_UART_IRQHandler+0x2bc>
 8008c76:	e134      	b.n	8008ee2 <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008c78:	23a0      	movs	r3, #160	; 0xa0
 8008c7a:	18fb      	adds	r3, r7, r3
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	2210      	movs	r2, #16
 8008c80:	4013      	ands	r3, r2
 8008c82:	d100      	bne.n	8008c86 <HAL_UART_IRQHandler+0x2ca>
 8008c84:	e12d      	b.n	8008ee2 <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2210      	movs	r2, #16
 8008c8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	2240      	movs	r2, #64	; 0x40
 8008c96:	4013      	ands	r3, r2
 8008c98:	2b40      	cmp	r3, #64	; 0x40
 8008c9a:	d000      	beq.n	8008c9e <HAL_UART_IRQHandler+0x2e2>
 8008c9c:	e0a1      	b.n	8008de2 <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	685a      	ldr	r2, [r3, #4]
 8008ca6:	217e      	movs	r1, #126	; 0x7e
 8008ca8:	187b      	adds	r3, r7, r1
 8008caa:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8008cac:	187b      	adds	r3, r7, r1
 8008cae:	881b      	ldrh	r3, [r3, #0]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d100      	bne.n	8008cb6 <HAL_UART_IRQHandler+0x2fa>
 8008cb4:	e158      	b.n	8008f68 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2258      	movs	r2, #88	; 0x58
 8008cba:	5a9b      	ldrh	r3, [r3, r2]
 8008cbc:	187a      	adds	r2, r7, r1
 8008cbe:	8812      	ldrh	r2, [r2, #0]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d300      	bcc.n	8008cc6 <HAL_UART_IRQHandler+0x30a>
 8008cc4:	e150      	b.n	8008f68 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	187a      	adds	r2, r7, r1
 8008cca:	215a      	movs	r1, #90	; 0x5a
 8008ccc:	8812      	ldrh	r2, [r2, #0]
 8008cce:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2220      	movs	r2, #32
 8008cda:	4013      	ands	r3, r2
 8008cdc:	d16f      	bne.n	8008dbe <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cde:	f3ef 8310 	mrs	r3, PRIMASK
 8008ce2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ce6:	67bb      	str	r3, [r7, #120]	; 0x78
 8008ce8:	2301      	movs	r3, #1
 8008cea:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cee:	f383 8810 	msr	PRIMASK, r3
}
 8008cf2:	46c0      	nop			; (mov r8, r8)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	499e      	ldr	r1, [pc, #632]	; (8008f78 <HAL_UART_IRQHandler+0x5bc>)
 8008d00:	400a      	ands	r2, r1
 8008d02:	601a      	str	r2, [r3, #0]
 8008d04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d06:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0a:	f383 8810 	msr	PRIMASK, r3
}
 8008d0e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d10:	f3ef 8310 	mrs	r3, PRIMASK
 8008d14:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8008d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d18:	677b      	str	r3, [r7, #116]	; 0x74
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d20:	f383 8810 	msr	PRIMASK, r3
}
 8008d24:	46c0      	nop			; (mov r8, r8)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	689a      	ldr	r2, [r3, #8]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2101      	movs	r1, #1
 8008d32:	438a      	bics	r2, r1
 8008d34:	609a      	str	r2, [r3, #8]
 8008d36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d38:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d3c:	f383 8810 	msr	PRIMASK, r3
}
 8008d40:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d42:	f3ef 8310 	mrs	r3, PRIMASK
 8008d46:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8008d48:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d4a:	673b      	str	r3, [r7, #112]	; 0x70
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d52:	f383 8810 	msr	PRIMASK, r3
}
 8008d56:	46c0      	nop			; (mov r8, r8)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	689a      	ldr	r2, [r3, #8]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	2140      	movs	r1, #64	; 0x40
 8008d64:	438a      	bics	r2, r1
 8008d66:	609a      	str	r2, [r3, #8]
 8008d68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d6a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d6e:	f383 8810 	msr	PRIMASK, r3
}
 8008d72:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2280      	movs	r2, #128	; 0x80
 8008d78:	2120      	movs	r1, #32
 8008d7a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d82:	f3ef 8310 	mrs	r3, PRIMASK
 8008d86:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8008d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d92:	f383 8810 	msr	PRIMASK, r3
}
 8008d96:	46c0      	nop			; (mov r8, r8)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2110      	movs	r1, #16
 8008da4:	438a      	bics	r2, r1
 8008da6:	601a      	str	r2, [r3, #0]
 8008da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008daa:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008dae:	f383 8810 	msr	PRIMASK, r3
}
 8008db2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008db8:	0018      	movs	r0, r3
 8008dba:	f7fb fb29 	bl	8004410 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2202      	movs	r2, #2
 8008dc2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2258      	movs	r2, #88	; 0x58
 8008dc8:	5a9a      	ldrh	r2, [r3, r2]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	215a      	movs	r1, #90	; 0x5a
 8008dce:	5a5b      	ldrh	r3, [r3, r1]
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	1ad3      	subs	r3, r2, r3
 8008dd4:	b29a      	uxth	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	0011      	movs	r1, r2
 8008dda:	0018      	movs	r0, r3
 8008ddc:	f000 f8e0 	bl	8008fa0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008de0:	e0c2      	b.n	8008f68 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2258      	movs	r2, #88	; 0x58
 8008de6:	5a99      	ldrh	r1, [r3, r2]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	225a      	movs	r2, #90	; 0x5a
 8008dec:	5a9b      	ldrh	r3, [r3, r2]
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	208e      	movs	r0, #142	; 0x8e
 8008df2:	183b      	adds	r3, r7, r0
 8008df4:	1a8a      	subs	r2, r1, r2
 8008df6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	225a      	movs	r2, #90	; 0x5a
 8008dfc:	5a9b      	ldrh	r3, [r3, r2]
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d100      	bne.n	8008e06 <HAL_UART_IRQHandler+0x44a>
 8008e04:	e0b2      	b.n	8008f6c <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8008e06:	183b      	adds	r3, r7, r0
 8008e08:	881b      	ldrh	r3, [r3, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d100      	bne.n	8008e10 <HAL_UART_IRQHandler+0x454>
 8008e0e:	e0ad      	b.n	8008f6c <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e10:	f3ef 8310 	mrs	r3, PRIMASK
 8008e14:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e16:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e18:	2488      	movs	r4, #136	; 0x88
 8008e1a:	193a      	adds	r2, r7, r4
 8008e1c:	6013      	str	r3, [r2, #0]
 8008e1e:	2301      	movs	r3, #1
 8008e20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	f383 8810 	msr	PRIMASK, r3
}
 8008e28:	46c0      	nop			; (mov r8, r8)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4951      	ldr	r1, [pc, #324]	; (8008f7c <HAL_UART_IRQHandler+0x5c0>)
 8008e36:	400a      	ands	r2, r1
 8008e38:	601a      	str	r2, [r3, #0]
 8008e3a:	193b      	adds	r3, r7, r4
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	f383 8810 	msr	PRIMASK, r3
}
 8008e46:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e48:	f3ef 8310 	mrs	r3, PRIMASK
 8008e4c:	61bb      	str	r3, [r7, #24]
  return(result);
 8008e4e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e50:	2484      	movs	r4, #132	; 0x84
 8008e52:	193a      	adds	r2, r7, r4
 8008e54:	6013      	str	r3, [r2, #0]
 8008e56:	2301      	movs	r3, #1
 8008e58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	f383 8810 	msr	PRIMASK, r3
}
 8008e60:	46c0      	nop			; (mov r8, r8)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	689a      	ldr	r2, [r3, #8]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2101      	movs	r1, #1
 8008e6e:	438a      	bics	r2, r1
 8008e70:	609a      	str	r2, [r3, #8]
 8008e72:	193b      	adds	r3, r7, r4
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e78:	6a3b      	ldr	r3, [r7, #32]
 8008e7a:	f383 8810 	msr	PRIMASK, r3
}
 8008e7e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2280      	movs	r2, #128	; 0x80
 8008e84:	2120      	movs	r1, #32
 8008e86:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2200      	movs	r2, #0
 8008e92:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e94:	f3ef 8310 	mrs	r3, PRIMASK
 8008e98:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e9c:	2480      	movs	r4, #128	; 0x80
 8008e9e:	193a      	adds	r2, r7, r4
 8008ea0:	6013      	str	r3, [r2, #0]
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea8:	f383 8810 	msr	PRIMASK, r3
}
 8008eac:	46c0      	nop			; (mov r8, r8)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	2110      	movs	r1, #16
 8008eba:	438a      	bics	r2, r1
 8008ebc:	601a      	str	r2, [r3, #0]
 8008ebe:	193b      	adds	r3, r7, r4
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec6:	f383 8810 	msr	PRIMASK, r3
}
 8008eca:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2202      	movs	r2, #2
 8008ed0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ed2:	183b      	adds	r3, r7, r0
 8008ed4:	881a      	ldrh	r2, [r3, #0]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	0011      	movs	r1, r2
 8008eda:	0018      	movs	r0, r3
 8008edc:	f000 f860 	bl	8008fa0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008ee0:	e044      	b.n	8008f6c <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008ee2:	23a4      	movs	r3, #164	; 0xa4
 8008ee4:	18fb      	adds	r3, r7, r3
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	2380      	movs	r3, #128	; 0x80
 8008eea:	035b      	lsls	r3, r3, #13
 8008eec:	4013      	ands	r3, r2
 8008eee:	d010      	beq.n	8008f12 <HAL_UART_IRQHandler+0x556>
 8008ef0:	239c      	movs	r3, #156	; 0x9c
 8008ef2:	18fb      	adds	r3, r7, r3
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	2380      	movs	r3, #128	; 0x80
 8008ef8:	03db      	lsls	r3, r3, #15
 8008efa:	4013      	ands	r3, r2
 8008efc:	d009      	beq.n	8008f12 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2280      	movs	r2, #128	; 0x80
 8008f04:	0352      	lsls	r2, r2, #13
 8008f06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	0018      	movs	r0, r3
 8008f0c:	f000 ffec 	bl	8009ee8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008f10:	e02f      	b.n	8008f72 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008f12:	23a4      	movs	r3, #164	; 0xa4
 8008f14:	18fb      	adds	r3, r7, r3
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2280      	movs	r2, #128	; 0x80
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	d00f      	beq.n	8008f3e <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008f1e:	23a0      	movs	r3, #160	; 0xa0
 8008f20:	18fb      	adds	r3, r7, r3
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	2280      	movs	r2, #128	; 0x80
 8008f26:	4013      	ands	r3, r2
 8008f28:	d009      	beq.n	8008f3e <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d01e      	beq.n	8008f70 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	0010      	movs	r0, r2
 8008f3a:	4798      	blx	r3
    }
    return;
 8008f3c:	e018      	b.n	8008f70 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008f3e:	23a4      	movs	r3, #164	; 0xa4
 8008f40:	18fb      	adds	r3, r7, r3
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	2240      	movs	r2, #64	; 0x40
 8008f46:	4013      	ands	r3, r2
 8008f48:	d013      	beq.n	8008f72 <HAL_UART_IRQHandler+0x5b6>
 8008f4a:	23a0      	movs	r3, #160	; 0xa0
 8008f4c:	18fb      	adds	r3, r7, r3
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2240      	movs	r2, #64	; 0x40
 8008f52:	4013      	ands	r3, r2
 8008f54:	d00d      	beq.n	8008f72 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	0018      	movs	r0, r3
 8008f5a:	f000 fdd6 	bl	8009b0a <UART_EndTransmit_IT>
    return;
 8008f5e:	e008      	b.n	8008f72 <HAL_UART_IRQHandler+0x5b6>
      return;
 8008f60:	46c0      	nop			; (mov r8, r8)
 8008f62:	e006      	b.n	8008f72 <HAL_UART_IRQHandler+0x5b6>
    return;
 8008f64:	46c0      	nop			; (mov r8, r8)
 8008f66:	e004      	b.n	8008f72 <HAL_UART_IRQHandler+0x5b6>
      return;
 8008f68:	46c0      	nop			; (mov r8, r8)
 8008f6a:	e002      	b.n	8008f72 <HAL_UART_IRQHandler+0x5b6>
      return;
 8008f6c:	46c0      	nop			; (mov r8, r8)
 8008f6e:	e000      	b.n	8008f72 <HAL_UART_IRQHandler+0x5b6>
    return;
 8008f70:	46c0      	nop			; (mov r8, r8)
  }

}
 8008f72:	46bd      	mov	sp, r7
 8008f74:	b02b      	add	sp, #172	; 0xac
 8008f76:	bd90      	pop	{r4, r7, pc}
 8008f78:	fffffeff 	.word	0xfffffeff
 8008f7c:	fffffedf 	.word	0xfffffedf

08008f80 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008f88:	46c0      	nop			; (mov r8, r8)
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	b002      	add	sp, #8
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008f98:	46c0      	nop			; (mov r8, r8)
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	b002      	add	sp, #8
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	000a      	movs	r2, r1
 8008faa:	1cbb      	adds	r3, r7, #2
 8008fac:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008fae:	46c0      	nop			; (mov r8, r8)
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	b002      	add	sp, #8
 8008fb4:	bd80      	pop	{r7, pc}
	...

08008fb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008fb8:	b5b0      	push	{r4, r5, r7, lr}
 8008fba:	b08e      	sub	sp, #56	; 0x38
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008fc0:	231a      	movs	r3, #26
 8008fc2:	2218      	movs	r2, #24
 8008fc4:	189b      	adds	r3, r3, r2
 8008fc6:	19db      	adds	r3, r3, r7
 8008fc8:	2200      	movs	r2, #0
 8008fca:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	689a      	ldr	r2, [r3, #8]
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	691b      	ldr	r3, [r3, #16]
 8008fd4:	431a      	orrs	r2, r3
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	695b      	ldr	r3, [r3, #20]
 8008fda:	431a      	orrs	r2, r3
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	69db      	ldr	r3, [r3, #28]
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4ac3      	ldr	r2, [pc, #780]	; (80092f8 <UART_SetConfig+0x340>)
 8008fec:	4013      	ands	r3, r2
 8008fee:	0019      	movs	r1, r3
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ff6:	430a      	orrs	r2, r1
 8008ff8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ffa:	69fb      	ldr	r3, [r7, #28]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	4abe      	ldr	r2, [pc, #760]	; (80092fc <UART_SetConfig+0x344>)
 8009002:	4013      	ands	r3, r2
 8009004:	0019      	movs	r1, r3
 8009006:	69fb      	ldr	r3, [r7, #28]
 8009008:	68da      	ldr	r2, [r3, #12]
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	430a      	orrs	r2, r1
 8009010:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	699b      	ldr	r3, [r3, #24]
 8009016:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009018:	69fb      	ldr	r3, [r7, #28]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4ab8      	ldr	r2, [pc, #736]	; (8009300 <UART_SetConfig+0x348>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d004      	beq.n	800902c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	6a1b      	ldr	r3, [r3, #32]
 8009026:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009028:	4313      	orrs	r3, r2
 800902a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800902c:	69fb      	ldr	r3, [r7, #28]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	4ab4      	ldr	r2, [pc, #720]	; (8009304 <UART_SetConfig+0x34c>)
 8009034:	4013      	ands	r3, r2
 8009036:	0019      	movs	r1, r3
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800903e:	430a      	orrs	r2, r1
 8009040:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4ab0      	ldr	r2, [pc, #704]	; (8009308 <UART_SetConfig+0x350>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d131      	bne.n	80090b0 <UART_SetConfig+0xf8>
 800904c:	4baf      	ldr	r3, [pc, #700]	; (800930c <UART_SetConfig+0x354>)
 800904e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009050:	2203      	movs	r2, #3
 8009052:	4013      	ands	r3, r2
 8009054:	2b03      	cmp	r3, #3
 8009056:	d01d      	beq.n	8009094 <UART_SetConfig+0xdc>
 8009058:	d823      	bhi.n	80090a2 <UART_SetConfig+0xea>
 800905a:	2b02      	cmp	r3, #2
 800905c:	d00c      	beq.n	8009078 <UART_SetConfig+0xc0>
 800905e:	d820      	bhi.n	80090a2 <UART_SetConfig+0xea>
 8009060:	2b00      	cmp	r3, #0
 8009062:	d002      	beq.n	800906a <UART_SetConfig+0xb2>
 8009064:	2b01      	cmp	r3, #1
 8009066:	d00e      	beq.n	8009086 <UART_SetConfig+0xce>
 8009068:	e01b      	b.n	80090a2 <UART_SetConfig+0xea>
 800906a:	231b      	movs	r3, #27
 800906c:	2218      	movs	r2, #24
 800906e:	189b      	adds	r3, r3, r2
 8009070:	19db      	adds	r3, r3, r7
 8009072:	2201      	movs	r2, #1
 8009074:	701a      	strb	r2, [r3, #0]
 8009076:	e0b4      	b.n	80091e2 <UART_SetConfig+0x22a>
 8009078:	231b      	movs	r3, #27
 800907a:	2218      	movs	r2, #24
 800907c:	189b      	adds	r3, r3, r2
 800907e:	19db      	adds	r3, r3, r7
 8009080:	2202      	movs	r2, #2
 8009082:	701a      	strb	r2, [r3, #0]
 8009084:	e0ad      	b.n	80091e2 <UART_SetConfig+0x22a>
 8009086:	231b      	movs	r3, #27
 8009088:	2218      	movs	r2, #24
 800908a:	189b      	adds	r3, r3, r2
 800908c:	19db      	adds	r3, r3, r7
 800908e:	2204      	movs	r2, #4
 8009090:	701a      	strb	r2, [r3, #0]
 8009092:	e0a6      	b.n	80091e2 <UART_SetConfig+0x22a>
 8009094:	231b      	movs	r3, #27
 8009096:	2218      	movs	r2, #24
 8009098:	189b      	adds	r3, r3, r2
 800909a:	19db      	adds	r3, r3, r7
 800909c:	2208      	movs	r2, #8
 800909e:	701a      	strb	r2, [r3, #0]
 80090a0:	e09f      	b.n	80091e2 <UART_SetConfig+0x22a>
 80090a2:	231b      	movs	r3, #27
 80090a4:	2218      	movs	r2, #24
 80090a6:	189b      	adds	r3, r3, r2
 80090a8:	19db      	adds	r3, r3, r7
 80090aa:	2210      	movs	r2, #16
 80090ac:	701a      	strb	r2, [r3, #0]
 80090ae:	e098      	b.n	80091e2 <UART_SetConfig+0x22a>
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a96      	ldr	r2, [pc, #600]	; (8009310 <UART_SetConfig+0x358>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d131      	bne.n	800911e <UART_SetConfig+0x166>
 80090ba:	4b94      	ldr	r3, [pc, #592]	; (800930c <UART_SetConfig+0x354>)
 80090bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090be:	220c      	movs	r2, #12
 80090c0:	4013      	ands	r3, r2
 80090c2:	2b0c      	cmp	r3, #12
 80090c4:	d01d      	beq.n	8009102 <UART_SetConfig+0x14a>
 80090c6:	d823      	bhi.n	8009110 <UART_SetConfig+0x158>
 80090c8:	2b08      	cmp	r3, #8
 80090ca:	d00c      	beq.n	80090e6 <UART_SetConfig+0x12e>
 80090cc:	d820      	bhi.n	8009110 <UART_SetConfig+0x158>
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d002      	beq.n	80090d8 <UART_SetConfig+0x120>
 80090d2:	2b04      	cmp	r3, #4
 80090d4:	d00e      	beq.n	80090f4 <UART_SetConfig+0x13c>
 80090d6:	e01b      	b.n	8009110 <UART_SetConfig+0x158>
 80090d8:	231b      	movs	r3, #27
 80090da:	2218      	movs	r2, #24
 80090dc:	189b      	adds	r3, r3, r2
 80090de:	19db      	adds	r3, r3, r7
 80090e0:	2200      	movs	r2, #0
 80090e2:	701a      	strb	r2, [r3, #0]
 80090e4:	e07d      	b.n	80091e2 <UART_SetConfig+0x22a>
 80090e6:	231b      	movs	r3, #27
 80090e8:	2218      	movs	r2, #24
 80090ea:	189b      	adds	r3, r3, r2
 80090ec:	19db      	adds	r3, r3, r7
 80090ee:	2202      	movs	r2, #2
 80090f0:	701a      	strb	r2, [r3, #0]
 80090f2:	e076      	b.n	80091e2 <UART_SetConfig+0x22a>
 80090f4:	231b      	movs	r3, #27
 80090f6:	2218      	movs	r2, #24
 80090f8:	189b      	adds	r3, r3, r2
 80090fa:	19db      	adds	r3, r3, r7
 80090fc:	2204      	movs	r2, #4
 80090fe:	701a      	strb	r2, [r3, #0]
 8009100:	e06f      	b.n	80091e2 <UART_SetConfig+0x22a>
 8009102:	231b      	movs	r3, #27
 8009104:	2218      	movs	r2, #24
 8009106:	189b      	adds	r3, r3, r2
 8009108:	19db      	adds	r3, r3, r7
 800910a:	2208      	movs	r2, #8
 800910c:	701a      	strb	r2, [r3, #0]
 800910e:	e068      	b.n	80091e2 <UART_SetConfig+0x22a>
 8009110:	231b      	movs	r3, #27
 8009112:	2218      	movs	r2, #24
 8009114:	189b      	adds	r3, r3, r2
 8009116:	19db      	adds	r3, r3, r7
 8009118:	2210      	movs	r2, #16
 800911a:	701a      	strb	r2, [r3, #0]
 800911c:	e061      	b.n	80091e2 <UART_SetConfig+0x22a>
 800911e:	69fb      	ldr	r3, [r7, #28]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a7c      	ldr	r2, [pc, #496]	; (8009314 <UART_SetConfig+0x35c>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d106      	bne.n	8009136 <UART_SetConfig+0x17e>
 8009128:	231b      	movs	r3, #27
 800912a:	2218      	movs	r2, #24
 800912c:	189b      	adds	r3, r3, r2
 800912e:	19db      	adds	r3, r3, r7
 8009130:	2200      	movs	r2, #0
 8009132:	701a      	strb	r2, [r3, #0]
 8009134:	e055      	b.n	80091e2 <UART_SetConfig+0x22a>
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a77      	ldr	r2, [pc, #476]	; (8009318 <UART_SetConfig+0x360>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d106      	bne.n	800914e <UART_SetConfig+0x196>
 8009140:	231b      	movs	r3, #27
 8009142:	2218      	movs	r2, #24
 8009144:	189b      	adds	r3, r3, r2
 8009146:	19db      	adds	r3, r3, r7
 8009148:	2200      	movs	r2, #0
 800914a:	701a      	strb	r2, [r3, #0]
 800914c:	e049      	b.n	80091e2 <UART_SetConfig+0x22a>
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a6b      	ldr	r2, [pc, #428]	; (8009300 <UART_SetConfig+0x348>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d13e      	bne.n	80091d6 <UART_SetConfig+0x21e>
 8009158:	4b6c      	ldr	r3, [pc, #432]	; (800930c <UART_SetConfig+0x354>)
 800915a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800915c:	23c0      	movs	r3, #192	; 0xc0
 800915e:	011b      	lsls	r3, r3, #4
 8009160:	4013      	ands	r3, r2
 8009162:	22c0      	movs	r2, #192	; 0xc0
 8009164:	0112      	lsls	r2, r2, #4
 8009166:	4293      	cmp	r3, r2
 8009168:	d027      	beq.n	80091ba <UART_SetConfig+0x202>
 800916a:	22c0      	movs	r2, #192	; 0xc0
 800916c:	0112      	lsls	r2, r2, #4
 800916e:	4293      	cmp	r3, r2
 8009170:	d82a      	bhi.n	80091c8 <UART_SetConfig+0x210>
 8009172:	2280      	movs	r2, #128	; 0x80
 8009174:	0112      	lsls	r2, r2, #4
 8009176:	4293      	cmp	r3, r2
 8009178:	d011      	beq.n	800919e <UART_SetConfig+0x1e6>
 800917a:	2280      	movs	r2, #128	; 0x80
 800917c:	0112      	lsls	r2, r2, #4
 800917e:	4293      	cmp	r3, r2
 8009180:	d822      	bhi.n	80091c8 <UART_SetConfig+0x210>
 8009182:	2b00      	cmp	r3, #0
 8009184:	d004      	beq.n	8009190 <UART_SetConfig+0x1d8>
 8009186:	2280      	movs	r2, #128	; 0x80
 8009188:	00d2      	lsls	r2, r2, #3
 800918a:	4293      	cmp	r3, r2
 800918c:	d00e      	beq.n	80091ac <UART_SetConfig+0x1f4>
 800918e:	e01b      	b.n	80091c8 <UART_SetConfig+0x210>
 8009190:	231b      	movs	r3, #27
 8009192:	2218      	movs	r2, #24
 8009194:	189b      	adds	r3, r3, r2
 8009196:	19db      	adds	r3, r3, r7
 8009198:	2200      	movs	r2, #0
 800919a:	701a      	strb	r2, [r3, #0]
 800919c:	e021      	b.n	80091e2 <UART_SetConfig+0x22a>
 800919e:	231b      	movs	r3, #27
 80091a0:	2218      	movs	r2, #24
 80091a2:	189b      	adds	r3, r3, r2
 80091a4:	19db      	adds	r3, r3, r7
 80091a6:	2202      	movs	r2, #2
 80091a8:	701a      	strb	r2, [r3, #0]
 80091aa:	e01a      	b.n	80091e2 <UART_SetConfig+0x22a>
 80091ac:	231b      	movs	r3, #27
 80091ae:	2218      	movs	r2, #24
 80091b0:	189b      	adds	r3, r3, r2
 80091b2:	19db      	adds	r3, r3, r7
 80091b4:	2204      	movs	r2, #4
 80091b6:	701a      	strb	r2, [r3, #0]
 80091b8:	e013      	b.n	80091e2 <UART_SetConfig+0x22a>
 80091ba:	231b      	movs	r3, #27
 80091bc:	2218      	movs	r2, #24
 80091be:	189b      	adds	r3, r3, r2
 80091c0:	19db      	adds	r3, r3, r7
 80091c2:	2208      	movs	r2, #8
 80091c4:	701a      	strb	r2, [r3, #0]
 80091c6:	e00c      	b.n	80091e2 <UART_SetConfig+0x22a>
 80091c8:	231b      	movs	r3, #27
 80091ca:	2218      	movs	r2, #24
 80091cc:	189b      	adds	r3, r3, r2
 80091ce:	19db      	adds	r3, r3, r7
 80091d0:	2210      	movs	r2, #16
 80091d2:	701a      	strb	r2, [r3, #0]
 80091d4:	e005      	b.n	80091e2 <UART_SetConfig+0x22a>
 80091d6:	231b      	movs	r3, #27
 80091d8:	2218      	movs	r2, #24
 80091da:	189b      	adds	r3, r3, r2
 80091dc:	19db      	adds	r3, r3, r7
 80091de:	2210      	movs	r2, #16
 80091e0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80091e2:	69fb      	ldr	r3, [r7, #28]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a46      	ldr	r2, [pc, #280]	; (8009300 <UART_SetConfig+0x348>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d000      	beq.n	80091ee <UART_SetConfig+0x236>
 80091ec:	e09a      	b.n	8009324 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80091ee:	231b      	movs	r3, #27
 80091f0:	2218      	movs	r2, #24
 80091f2:	189b      	adds	r3, r3, r2
 80091f4:	19db      	adds	r3, r3, r7
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	2b08      	cmp	r3, #8
 80091fa:	d01d      	beq.n	8009238 <UART_SetConfig+0x280>
 80091fc:	dc20      	bgt.n	8009240 <UART_SetConfig+0x288>
 80091fe:	2b04      	cmp	r3, #4
 8009200:	d015      	beq.n	800922e <UART_SetConfig+0x276>
 8009202:	dc1d      	bgt.n	8009240 <UART_SetConfig+0x288>
 8009204:	2b00      	cmp	r3, #0
 8009206:	d002      	beq.n	800920e <UART_SetConfig+0x256>
 8009208:	2b02      	cmp	r3, #2
 800920a:	d005      	beq.n	8009218 <UART_SetConfig+0x260>
 800920c:	e018      	b.n	8009240 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800920e:	f7fe facd 	bl	80077ac <HAL_RCC_GetPCLK1Freq>
 8009212:	0003      	movs	r3, r0
 8009214:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009216:	e01c      	b.n	8009252 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009218:	4b3c      	ldr	r3, [pc, #240]	; (800930c <UART_SetConfig+0x354>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2210      	movs	r2, #16
 800921e:	4013      	ands	r3, r2
 8009220:	d002      	beq.n	8009228 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8009222:	4b3e      	ldr	r3, [pc, #248]	; (800931c <UART_SetConfig+0x364>)
 8009224:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009226:	e014      	b.n	8009252 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8009228:	4b3d      	ldr	r3, [pc, #244]	; (8009320 <UART_SetConfig+0x368>)
 800922a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800922c:	e011      	b.n	8009252 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800922e:	f7fe fa0d 	bl	800764c <HAL_RCC_GetSysClockFreq>
 8009232:	0003      	movs	r3, r0
 8009234:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009236:	e00c      	b.n	8009252 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009238:	2380      	movs	r3, #128	; 0x80
 800923a:	021b      	lsls	r3, r3, #8
 800923c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800923e:	e008      	b.n	8009252 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8009240:	2300      	movs	r3, #0
 8009242:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009244:	231a      	movs	r3, #26
 8009246:	2218      	movs	r2, #24
 8009248:	189b      	adds	r3, r3, r2
 800924a:	19db      	adds	r3, r3, r7
 800924c:	2201      	movs	r2, #1
 800924e:	701a      	strb	r2, [r3, #0]
        break;
 8009250:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009254:	2b00      	cmp	r3, #0
 8009256:	d100      	bne.n	800925a <UART_SetConfig+0x2a2>
 8009258:	e133      	b.n	80094c2 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	685a      	ldr	r2, [r3, #4]
 800925e:	0013      	movs	r3, r2
 8009260:	005b      	lsls	r3, r3, #1
 8009262:	189b      	adds	r3, r3, r2
 8009264:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009266:	429a      	cmp	r2, r3
 8009268:	d305      	bcc.n	8009276 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800926a:	69fb      	ldr	r3, [r7, #28]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009272:	429a      	cmp	r2, r3
 8009274:	d906      	bls.n	8009284 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8009276:	231a      	movs	r3, #26
 8009278:	2218      	movs	r2, #24
 800927a:	189b      	adds	r3, r3, r2
 800927c:	19db      	adds	r3, r3, r7
 800927e:	2201      	movs	r2, #1
 8009280:	701a      	strb	r2, [r3, #0]
 8009282:	e11e      	b.n	80094c2 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009286:	613b      	str	r3, [r7, #16]
 8009288:	2300      	movs	r3, #0
 800928a:	617b      	str	r3, [r7, #20]
 800928c:	6939      	ldr	r1, [r7, #16]
 800928e:	697a      	ldr	r2, [r7, #20]
 8009290:	000b      	movs	r3, r1
 8009292:	0e1b      	lsrs	r3, r3, #24
 8009294:	0010      	movs	r0, r2
 8009296:	0205      	lsls	r5, r0, #8
 8009298:	431d      	orrs	r5, r3
 800929a:	000b      	movs	r3, r1
 800929c:	021c      	lsls	r4, r3, #8
 800929e:	69fb      	ldr	r3, [r7, #28]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	085b      	lsrs	r3, r3, #1
 80092a4:	60bb      	str	r3, [r7, #8]
 80092a6:	2300      	movs	r3, #0
 80092a8:	60fb      	str	r3, [r7, #12]
 80092aa:	68b8      	ldr	r0, [r7, #8]
 80092ac:	68f9      	ldr	r1, [r7, #12]
 80092ae:	1900      	adds	r0, r0, r4
 80092b0:	4169      	adcs	r1, r5
 80092b2:	69fb      	ldr	r3, [r7, #28]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	603b      	str	r3, [r7, #0]
 80092b8:	2300      	movs	r3, #0
 80092ba:	607b      	str	r3, [r7, #4]
 80092bc:	683a      	ldr	r2, [r7, #0]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f7f7 f898 	bl	80003f4 <__aeabi_uldivmod>
 80092c4:	0002      	movs	r2, r0
 80092c6:	000b      	movs	r3, r1
 80092c8:	0013      	movs	r3, r2
 80092ca:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80092cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092ce:	23c0      	movs	r3, #192	; 0xc0
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d309      	bcc.n	80092ea <UART_SetConfig+0x332>
 80092d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092d8:	2380      	movs	r3, #128	; 0x80
 80092da:	035b      	lsls	r3, r3, #13
 80092dc:	429a      	cmp	r2, r3
 80092de:	d204      	bcs.n	80092ea <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092e6:	60da      	str	r2, [r3, #12]
 80092e8:	e0eb      	b.n	80094c2 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80092ea:	231a      	movs	r3, #26
 80092ec:	2218      	movs	r2, #24
 80092ee:	189b      	adds	r3, r3, r2
 80092f0:	19db      	adds	r3, r3, r7
 80092f2:	2201      	movs	r2, #1
 80092f4:	701a      	strb	r2, [r3, #0]
 80092f6:	e0e4      	b.n	80094c2 <UART_SetConfig+0x50a>
 80092f8:	efff69f3 	.word	0xefff69f3
 80092fc:	ffffcfff 	.word	0xffffcfff
 8009300:	40004800 	.word	0x40004800
 8009304:	fffff4ff 	.word	0xfffff4ff
 8009308:	40013800 	.word	0x40013800
 800930c:	40021000 	.word	0x40021000
 8009310:	40004400 	.word	0x40004400
 8009314:	40004c00 	.word	0x40004c00
 8009318:	40005000 	.word	0x40005000
 800931c:	003d0900 	.word	0x003d0900
 8009320:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	69da      	ldr	r2, [r3, #28]
 8009328:	2380      	movs	r3, #128	; 0x80
 800932a:	021b      	lsls	r3, r3, #8
 800932c:	429a      	cmp	r2, r3
 800932e:	d000      	beq.n	8009332 <UART_SetConfig+0x37a>
 8009330:	e070      	b.n	8009414 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8009332:	231b      	movs	r3, #27
 8009334:	2218      	movs	r2, #24
 8009336:	189b      	adds	r3, r3, r2
 8009338:	19db      	adds	r3, r3, r7
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	2b08      	cmp	r3, #8
 800933e:	d822      	bhi.n	8009386 <UART_SetConfig+0x3ce>
 8009340:	009a      	lsls	r2, r3, #2
 8009342:	4b67      	ldr	r3, [pc, #412]	; (80094e0 <UART_SetConfig+0x528>)
 8009344:	18d3      	adds	r3, r2, r3
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800934a:	f7fe fa2f 	bl	80077ac <HAL_RCC_GetPCLK1Freq>
 800934e:	0003      	movs	r3, r0
 8009350:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009352:	e021      	b.n	8009398 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009354:	f7fe fa40 	bl	80077d8 <HAL_RCC_GetPCLK2Freq>
 8009358:	0003      	movs	r3, r0
 800935a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800935c:	e01c      	b.n	8009398 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800935e:	4b61      	ldr	r3, [pc, #388]	; (80094e4 <UART_SetConfig+0x52c>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2210      	movs	r2, #16
 8009364:	4013      	ands	r3, r2
 8009366:	d002      	beq.n	800936e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8009368:	4b5f      	ldr	r3, [pc, #380]	; (80094e8 <UART_SetConfig+0x530>)
 800936a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800936c:	e014      	b.n	8009398 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800936e:	4b5f      	ldr	r3, [pc, #380]	; (80094ec <UART_SetConfig+0x534>)
 8009370:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009372:	e011      	b.n	8009398 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009374:	f7fe f96a 	bl	800764c <HAL_RCC_GetSysClockFreq>
 8009378:	0003      	movs	r3, r0
 800937a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800937c:	e00c      	b.n	8009398 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800937e:	2380      	movs	r3, #128	; 0x80
 8009380:	021b      	lsls	r3, r3, #8
 8009382:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009384:	e008      	b.n	8009398 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8009386:	2300      	movs	r3, #0
 8009388:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800938a:	231a      	movs	r3, #26
 800938c:	2218      	movs	r2, #24
 800938e:	189b      	adds	r3, r3, r2
 8009390:	19db      	adds	r3, r3, r7
 8009392:	2201      	movs	r2, #1
 8009394:	701a      	strb	r2, [r3, #0]
        break;
 8009396:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800939a:	2b00      	cmp	r3, #0
 800939c:	d100      	bne.n	80093a0 <UART_SetConfig+0x3e8>
 800939e:	e090      	b.n	80094c2 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80093a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a2:	005a      	lsls	r2, r3, #1
 80093a4:	69fb      	ldr	r3, [r7, #28]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	085b      	lsrs	r3, r3, #1
 80093aa:	18d2      	adds	r2, r2, r3
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	0019      	movs	r1, r3
 80093b2:	0010      	movs	r0, r2
 80093b4:	f7f6 fea8 	bl	8000108 <__udivsi3>
 80093b8:	0003      	movs	r3, r0
 80093ba:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093be:	2b0f      	cmp	r3, #15
 80093c0:	d921      	bls.n	8009406 <UART_SetConfig+0x44e>
 80093c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093c4:	2380      	movs	r3, #128	; 0x80
 80093c6:	025b      	lsls	r3, r3, #9
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d21c      	bcs.n	8009406 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80093cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ce:	b29a      	uxth	r2, r3
 80093d0:	200e      	movs	r0, #14
 80093d2:	2418      	movs	r4, #24
 80093d4:	1903      	adds	r3, r0, r4
 80093d6:	19db      	adds	r3, r3, r7
 80093d8:	210f      	movs	r1, #15
 80093da:	438a      	bics	r2, r1
 80093dc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80093de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e0:	085b      	lsrs	r3, r3, #1
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	2207      	movs	r2, #7
 80093e6:	4013      	ands	r3, r2
 80093e8:	b299      	uxth	r1, r3
 80093ea:	1903      	adds	r3, r0, r4
 80093ec:	19db      	adds	r3, r3, r7
 80093ee:	1902      	adds	r2, r0, r4
 80093f0:	19d2      	adds	r2, r2, r7
 80093f2:	8812      	ldrh	r2, [r2, #0]
 80093f4:	430a      	orrs	r2, r1
 80093f6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	1902      	adds	r2, r0, r4
 80093fe:	19d2      	adds	r2, r2, r7
 8009400:	8812      	ldrh	r2, [r2, #0]
 8009402:	60da      	str	r2, [r3, #12]
 8009404:	e05d      	b.n	80094c2 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8009406:	231a      	movs	r3, #26
 8009408:	2218      	movs	r2, #24
 800940a:	189b      	adds	r3, r3, r2
 800940c:	19db      	adds	r3, r3, r7
 800940e:	2201      	movs	r2, #1
 8009410:	701a      	strb	r2, [r3, #0]
 8009412:	e056      	b.n	80094c2 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009414:	231b      	movs	r3, #27
 8009416:	2218      	movs	r2, #24
 8009418:	189b      	adds	r3, r3, r2
 800941a:	19db      	adds	r3, r3, r7
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	2b08      	cmp	r3, #8
 8009420:	d822      	bhi.n	8009468 <UART_SetConfig+0x4b0>
 8009422:	009a      	lsls	r2, r3, #2
 8009424:	4b32      	ldr	r3, [pc, #200]	; (80094f0 <UART_SetConfig+0x538>)
 8009426:	18d3      	adds	r3, r2, r3
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800942c:	f7fe f9be 	bl	80077ac <HAL_RCC_GetPCLK1Freq>
 8009430:	0003      	movs	r3, r0
 8009432:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009434:	e021      	b.n	800947a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009436:	f7fe f9cf 	bl	80077d8 <HAL_RCC_GetPCLK2Freq>
 800943a:	0003      	movs	r3, r0
 800943c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800943e:	e01c      	b.n	800947a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009440:	4b28      	ldr	r3, [pc, #160]	; (80094e4 <UART_SetConfig+0x52c>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2210      	movs	r2, #16
 8009446:	4013      	ands	r3, r2
 8009448:	d002      	beq.n	8009450 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800944a:	4b27      	ldr	r3, [pc, #156]	; (80094e8 <UART_SetConfig+0x530>)
 800944c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800944e:	e014      	b.n	800947a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8009450:	4b26      	ldr	r3, [pc, #152]	; (80094ec <UART_SetConfig+0x534>)
 8009452:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009454:	e011      	b.n	800947a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009456:	f7fe f8f9 	bl	800764c <HAL_RCC_GetSysClockFreq>
 800945a:	0003      	movs	r3, r0
 800945c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800945e:	e00c      	b.n	800947a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009460:	2380      	movs	r3, #128	; 0x80
 8009462:	021b      	lsls	r3, r3, #8
 8009464:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009466:	e008      	b.n	800947a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8009468:	2300      	movs	r3, #0
 800946a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800946c:	231a      	movs	r3, #26
 800946e:	2218      	movs	r2, #24
 8009470:	189b      	adds	r3, r3, r2
 8009472:	19db      	adds	r3, r3, r7
 8009474:	2201      	movs	r2, #1
 8009476:	701a      	strb	r2, [r3, #0]
        break;
 8009478:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800947a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800947c:	2b00      	cmp	r3, #0
 800947e:	d020      	beq.n	80094c2 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	085a      	lsrs	r2, r3, #1
 8009486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009488:	18d2      	adds	r2, r2, r3
 800948a:	69fb      	ldr	r3, [r7, #28]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	0019      	movs	r1, r3
 8009490:	0010      	movs	r0, r2
 8009492:	f7f6 fe39 	bl	8000108 <__udivsi3>
 8009496:	0003      	movs	r3, r0
 8009498:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800949a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800949c:	2b0f      	cmp	r3, #15
 800949e:	d90a      	bls.n	80094b6 <UART_SetConfig+0x4fe>
 80094a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094a2:	2380      	movs	r3, #128	; 0x80
 80094a4:	025b      	lsls	r3, r3, #9
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d205      	bcs.n	80094b6 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80094aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ac:	b29a      	uxth	r2, r3
 80094ae:	69fb      	ldr	r3, [r7, #28]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	60da      	str	r2, [r3, #12]
 80094b4:	e005      	b.n	80094c2 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80094b6:	231a      	movs	r3, #26
 80094b8:	2218      	movs	r2, #24
 80094ba:	189b      	adds	r3, r3, r2
 80094bc:	19db      	adds	r3, r3, r7
 80094be:	2201      	movs	r2, #1
 80094c0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80094c2:	69fb      	ldr	r3, [r7, #28]
 80094c4:	2200      	movs	r2, #0
 80094c6:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80094c8:	69fb      	ldr	r3, [r7, #28]
 80094ca:	2200      	movs	r2, #0
 80094cc:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80094ce:	231a      	movs	r3, #26
 80094d0:	2218      	movs	r2, #24
 80094d2:	189b      	adds	r3, r3, r2
 80094d4:	19db      	adds	r3, r3, r7
 80094d6:	781b      	ldrb	r3, [r3, #0]
}
 80094d8:	0018      	movs	r0, r3
 80094da:	46bd      	mov	sp, r7
 80094dc:	b00e      	add	sp, #56	; 0x38
 80094de:	bdb0      	pop	{r4, r5, r7, pc}
 80094e0:	0800a6b0 	.word	0x0800a6b0
 80094e4:	40021000 	.word	0x40021000
 80094e8:	003d0900 	.word	0x003d0900
 80094ec:	00f42400 	.word	0x00f42400
 80094f0:	0800a6d4 	.word	0x0800a6d4

080094f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009500:	2201      	movs	r2, #1
 8009502:	4013      	ands	r3, r2
 8009504:	d00b      	beq.n	800951e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	4a4a      	ldr	r2, [pc, #296]	; (8009638 <UART_AdvFeatureConfig+0x144>)
 800950e:	4013      	ands	r3, r2
 8009510:	0019      	movs	r1, r3
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	430a      	orrs	r2, r1
 800951c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009522:	2202      	movs	r2, #2
 8009524:	4013      	ands	r3, r2
 8009526:	d00b      	beq.n	8009540 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	4a43      	ldr	r2, [pc, #268]	; (800963c <UART_AdvFeatureConfig+0x148>)
 8009530:	4013      	ands	r3, r2
 8009532:	0019      	movs	r1, r3
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	430a      	orrs	r2, r1
 800953e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009544:	2204      	movs	r2, #4
 8009546:	4013      	ands	r3, r2
 8009548:	d00b      	beq.n	8009562 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	4a3b      	ldr	r2, [pc, #236]	; (8009640 <UART_AdvFeatureConfig+0x14c>)
 8009552:	4013      	ands	r3, r2
 8009554:	0019      	movs	r1, r3
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	430a      	orrs	r2, r1
 8009560:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009566:	2208      	movs	r2, #8
 8009568:	4013      	ands	r3, r2
 800956a:	d00b      	beq.n	8009584 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	4a34      	ldr	r2, [pc, #208]	; (8009644 <UART_AdvFeatureConfig+0x150>)
 8009574:	4013      	ands	r3, r2
 8009576:	0019      	movs	r1, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	430a      	orrs	r2, r1
 8009582:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009588:	2210      	movs	r2, #16
 800958a:	4013      	ands	r3, r2
 800958c:	d00b      	beq.n	80095a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	4a2c      	ldr	r2, [pc, #176]	; (8009648 <UART_AdvFeatureConfig+0x154>)
 8009596:	4013      	ands	r3, r2
 8009598:	0019      	movs	r1, r3
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	430a      	orrs	r2, r1
 80095a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095aa:	2220      	movs	r2, #32
 80095ac:	4013      	ands	r3, r2
 80095ae:	d00b      	beq.n	80095c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	4a25      	ldr	r2, [pc, #148]	; (800964c <UART_AdvFeatureConfig+0x158>)
 80095b8:	4013      	ands	r3, r2
 80095ba:	0019      	movs	r1, r3
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	430a      	orrs	r2, r1
 80095c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095cc:	2240      	movs	r2, #64	; 0x40
 80095ce:	4013      	ands	r3, r2
 80095d0:	d01d      	beq.n	800960e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	4a1d      	ldr	r2, [pc, #116]	; (8009650 <UART_AdvFeatureConfig+0x15c>)
 80095da:	4013      	ands	r3, r2
 80095dc:	0019      	movs	r1, r3
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	430a      	orrs	r2, r1
 80095e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80095ee:	2380      	movs	r3, #128	; 0x80
 80095f0:	035b      	lsls	r3, r3, #13
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d10b      	bne.n	800960e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	4a15      	ldr	r2, [pc, #84]	; (8009654 <UART_AdvFeatureConfig+0x160>)
 80095fe:	4013      	ands	r3, r2
 8009600:	0019      	movs	r1, r3
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	430a      	orrs	r2, r1
 800960c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009612:	2280      	movs	r2, #128	; 0x80
 8009614:	4013      	ands	r3, r2
 8009616:	d00b      	beq.n	8009630 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	4a0e      	ldr	r2, [pc, #56]	; (8009658 <UART_AdvFeatureConfig+0x164>)
 8009620:	4013      	ands	r3, r2
 8009622:	0019      	movs	r1, r3
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	430a      	orrs	r2, r1
 800962e:	605a      	str	r2, [r3, #4]
  }
}
 8009630:	46c0      	nop			; (mov r8, r8)
 8009632:	46bd      	mov	sp, r7
 8009634:	b002      	add	sp, #8
 8009636:	bd80      	pop	{r7, pc}
 8009638:	fffdffff 	.word	0xfffdffff
 800963c:	fffeffff 	.word	0xfffeffff
 8009640:	fffbffff 	.word	0xfffbffff
 8009644:	ffff7fff 	.word	0xffff7fff
 8009648:	ffffefff 	.word	0xffffefff
 800964c:	ffffdfff 	.word	0xffffdfff
 8009650:	ffefffff 	.word	0xffefffff
 8009654:	ff9fffff 	.word	0xff9fffff
 8009658:	fff7ffff 	.word	0xfff7ffff

0800965c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b092      	sub	sp, #72	; 0x48
 8009660:	af02      	add	r7, sp, #8
 8009662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2284      	movs	r2, #132	; 0x84
 8009668:	2100      	movs	r1, #0
 800966a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800966c:	f7fa f950 	bl	8003910 <HAL_GetTick>
 8009670:	0003      	movs	r3, r0
 8009672:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	2208      	movs	r2, #8
 800967c:	4013      	ands	r3, r2
 800967e:	2b08      	cmp	r3, #8
 8009680:	d12c      	bne.n	80096dc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009684:	2280      	movs	r2, #128	; 0x80
 8009686:	0391      	lsls	r1, r2, #14
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	4a46      	ldr	r2, [pc, #280]	; (80097a4 <UART_CheckIdleState+0x148>)
 800968c:	9200      	str	r2, [sp, #0]
 800968e:	2200      	movs	r2, #0
 8009690:	f000 f88c 	bl	80097ac <UART_WaitOnFlagUntilTimeout>
 8009694:	1e03      	subs	r3, r0, #0
 8009696:	d021      	beq.n	80096dc <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009698:	f3ef 8310 	mrs	r3, PRIMASK
 800969c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800969e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80096a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80096a2:	2301      	movs	r3, #1
 80096a4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a8:	f383 8810 	msr	PRIMASK, r3
}
 80096ac:	46c0      	nop			; (mov r8, r8)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2180      	movs	r1, #128	; 0x80
 80096ba:	438a      	bics	r2, r1
 80096bc:	601a      	str	r2, [r3, #0]
 80096be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c4:	f383 8810 	msr	PRIMASK, r3
}
 80096c8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2220      	movs	r2, #32
 80096ce:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2278      	movs	r2, #120	; 0x78
 80096d4:	2100      	movs	r1, #0
 80096d6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096d8:	2303      	movs	r3, #3
 80096da:	e05f      	b.n	800979c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2204      	movs	r2, #4
 80096e4:	4013      	ands	r3, r2
 80096e6:	2b04      	cmp	r3, #4
 80096e8:	d146      	bne.n	8009778 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096ec:	2280      	movs	r2, #128	; 0x80
 80096ee:	03d1      	lsls	r1, r2, #15
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	4a2c      	ldr	r2, [pc, #176]	; (80097a4 <UART_CheckIdleState+0x148>)
 80096f4:	9200      	str	r2, [sp, #0]
 80096f6:	2200      	movs	r2, #0
 80096f8:	f000 f858 	bl	80097ac <UART_WaitOnFlagUntilTimeout>
 80096fc:	1e03      	subs	r3, r0, #0
 80096fe:	d03b      	beq.n	8009778 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009700:	f3ef 8310 	mrs	r3, PRIMASK
 8009704:	60fb      	str	r3, [r7, #12]
  return(result);
 8009706:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009708:	637b      	str	r3, [r7, #52]	; 0x34
 800970a:	2301      	movs	r3, #1
 800970c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	f383 8810 	msr	PRIMASK, r3
}
 8009714:	46c0      	nop			; (mov r8, r8)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4921      	ldr	r1, [pc, #132]	; (80097a8 <UART_CheckIdleState+0x14c>)
 8009722:	400a      	ands	r2, r1
 8009724:	601a      	str	r2, [r3, #0]
 8009726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009728:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	f383 8810 	msr	PRIMASK, r3
}
 8009730:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009732:	f3ef 8310 	mrs	r3, PRIMASK
 8009736:	61bb      	str	r3, [r7, #24]
  return(result);
 8009738:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800973a:	633b      	str	r3, [r7, #48]	; 0x30
 800973c:	2301      	movs	r3, #1
 800973e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009740:	69fb      	ldr	r3, [r7, #28]
 8009742:	f383 8810 	msr	PRIMASK, r3
}
 8009746:	46c0      	nop			; (mov r8, r8)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	689a      	ldr	r2, [r3, #8]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	2101      	movs	r1, #1
 8009754:	438a      	bics	r2, r1
 8009756:	609a      	str	r2, [r3, #8]
 8009758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800975c:	6a3b      	ldr	r3, [r7, #32]
 800975e:	f383 8810 	msr	PRIMASK, r3
}
 8009762:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2280      	movs	r2, #128	; 0x80
 8009768:	2120      	movs	r1, #32
 800976a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2278      	movs	r2, #120	; 0x78
 8009770:	2100      	movs	r1, #0
 8009772:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009774:	2303      	movs	r3, #3
 8009776:	e011      	b.n	800979c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2220      	movs	r2, #32
 800977c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2280      	movs	r2, #128	; 0x80
 8009782:	2120      	movs	r1, #32
 8009784:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2200      	movs	r2, #0
 800978a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2278      	movs	r2, #120	; 0x78
 8009796:	2100      	movs	r1, #0
 8009798:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800979a:	2300      	movs	r3, #0
}
 800979c:	0018      	movs	r0, r3
 800979e:	46bd      	mov	sp, r7
 80097a0:	b010      	add	sp, #64	; 0x40
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	01ffffff 	.word	0x01ffffff
 80097a8:	fffffedf 	.word	0xfffffedf

080097ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b084      	sub	sp, #16
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	603b      	str	r3, [r7, #0]
 80097b8:	1dfb      	adds	r3, r7, #7
 80097ba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097bc:	e04b      	b.n	8009856 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097be:	69bb      	ldr	r3, [r7, #24]
 80097c0:	3301      	adds	r3, #1
 80097c2:	d048      	beq.n	8009856 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097c4:	f7fa f8a4 	bl	8003910 <HAL_GetTick>
 80097c8:	0002      	movs	r2, r0
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	1ad3      	subs	r3, r2, r3
 80097ce:	69ba      	ldr	r2, [r7, #24]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d302      	bcc.n	80097da <UART_WaitOnFlagUntilTimeout+0x2e>
 80097d4:	69bb      	ldr	r3, [r7, #24]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d101      	bne.n	80097de <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80097da:	2303      	movs	r3, #3
 80097dc:	e04b      	b.n	8009876 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2204      	movs	r2, #4
 80097e6:	4013      	ands	r3, r2
 80097e8:	d035      	beq.n	8009856 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	69db      	ldr	r3, [r3, #28]
 80097f0:	2208      	movs	r2, #8
 80097f2:	4013      	ands	r3, r2
 80097f4:	2b08      	cmp	r3, #8
 80097f6:	d111      	bne.n	800981c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2208      	movs	r2, #8
 80097fe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	0018      	movs	r0, r3
 8009804:	f000 f906 	bl	8009a14 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2284      	movs	r2, #132	; 0x84
 800980c:	2108      	movs	r1, #8
 800980e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2278      	movs	r2, #120	; 0x78
 8009814:	2100      	movs	r1, #0
 8009816:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8009818:	2301      	movs	r3, #1
 800981a:	e02c      	b.n	8009876 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	69da      	ldr	r2, [r3, #28]
 8009822:	2380      	movs	r3, #128	; 0x80
 8009824:	011b      	lsls	r3, r3, #4
 8009826:	401a      	ands	r2, r3
 8009828:	2380      	movs	r3, #128	; 0x80
 800982a:	011b      	lsls	r3, r3, #4
 800982c:	429a      	cmp	r2, r3
 800982e:	d112      	bne.n	8009856 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2280      	movs	r2, #128	; 0x80
 8009836:	0112      	lsls	r2, r2, #4
 8009838:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	0018      	movs	r0, r3
 800983e:	f000 f8e9 	bl	8009a14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2284      	movs	r2, #132	; 0x84
 8009846:	2120      	movs	r1, #32
 8009848:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2278      	movs	r2, #120	; 0x78
 800984e:	2100      	movs	r1, #0
 8009850:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009852:	2303      	movs	r3, #3
 8009854:	e00f      	b.n	8009876 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	69db      	ldr	r3, [r3, #28]
 800985c:	68ba      	ldr	r2, [r7, #8]
 800985e:	4013      	ands	r3, r2
 8009860:	68ba      	ldr	r2, [r7, #8]
 8009862:	1ad3      	subs	r3, r2, r3
 8009864:	425a      	negs	r2, r3
 8009866:	4153      	adcs	r3, r2
 8009868:	b2db      	uxtb	r3, r3
 800986a:	001a      	movs	r2, r3
 800986c:	1dfb      	adds	r3, r7, #7
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	429a      	cmp	r2, r3
 8009872:	d0a4      	beq.n	80097be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009874:	2300      	movs	r3, #0
}
 8009876:	0018      	movs	r0, r3
 8009878:	46bd      	mov	sp, r7
 800987a:	b004      	add	sp, #16
 800987c:	bd80      	pop	{r7, pc}
	...

08009880 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b090      	sub	sp, #64	; 0x40
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	1dbb      	adds	r3, r7, #6
 800988c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	68ba      	ldr	r2, [r7, #8]
 8009892:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	1dba      	adds	r2, r7, #6
 8009898:	2158      	movs	r1, #88	; 0x58
 800989a:	8812      	ldrh	r2, [r2, #0]
 800989c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	1dba      	adds	r2, r7, #6
 80098a2:	215a      	movs	r1, #90	; 0x5a
 80098a4:	8812      	ldrh	r2, [r2, #0]
 80098a6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2200      	movs	r2, #0
 80098ac:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	689a      	ldr	r2, [r3, #8]
 80098b2:	2380      	movs	r3, #128	; 0x80
 80098b4:	015b      	lsls	r3, r3, #5
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d10d      	bne.n	80098d6 <UART_Start_Receive_IT+0x56>
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	691b      	ldr	r3, [r3, #16]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d104      	bne.n	80098cc <UART_Start_Receive_IT+0x4c>
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	225c      	movs	r2, #92	; 0x5c
 80098c6:	4950      	ldr	r1, [pc, #320]	; (8009a08 <UART_Start_Receive_IT+0x188>)
 80098c8:	5299      	strh	r1, [r3, r2]
 80098ca:	e02e      	b.n	800992a <UART_Start_Receive_IT+0xaa>
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	225c      	movs	r2, #92	; 0x5c
 80098d0:	21ff      	movs	r1, #255	; 0xff
 80098d2:	5299      	strh	r1, [r3, r2]
 80098d4:	e029      	b.n	800992a <UART_Start_Receive_IT+0xaa>
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d10d      	bne.n	80098fa <UART_Start_Receive_IT+0x7a>
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	691b      	ldr	r3, [r3, #16]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d104      	bne.n	80098f0 <UART_Start_Receive_IT+0x70>
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	225c      	movs	r2, #92	; 0x5c
 80098ea:	21ff      	movs	r1, #255	; 0xff
 80098ec:	5299      	strh	r1, [r3, r2]
 80098ee:	e01c      	b.n	800992a <UART_Start_Receive_IT+0xaa>
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	225c      	movs	r2, #92	; 0x5c
 80098f4:	217f      	movs	r1, #127	; 0x7f
 80098f6:	5299      	strh	r1, [r3, r2]
 80098f8:	e017      	b.n	800992a <UART_Start_Receive_IT+0xaa>
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	689a      	ldr	r2, [r3, #8]
 80098fe:	2380      	movs	r3, #128	; 0x80
 8009900:	055b      	lsls	r3, r3, #21
 8009902:	429a      	cmp	r2, r3
 8009904:	d10d      	bne.n	8009922 <UART_Start_Receive_IT+0xa2>
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	691b      	ldr	r3, [r3, #16]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d104      	bne.n	8009918 <UART_Start_Receive_IT+0x98>
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	225c      	movs	r2, #92	; 0x5c
 8009912:	217f      	movs	r1, #127	; 0x7f
 8009914:	5299      	strh	r1, [r3, r2]
 8009916:	e008      	b.n	800992a <UART_Start_Receive_IT+0xaa>
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	225c      	movs	r2, #92	; 0x5c
 800991c:	213f      	movs	r1, #63	; 0x3f
 800991e:	5299      	strh	r1, [r3, r2]
 8009920:	e003      	b.n	800992a <UART_Start_Receive_IT+0xaa>
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	225c      	movs	r2, #92	; 0x5c
 8009926:	2100      	movs	r1, #0
 8009928:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2284      	movs	r2, #132	; 0x84
 800992e:	2100      	movs	r1, #0
 8009930:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2280      	movs	r2, #128	; 0x80
 8009936:	2122      	movs	r1, #34	; 0x22
 8009938:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800993a:	f3ef 8310 	mrs	r3, PRIMASK
 800993e:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8009940:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009944:	2301      	movs	r3, #1
 8009946:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994a:	f383 8810 	msr	PRIMASK, r3
}
 800994e:	46c0      	nop			; (mov r8, r8)
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	689a      	ldr	r2, [r3, #8]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2101      	movs	r1, #1
 800995c:	430a      	orrs	r2, r1
 800995e:	609a      	str	r2, [r3, #8]
 8009960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009962:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009966:	f383 8810 	msr	PRIMASK, r3
}
 800996a:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	689a      	ldr	r2, [r3, #8]
 8009970:	2380      	movs	r3, #128	; 0x80
 8009972:	015b      	lsls	r3, r3, #5
 8009974:	429a      	cmp	r2, r3
 8009976:	d107      	bne.n	8009988 <UART_Start_Receive_IT+0x108>
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	691b      	ldr	r3, [r3, #16]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d103      	bne.n	8009988 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	4a22      	ldr	r2, [pc, #136]	; (8009a0c <UART_Start_Receive_IT+0x18c>)
 8009984:	669a      	str	r2, [r3, #104]	; 0x68
 8009986:	e002      	b.n	800998e <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	4a21      	ldr	r2, [pc, #132]	; (8009a10 <UART_Start_Receive_IT+0x190>)
 800998c:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	691b      	ldr	r3, [r3, #16]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d019      	beq.n	80099ca <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009996:	f3ef 8310 	mrs	r3, PRIMASK
 800999a:	61fb      	str	r3, [r7, #28]
  return(result);
 800999c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800999e:	637b      	str	r3, [r7, #52]	; 0x34
 80099a0:	2301      	movs	r3, #1
 80099a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099a4:	6a3b      	ldr	r3, [r7, #32]
 80099a6:	f383 8810 	msr	PRIMASK, r3
}
 80099aa:	46c0      	nop			; (mov r8, r8)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	2190      	movs	r1, #144	; 0x90
 80099b8:	0049      	lsls	r1, r1, #1
 80099ba:	430a      	orrs	r2, r1
 80099bc:	601a      	str	r2, [r3, #0]
 80099be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099c0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c4:	f383 8810 	msr	PRIMASK, r3
}
 80099c8:	e018      	b.n	80099fc <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099ca:	f3ef 8310 	mrs	r3, PRIMASK
 80099ce:	613b      	str	r3, [r7, #16]
  return(result);
 80099d0:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80099d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80099d4:	2301      	movs	r3, #1
 80099d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	f383 8810 	msr	PRIMASK, r3
}
 80099de:	46c0      	nop			; (mov r8, r8)
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	681a      	ldr	r2, [r3, #0]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	2120      	movs	r1, #32
 80099ec:	430a      	orrs	r2, r1
 80099ee:	601a      	str	r2, [r3, #0]
 80099f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099f4:	69bb      	ldr	r3, [r7, #24]
 80099f6:	f383 8810 	msr	PRIMASK, r3
}
 80099fa:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	0018      	movs	r0, r3
 8009a00:	46bd      	mov	sp, r7
 8009a02:	b010      	add	sp, #64	; 0x40
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	46c0      	nop			; (mov r8, r8)
 8009a08:	000001ff 	.word	0x000001ff
 8009a0c:	08009d25 	.word	0x08009d25
 8009a10:	08009b61 	.word	0x08009b61

08009a14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b08e      	sub	sp, #56	; 0x38
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a1c:	f3ef 8310 	mrs	r3, PRIMASK
 8009a20:	617b      	str	r3, [r7, #20]
  return(result);
 8009a22:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a24:	637b      	str	r3, [r7, #52]	; 0x34
 8009a26:	2301      	movs	r3, #1
 8009a28:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a2a:	69bb      	ldr	r3, [r7, #24]
 8009a2c:	f383 8810 	msr	PRIMASK, r3
}
 8009a30:	46c0      	nop			; (mov r8, r8)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4926      	ldr	r1, [pc, #152]	; (8009ad8 <UART_EndRxTransfer+0xc4>)
 8009a3e:	400a      	ands	r2, r1
 8009a40:	601a      	str	r2, [r3, #0]
 8009a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a46:	69fb      	ldr	r3, [r7, #28]
 8009a48:	f383 8810 	msr	PRIMASK, r3
}
 8009a4c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a4e:	f3ef 8310 	mrs	r3, PRIMASK
 8009a52:	623b      	str	r3, [r7, #32]
  return(result);
 8009a54:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a56:	633b      	str	r3, [r7, #48]	; 0x30
 8009a58:	2301      	movs	r3, #1
 8009a5a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5e:	f383 8810 	msr	PRIMASK, r3
}
 8009a62:	46c0      	nop			; (mov r8, r8)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	689a      	ldr	r2, [r3, #8]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2101      	movs	r1, #1
 8009a70:	438a      	bics	r2, r1
 8009a72:	609a      	str	r2, [r3, #8]
 8009a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a76:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7a:	f383 8810 	msr	PRIMASK, r3
}
 8009a7e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d118      	bne.n	8009aba <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a88:	f3ef 8310 	mrs	r3, PRIMASK
 8009a8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8009a8e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a92:	2301      	movs	r3, #1
 8009a94:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f383 8810 	msr	PRIMASK, r3
}
 8009a9c:	46c0      	nop			; (mov r8, r8)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	2110      	movs	r1, #16
 8009aaa:	438a      	bics	r2, r1
 8009aac:	601a      	str	r2, [r3, #0]
 8009aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	f383 8810 	msr	PRIMASK, r3
}
 8009ab8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2280      	movs	r2, #128	; 0x80
 8009abe:	2120      	movs	r1, #32
 8009ac0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009ace:	46c0      	nop			; (mov r8, r8)
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	b00e      	add	sp, #56	; 0x38
 8009ad4:	bd80      	pop	{r7, pc}
 8009ad6:	46c0      	nop			; (mov r8, r8)
 8009ad8:	fffffedf 	.word	0xfffffedf

08009adc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ae8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	225a      	movs	r2, #90	; 0x5a
 8009aee:	2100      	movs	r1, #0
 8009af0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2252      	movs	r2, #82	; 0x52
 8009af6:	2100      	movs	r1, #0
 8009af8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	0018      	movs	r0, r3
 8009afe:	f7ff fa47 	bl	8008f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b02:	46c0      	nop			; (mov r8, r8)
 8009b04:	46bd      	mov	sp, r7
 8009b06:	b004      	add	sp, #16
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b086      	sub	sp, #24
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b12:	f3ef 8310 	mrs	r3, PRIMASK
 8009b16:	60bb      	str	r3, [r7, #8]
  return(result);
 8009b18:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b1a:	617b      	str	r3, [r7, #20]
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f383 8810 	msr	PRIMASK, r3
}
 8009b26:	46c0      	nop			; (mov r8, r8)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	2140      	movs	r1, #64	; 0x40
 8009b34:	438a      	bics	r2, r1
 8009b36:	601a      	str	r2, [r3, #0]
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	f383 8810 	msr	PRIMASK, r3
}
 8009b42:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2220      	movs	r2, #32
 8009b48:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	0018      	movs	r0, r3
 8009b54:	f7ff fa14 	bl	8008f80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b58:	46c0      	nop			; (mov r8, r8)
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	b006      	add	sp, #24
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b094      	sub	sp, #80	; 0x50
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009b68:	204e      	movs	r0, #78	; 0x4e
 8009b6a:	183b      	adds	r3, r7, r0
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	215c      	movs	r1, #92	; 0x5c
 8009b70:	5a52      	ldrh	r2, [r2, r1]
 8009b72:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2280      	movs	r2, #128	; 0x80
 8009b78:	589b      	ldr	r3, [r3, r2]
 8009b7a:	2b22      	cmp	r3, #34	; 0x22
 8009b7c:	d000      	beq.n	8009b80 <UART_RxISR_8BIT+0x20>
 8009b7e:	e0bf      	b.n	8009d00 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b86:	214c      	movs	r1, #76	; 0x4c
 8009b88:	187b      	adds	r3, r7, r1
 8009b8a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009b8c:	187b      	adds	r3, r7, r1
 8009b8e:	881b      	ldrh	r3, [r3, #0]
 8009b90:	b2da      	uxtb	r2, r3
 8009b92:	183b      	adds	r3, r7, r0
 8009b94:	881b      	ldrh	r3, [r3, #0]
 8009b96:	b2d9      	uxtb	r1, r3
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b9c:	400a      	ands	r2, r1
 8009b9e:	b2d2      	uxtb	r2, r2
 8009ba0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ba6:	1c5a      	adds	r2, r3, #1
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	225a      	movs	r2, #90	; 0x5a
 8009bb0:	5a9b      	ldrh	r3, [r3, r2]
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	b299      	uxth	r1, r3
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	225a      	movs	r2, #90	; 0x5a
 8009bbc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	225a      	movs	r2, #90	; 0x5a
 8009bc2:	5a9b      	ldrh	r3, [r3, r2]
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d000      	beq.n	8009bcc <UART_RxISR_8BIT+0x6c>
 8009bca:	e0a1      	b.n	8009d10 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bcc:	f3ef 8310 	mrs	r3, PRIMASK
 8009bd0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009bd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bdc:	f383 8810 	msr	PRIMASK, r3
}
 8009be0:	46c0      	nop			; (mov r8, r8)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	494a      	ldr	r1, [pc, #296]	; (8009d18 <UART_RxISR_8BIT+0x1b8>)
 8009bee:	400a      	ands	r2, r1
 8009bf0:	601a      	str	r2, [r3, #0]
 8009bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf8:	f383 8810 	msr	PRIMASK, r3
}
 8009bfc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bfe:	f3ef 8310 	mrs	r3, PRIMASK
 8009c02:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8009c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c06:	647b      	str	r3, [r7, #68]	; 0x44
 8009c08:	2301      	movs	r3, #1
 8009c0a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c0e:	f383 8810 	msr	PRIMASK, r3
}
 8009c12:	46c0      	nop			; (mov r8, r8)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	689a      	ldr	r2, [r3, #8]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	2101      	movs	r1, #1
 8009c20:	438a      	bics	r2, r1
 8009c22:	609a      	str	r2, [r3, #8]
 8009c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c26:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c2a:	f383 8810 	msr	PRIMASK, r3
}
 8009c2e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2280      	movs	r2, #128	; 0x80
 8009c34:	2120      	movs	r1, #32
 8009c36:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2200      	movs	r2, #0
 8009c42:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a34      	ldr	r2, [pc, #208]	; (8009d1c <UART_RxISR_8BIT+0x1bc>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d01f      	beq.n	8009c8e <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	685a      	ldr	r2, [r3, #4]
 8009c54:	2380      	movs	r3, #128	; 0x80
 8009c56:	041b      	lsls	r3, r3, #16
 8009c58:	4013      	ands	r3, r2
 8009c5a:	d018      	beq.n	8009c8e <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c5c:	f3ef 8310 	mrs	r3, PRIMASK
 8009c60:	61bb      	str	r3, [r7, #24]
  return(result);
 8009c62:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009c64:	643b      	str	r3, [r7, #64]	; 0x40
 8009c66:	2301      	movs	r3, #1
 8009c68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c6a:	69fb      	ldr	r3, [r7, #28]
 8009c6c:	f383 8810 	msr	PRIMASK, r3
}
 8009c70:	46c0      	nop			; (mov r8, r8)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4928      	ldr	r1, [pc, #160]	; (8009d20 <UART_RxISR_8BIT+0x1c0>)
 8009c7e:	400a      	ands	r2, r1
 8009c80:	601a      	str	r2, [r3, #0]
 8009c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c84:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c86:	6a3b      	ldr	r3, [r7, #32]
 8009c88:	f383 8810 	msr	PRIMASK, r3
}
 8009c8c:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c92:	2b01      	cmp	r3, #1
 8009c94:	d12f      	bne.n	8009cf6 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c9c:	f3ef 8310 	mrs	r3, PRIMASK
 8009ca0:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ca2:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	f383 8810 	msr	PRIMASK, r3
}
 8009cb0:	46c0      	nop			; (mov r8, r8)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	2110      	movs	r1, #16
 8009cbe:	438a      	bics	r2, r1
 8009cc0:	601a      	str	r2, [r3, #0]
 8009cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	f383 8810 	msr	PRIMASK, r3
}
 8009ccc:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	69db      	ldr	r3, [r3, #28]
 8009cd4:	2210      	movs	r2, #16
 8009cd6:	4013      	ands	r3, r2
 8009cd8:	2b10      	cmp	r3, #16
 8009cda:	d103      	bne.n	8009ce4 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	2210      	movs	r2, #16
 8009ce2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2258      	movs	r2, #88	; 0x58
 8009ce8:	5a9a      	ldrh	r2, [r3, r2]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	0011      	movs	r1, r2
 8009cee:	0018      	movs	r0, r3
 8009cf0:	f7ff f956 	bl	8008fa0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009cf4:	e00c      	b.n	8009d10 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	0018      	movs	r0, r3
 8009cfa:	f7f9 fad3 	bl	80032a4 <HAL_UART_RxCpltCallback>
}
 8009cfe:	e007      	b.n	8009d10 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	699a      	ldr	r2, [r3, #24]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	2108      	movs	r1, #8
 8009d0c:	430a      	orrs	r2, r1
 8009d0e:	619a      	str	r2, [r3, #24]
}
 8009d10:	46c0      	nop			; (mov r8, r8)
 8009d12:	46bd      	mov	sp, r7
 8009d14:	b014      	add	sp, #80	; 0x50
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	fffffedf 	.word	0xfffffedf
 8009d1c:	40004800 	.word	0x40004800
 8009d20:	fbffffff 	.word	0xfbffffff

08009d24 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b094      	sub	sp, #80	; 0x50
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009d2c:	204e      	movs	r0, #78	; 0x4e
 8009d2e:	183b      	adds	r3, r7, r0
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	215c      	movs	r1, #92	; 0x5c
 8009d34:	5a52      	ldrh	r2, [r2, r1]
 8009d36:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2280      	movs	r2, #128	; 0x80
 8009d3c:	589b      	ldr	r3, [r3, r2]
 8009d3e:	2b22      	cmp	r3, #34	; 0x22
 8009d40:	d000      	beq.n	8009d44 <UART_RxISR_16BIT+0x20>
 8009d42:	e0bf      	b.n	8009ec4 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d4a:	214c      	movs	r1, #76	; 0x4c
 8009d4c:	187b      	adds	r3, r7, r1
 8009d4e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d54:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8009d56:	187b      	adds	r3, r7, r1
 8009d58:	183a      	adds	r2, r7, r0
 8009d5a:	881b      	ldrh	r3, [r3, #0]
 8009d5c:	8812      	ldrh	r2, [r2, #0]
 8009d5e:	4013      	ands	r3, r2
 8009d60:	b29a      	uxth	r2, r3
 8009d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d64:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d6a:	1c9a      	adds	r2, r3, #2
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	225a      	movs	r2, #90	; 0x5a
 8009d74:	5a9b      	ldrh	r3, [r3, r2]
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	3b01      	subs	r3, #1
 8009d7a:	b299      	uxth	r1, r3
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	225a      	movs	r2, #90	; 0x5a
 8009d80:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	225a      	movs	r2, #90	; 0x5a
 8009d86:	5a9b      	ldrh	r3, [r3, r2]
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d000      	beq.n	8009d90 <UART_RxISR_16BIT+0x6c>
 8009d8e:	e0a1      	b.n	8009ed4 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d90:	f3ef 8310 	mrs	r3, PRIMASK
 8009d94:	623b      	str	r3, [r7, #32]
  return(result);
 8009d96:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d98:	647b      	str	r3, [r7, #68]	; 0x44
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da0:	f383 8810 	msr	PRIMASK, r3
}
 8009da4:	46c0      	nop			; (mov r8, r8)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	494a      	ldr	r1, [pc, #296]	; (8009edc <UART_RxISR_16BIT+0x1b8>)
 8009db2:	400a      	ands	r2, r1
 8009db4:	601a      	str	r2, [r3, #0]
 8009db6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009db8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dbc:	f383 8810 	msr	PRIMASK, r3
}
 8009dc0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8009dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8009dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dca:	643b      	str	r3, [r7, #64]	; 0x40
 8009dcc:	2301      	movs	r3, #1
 8009dce:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd2:	f383 8810 	msr	PRIMASK, r3
}
 8009dd6:	46c0      	nop			; (mov r8, r8)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	689a      	ldr	r2, [r3, #8]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	2101      	movs	r1, #1
 8009de4:	438a      	bics	r2, r1
 8009de6:	609a      	str	r2, [r3, #8]
 8009de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dea:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dee:	f383 8810 	msr	PRIMASK, r3
}
 8009df2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2280      	movs	r2, #128	; 0x80
 8009df8:	2120      	movs	r1, #32
 8009dfa:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a34      	ldr	r2, [pc, #208]	; (8009ee0 <UART_RxISR_16BIT+0x1bc>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d01f      	beq.n	8009e52 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	685a      	ldr	r2, [r3, #4]
 8009e18:	2380      	movs	r3, #128	; 0x80
 8009e1a:	041b      	lsls	r3, r3, #16
 8009e1c:	4013      	ands	r3, r2
 8009e1e:	d018      	beq.n	8009e52 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e20:	f3ef 8310 	mrs	r3, PRIMASK
 8009e24:	617b      	str	r3, [r7, #20]
  return(result);
 8009e26:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e2e:	69bb      	ldr	r3, [r7, #24]
 8009e30:	f383 8810 	msr	PRIMASK, r3
}
 8009e34:	46c0      	nop			; (mov r8, r8)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4928      	ldr	r1, [pc, #160]	; (8009ee4 <UART_RxISR_16BIT+0x1c0>)
 8009e42:	400a      	ands	r2, r1
 8009e44:	601a      	str	r2, [r3, #0]
 8009e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e4a:	69fb      	ldr	r3, [r7, #28]
 8009e4c:	f383 8810 	msr	PRIMASK, r3
}
 8009e50:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d12f      	bne.n	8009eba <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e60:	f3ef 8310 	mrs	r3, PRIMASK
 8009e64:	60bb      	str	r3, [r7, #8]
  return(result);
 8009e66:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e68:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f383 8810 	msr	PRIMASK, r3
}
 8009e74:	46c0      	nop			; (mov r8, r8)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2110      	movs	r1, #16
 8009e82:	438a      	bics	r2, r1
 8009e84:	601a      	str	r2, [r3, #0]
 8009e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	f383 8810 	msr	PRIMASK, r3
}
 8009e90:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	69db      	ldr	r3, [r3, #28]
 8009e98:	2210      	movs	r2, #16
 8009e9a:	4013      	ands	r3, r2
 8009e9c:	2b10      	cmp	r3, #16
 8009e9e:	d103      	bne.n	8009ea8 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	2210      	movs	r2, #16
 8009ea6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2258      	movs	r2, #88	; 0x58
 8009eac:	5a9a      	ldrh	r2, [r3, r2]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	0011      	movs	r1, r2
 8009eb2:	0018      	movs	r0, r3
 8009eb4:	f7ff f874 	bl	8008fa0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009eb8:	e00c      	b.n	8009ed4 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	0018      	movs	r0, r3
 8009ebe:	f7f9 f9f1 	bl	80032a4 <HAL_UART_RxCpltCallback>
}
 8009ec2:	e007      	b.n	8009ed4 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	699a      	ldr	r2, [r3, #24]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	2108      	movs	r1, #8
 8009ed0:	430a      	orrs	r2, r1
 8009ed2:	619a      	str	r2, [r3, #24]
}
 8009ed4:	46c0      	nop			; (mov r8, r8)
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	b014      	add	sp, #80	; 0x50
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	fffffedf 	.word	0xfffffedf
 8009ee0:	40004800 	.word	0x40004800
 8009ee4:	fbffffff 	.word	0xfbffffff

08009ee8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009ef0:	46c0      	nop			; (mov r8, r8)
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	b002      	add	sp, #8
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <malloc>:
 8009ef8:	b510      	push	{r4, lr}
 8009efa:	4b03      	ldr	r3, [pc, #12]	; (8009f08 <malloc+0x10>)
 8009efc:	0001      	movs	r1, r0
 8009efe:	6818      	ldr	r0, [r3, #0]
 8009f00:	f000 f826 	bl	8009f50 <_malloc_r>
 8009f04:	bd10      	pop	{r4, pc}
 8009f06:	46c0      	nop			; (mov r8, r8)
 8009f08:	20000058 	.word	0x20000058

08009f0c <sbrk_aligned>:
 8009f0c:	b570      	push	{r4, r5, r6, lr}
 8009f0e:	4e0f      	ldr	r6, [pc, #60]	; (8009f4c <sbrk_aligned+0x40>)
 8009f10:	000d      	movs	r5, r1
 8009f12:	6831      	ldr	r1, [r6, #0]
 8009f14:	0004      	movs	r4, r0
 8009f16:	2900      	cmp	r1, #0
 8009f18:	d102      	bne.n	8009f20 <sbrk_aligned+0x14>
 8009f1a:	f000 f8b3 	bl	800a084 <_sbrk_r>
 8009f1e:	6030      	str	r0, [r6, #0]
 8009f20:	0029      	movs	r1, r5
 8009f22:	0020      	movs	r0, r4
 8009f24:	f000 f8ae 	bl	800a084 <_sbrk_r>
 8009f28:	1c43      	adds	r3, r0, #1
 8009f2a:	d00a      	beq.n	8009f42 <sbrk_aligned+0x36>
 8009f2c:	2303      	movs	r3, #3
 8009f2e:	1cc5      	adds	r5, r0, #3
 8009f30:	439d      	bics	r5, r3
 8009f32:	42a8      	cmp	r0, r5
 8009f34:	d007      	beq.n	8009f46 <sbrk_aligned+0x3a>
 8009f36:	1a29      	subs	r1, r5, r0
 8009f38:	0020      	movs	r0, r4
 8009f3a:	f000 f8a3 	bl	800a084 <_sbrk_r>
 8009f3e:	3001      	adds	r0, #1
 8009f40:	d101      	bne.n	8009f46 <sbrk_aligned+0x3a>
 8009f42:	2501      	movs	r5, #1
 8009f44:	426d      	negs	r5, r5
 8009f46:	0028      	movs	r0, r5
 8009f48:	bd70      	pop	{r4, r5, r6, pc}
 8009f4a:	46c0      	nop			; (mov r8, r8)
 8009f4c:	20000304 	.word	0x20000304

08009f50 <_malloc_r>:
 8009f50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f52:	2203      	movs	r2, #3
 8009f54:	1ccb      	adds	r3, r1, #3
 8009f56:	4393      	bics	r3, r2
 8009f58:	3308      	adds	r3, #8
 8009f5a:	0006      	movs	r6, r0
 8009f5c:	001f      	movs	r7, r3
 8009f5e:	2b0c      	cmp	r3, #12
 8009f60:	d238      	bcs.n	8009fd4 <_malloc_r+0x84>
 8009f62:	270c      	movs	r7, #12
 8009f64:	42b9      	cmp	r1, r7
 8009f66:	d837      	bhi.n	8009fd8 <_malloc_r+0x88>
 8009f68:	0030      	movs	r0, r6
 8009f6a:	f000 f873 	bl	800a054 <__malloc_lock>
 8009f6e:	4b38      	ldr	r3, [pc, #224]	; (800a050 <_malloc_r+0x100>)
 8009f70:	9300      	str	r3, [sp, #0]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	001c      	movs	r4, r3
 8009f76:	2c00      	cmp	r4, #0
 8009f78:	d133      	bne.n	8009fe2 <_malloc_r+0x92>
 8009f7a:	0039      	movs	r1, r7
 8009f7c:	0030      	movs	r0, r6
 8009f7e:	f7ff ffc5 	bl	8009f0c <sbrk_aligned>
 8009f82:	0004      	movs	r4, r0
 8009f84:	1c43      	adds	r3, r0, #1
 8009f86:	d15e      	bne.n	800a046 <_malloc_r+0xf6>
 8009f88:	9b00      	ldr	r3, [sp, #0]
 8009f8a:	681c      	ldr	r4, [r3, #0]
 8009f8c:	0025      	movs	r5, r4
 8009f8e:	2d00      	cmp	r5, #0
 8009f90:	d14e      	bne.n	800a030 <_malloc_r+0xe0>
 8009f92:	2c00      	cmp	r4, #0
 8009f94:	d051      	beq.n	800a03a <_malloc_r+0xea>
 8009f96:	6823      	ldr	r3, [r4, #0]
 8009f98:	0029      	movs	r1, r5
 8009f9a:	18e3      	adds	r3, r4, r3
 8009f9c:	0030      	movs	r0, r6
 8009f9e:	9301      	str	r3, [sp, #4]
 8009fa0:	f000 f870 	bl	800a084 <_sbrk_r>
 8009fa4:	9b01      	ldr	r3, [sp, #4]
 8009fa6:	4283      	cmp	r3, r0
 8009fa8:	d147      	bne.n	800a03a <_malloc_r+0xea>
 8009faa:	6823      	ldr	r3, [r4, #0]
 8009fac:	0030      	movs	r0, r6
 8009fae:	1aff      	subs	r7, r7, r3
 8009fb0:	0039      	movs	r1, r7
 8009fb2:	f7ff ffab 	bl	8009f0c <sbrk_aligned>
 8009fb6:	3001      	adds	r0, #1
 8009fb8:	d03f      	beq.n	800a03a <_malloc_r+0xea>
 8009fba:	6823      	ldr	r3, [r4, #0]
 8009fbc:	19db      	adds	r3, r3, r7
 8009fbe:	6023      	str	r3, [r4, #0]
 8009fc0:	9b00      	ldr	r3, [sp, #0]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d040      	beq.n	800a04a <_malloc_r+0xfa>
 8009fc8:	685a      	ldr	r2, [r3, #4]
 8009fca:	42a2      	cmp	r2, r4
 8009fcc:	d133      	bne.n	800a036 <_malloc_r+0xe6>
 8009fce:	2200      	movs	r2, #0
 8009fd0:	605a      	str	r2, [r3, #4]
 8009fd2:	e014      	b.n	8009ffe <_malloc_r+0xae>
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	dac5      	bge.n	8009f64 <_malloc_r+0x14>
 8009fd8:	230c      	movs	r3, #12
 8009fda:	2500      	movs	r5, #0
 8009fdc:	6033      	str	r3, [r6, #0]
 8009fde:	0028      	movs	r0, r5
 8009fe0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009fe2:	6821      	ldr	r1, [r4, #0]
 8009fe4:	1bc9      	subs	r1, r1, r7
 8009fe6:	d420      	bmi.n	800a02a <_malloc_r+0xda>
 8009fe8:	290b      	cmp	r1, #11
 8009fea:	d918      	bls.n	800a01e <_malloc_r+0xce>
 8009fec:	19e2      	adds	r2, r4, r7
 8009fee:	6027      	str	r7, [r4, #0]
 8009ff0:	42a3      	cmp	r3, r4
 8009ff2:	d112      	bne.n	800a01a <_malloc_r+0xca>
 8009ff4:	9b00      	ldr	r3, [sp, #0]
 8009ff6:	601a      	str	r2, [r3, #0]
 8009ff8:	6863      	ldr	r3, [r4, #4]
 8009ffa:	6011      	str	r1, [r2, #0]
 8009ffc:	6053      	str	r3, [r2, #4]
 8009ffe:	0030      	movs	r0, r6
 800a000:	0025      	movs	r5, r4
 800a002:	f000 f82f 	bl	800a064 <__malloc_unlock>
 800a006:	2207      	movs	r2, #7
 800a008:	350b      	adds	r5, #11
 800a00a:	1d23      	adds	r3, r4, #4
 800a00c:	4395      	bics	r5, r2
 800a00e:	1aea      	subs	r2, r5, r3
 800a010:	429d      	cmp	r5, r3
 800a012:	d0e4      	beq.n	8009fde <_malloc_r+0x8e>
 800a014:	1b5b      	subs	r3, r3, r5
 800a016:	50a3      	str	r3, [r4, r2]
 800a018:	e7e1      	b.n	8009fde <_malloc_r+0x8e>
 800a01a:	605a      	str	r2, [r3, #4]
 800a01c:	e7ec      	b.n	8009ff8 <_malloc_r+0xa8>
 800a01e:	6862      	ldr	r2, [r4, #4]
 800a020:	42a3      	cmp	r3, r4
 800a022:	d1d5      	bne.n	8009fd0 <_malloc_r+0x80>
 800a024:	9b00      	ldr	r3, [sp, #0]
 800a026:	601a      	str	r2, [r3, #0]
 800a028:	e7e9      	b.n	8009ffe <_malloc_r+0xae>
 800a02a:	0023      	movs	r3, r4
 800a02c:	6864      	ldr	r4, [r4, #4]
 800a02e:	e7a2      	b.n	8009f76 <_malloc_r+0x26>
 800a030:	002c      	movs	r4, r5
 800a032:	686d      	ldr	r5, [r5, #4]
 800a034:	e7ab      	b.n	8009f8e <_malloc_r+0x3e>
 800a036:	0013      	movs	r3, r2
 800a038:	e7c4      	b.n	8009fc4 <_malloc_r+0x74>
 800a03a:	230c      	movs	r3, #12
 800a03c:	0030      	movs	r0, r6
 800a03e:	6033      	str	r3, [r6, #0]
 800a040:	f000 f810 	bl	800a064 <__malloc_unlock>
 800a044:	e7cb      	b.n	8009fde <_malloc_r+0x8e>
 800a046:	6027      	str	r7, [r4, #0]
 800a048:	e7d9      	b.n	8009ffe <_malloc_r+0xae>
 800a04a:	605b      	str	r3, [r3, #4]
 800a04c:	deff      	udf	#255	; 0xff
 800a04e:	46c0      	nop			; (mov r8, r8)
 800a050:	20000300 	.word	0x20000300

0800a054 <__malloc_lock>:
 800a054:	b510      	push	{r4, lr}
 800a056:	4802      	ldr	r0, [pc, #8]	; (800a060 <__malloc_lock+0xc>)
 800a058:	f000 f850 	bl	800a0fc <__retarget_lock_acquire_recursive>
 800a05c:	bd10      	pop	{r4, pc}
 800a05e:	46c0      	nop			; (mov r8, r8)
 800a060:	20000444 	.word	0x20000444

0800a064 <__malloc_unlock>:
 800a064:	b510      	push	{r4, lr}
 800a066:	4802      	ldr	r0, [pc, #8]	; (800a070 <__malloc_unlock+0xc>)
 800a068:	f000 f849 	bl	800a0fe <__retarget_lock_release_recursive>
 800a06c:	bd10      	pop	{r4, pc}
 800a06e:	46c0      	nop			; (mov r8, r8)
 800a070:	20000444 	.word	0x20000444

0800a074 <memset>:
 800a074:	0003      	movs	r3, r0
 800a076:	1882      	adds	r2, r0, r2
 800a078:	4293      	cmp	r3, r2
 800a07a:	d100      	bne.n	800a07e <memset+0xa>
 800a07c:	4770      	bx	lr
 800a07e:	7019      	strb	r1, [r3, #0]
 800a080:	3301      	adds	r3, #1
 800a082:	e7f9      	b.n	800a078 <memset+0x4>

0800a084 <_sbrk_r>:
 800a084:	2300      	movs	r3, #0
 800a086:	b570      	push	{r4, r5, r6, lr}
 800a088:	4d06      	ldr	r5, [pc, #24]	; (800a0a4 <_sbrk_r+0x20>)
 800a08a:	0004      	movs	r4, r0
 800a08c:	0008      	movs	r0, r1
 800a08e:	602b      	str	r3, [r5, #0]
 800a090:	f7f9 f9a0 	bl	80033d4 <_sbrk>
 800a094:	1c43      	adds	r3, r0, #1
 800a096:	d103      	bne.n	800a0a0 <_sbrk_r+0x1c>
 800a098:	682b      	ldr	r3, [r5, #0]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d000      	beq.n	800a0a0 <_sbrk_r+0x1c>
 800a09e:	6023      	str	r3, [r4, #0]
 800a0a0:	bd70      	pop	{r4, r5, r6, pc}
 800a0a2:	46c0      	nop			; (mov r8, r8)
 800a0a4:	20000440 	.word	0x20000440

0800a0a8 <__errno>:
 800a0a8:	4b01      	ldr	r3, [pc, #4]	; (800a0b0 <__errno+0x8>)
 800a0aa:	6818      	ldr	r0, [r3, #0]
 800a0ac:	4770      	bx	lr
 800a0ae:	46c0      	nop			; (mov r8, r8)
 800a0b0:	20000058 	.word	0x20000058

0800a0b4 <__libc_init_array>:
 800a0b4:	b570      	push	{r4, r5, r6, lr}
 800a0b6:	2600      	movs	r6, #0
 800a0b8:	4c0c      	ldr	r4, [pc, #48]	; (800a0ec <__libc_init_array+0x38>)
 800a0ba:	4d0d      	ldr	r5, [pc, #52]	; (800a0f0 <__libc_init_array+0x3c>)
 800a0bc:	1b64      	subs	r4, r4, r5
 800a0be:	10a4      	asrs	r4, r4, #2
 800a0c0:	42a6      	cmp	r6, r4
 800a0c2:	d109      	bne.n	800a0d8 <__libc_init_array+0x24>
 800a0c4:	2600      	movs	r6, #0
 800a0c6:	f000 f81b 	bl	800a100 <_init>
 800a0ca:	4c0a      	ldr	r4, [pc, #40]	; (800a0f4 <__libc_init_array+0x40>)
 800a0cc:	4d0a      	ldr	r5, [pc, #40]	; (800a0f8 <__libc_init_array+0x44>)
 800a0ce:	1b64      	subs	r4, r4, r5
 800a0d0:	10a4      	asrs	r4, r4, #2
 800a0d2:	42a6      	cmp	r6, r4
 800a0d4:	d105      	bne.n	800a0e2 <__libc_init_array+0x2e>
 800a0d6:	bd70      	pop	{r4, r5, r6, pc}
 800a0d8:	00b3      	lsls	r3, r6, #2
 800a0da:	58eb      	ldr	r3, [r5, r3]
 800a0dc:	4798      	blx	r3
 800a0de:	3601      	adds	r6, #1
 800a0e0:	e7ee      	b.n	800a0c0 <__libc_init_array+0xc>
 800a0e2:	00b3      	lsls	r3, r6, #2
 800a0e4:	58eb      	ldr	r3, [r5, r3]
 800a0e6:	4798      	blx	r3
 800a0e8:	3601      	adds	r6, #1
 800a0ea:	e7f2      	b.n	800a0d2 <__libc_init_array+0x1e>
 800a0ec:	0800a700 	.word	0x0800a700
 800a0f0:	0800a700 	.word	0x0800a700
 800a0f4:	0800a704 	.word	0x0800a704
 800a0f8:	0800a700 	.word	0x0800a700

0800a0fc <__retarget_lock_acquire_recursive>:
 800a0fc:	4770      	bx	lr

0800a0fe <__retarget_lock_release_recursive>:
 800a0fe:	4770      	bx	lr

0800a100 <_init>:
 800a100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a102:	46c0      	nop			; (mov r8, r8)
 800a104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a106:	bc08      	pop	{r3}
 800a108:	469e      	mov	lr, r3
 800a10a:	4770      	bx	lr

0800a10c <_fini>:
 800a10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a10e:	46c0      	nop			; (mov r8, r8)
 800a110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a112:	bc08      	pop	{r3}
 800a114:	469e      	mov	lr, r3
 800a116:	4770      	bx	lr
